
Projeto2-Otimizacao-Energetica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000306c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20400000  0040306c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f0  2040084c  004038b8  0002084c  2**2
                  ALLOC
  3 .stack        00002004  2040093c  004039a8  0002084c  2**0
                  ALLOC
  4 .heap         00000200  20402940  004059ac  0002084c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000ae31  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a4f  00000000  00000000  0002b704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006ede  00000000  00000000  0002d153  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000be8  00000000  00000000  00034031  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ad0  00000000  00000000  00034c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001eddf  00000000  00000000  000356e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c1b5  00000000  00000000  000544c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008a7ef  00000000  00000000  0006067d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000398c  00000000  00000000  000eae6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402940 	.word	0x20402940
  400004:	00401379 	.word	0x00401379
  400008:	00401429 	.word	0x00401429
  40000c:	00401429 	.word	0x00401429
  400010:	00401429 	.word	0x00401429
  400014:	00401429 	.word	0x00401429
  400018:	00401429 	.word	0x00401429
	...
  40002c:	00401429 	.word	0x00401429
  400030:	00401429 	.word	0x00401429
  400034:	00000000 	.word	0x00000000
  400038:	00401429 	.word	0x00401429
  40003c:	00401429 	.word	0x00401429
  400040:	00401429 	.word	0x00401429
  400044:	00401429 	.word	0x00401429
  400048:	00401429 	.word	0x00401429
  40004c:	00401ded 	.word	0x00401ded
  400050:	00401429 	.word	0x00401429
  400054:	00401429 	.word	0x00401429
  400058:	00401429 	.word	0x00401429
  40005c:	00401429 	.word	0x00401429
  400060:	00401429 	.word	0x00401429
  400064:	00000000 	.word	0x00000000
  400068:	0040069d 	.word	0x0040069d
  40006c:	004006b5 	.word	0x004006b5
  400070:	004006cd 	.word	0x004006cd
  400074:	00401429 	.word	0x00401429
  400078:	00401429 	.word	0x00401429
  40007c:	00401429 	.word	0x00401429
  400080:	004006e5 	.word	0x004006e5
  400084:	004006fd 	.word	0x004006fd
  400088:	00401429 	.word	0x00401429
  40008c:	00401429 	.word	0x00401429
  400090:	00401429 	.word	0x00401429
  400094:	00401429 	.word	0x00401429
  400098:	00401429 	.word	0x00401429
  40009c:	00401429 	.word	0x00401429
  4000a0:	00401429 	.word	0x00401429
  4000a4:	00401429 	.word	0x00401429
  4000a8:	00401429 	.word	0x00401429
  4000ac:	00401429 	.word	0x00401429
  4000b0:	00401429 	.word	0x00401429
  4000b4:	00401429 	.word	0x00401429
  4000b8:	00401429 	.word	0x00401429
  4000bc:	00401429 	.word	0x00401429
  4000c0:	00401429 	.word	0x00401429
  4000c4:	00401429 	.word	0x00401429
  4000c8:	00401429 	.word	0x00401429
  4000cc:	00401429 	.word	0x00401429
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401429 	.word	0x00401429
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401429 	.word	0x00401429
  4000e0:	00401429 	.word	0x00401429
  4000e4:	00401429 	.word	0x00401429
  4000e8:	00401429 	.word	0x00401429
  4000ec:	00401429 	.word	0x00401429
  4000f0:	00401429 	.word	0x00401429
  4000f4:	00401429 	.word	0x00401429
  4000f8:	00401429 	.word	0x00401429
  4000fc:	00401429 	.word	0x00401429
  400100:	00401429 	.word	0x00401429
  400104:	00401429 	.word	0x00401429
  400108:	00401429 	.word	0x00401429
  40010c:	00401429 	.word	0x00401429
  400110:	00401429 	.word	0x00401429
	...
  400120:	00401429 	.word	0x00401429
  400124:	00401429 	.word	0x00401429
  400128:	00401429 	.word	0x00401429
  40012c:	00401429 	.word	0x00401429
  400130:	00401429 	.word	0x00401429
  400134:	00000000 	.word	0x00000000
  400138:	00401429 	.word	0x00401429
  40013c:	00401429 	.word	0x00401429

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040084c 	.word	0x2040084c
  40015c:	00000000 	.word	0x00000000
  400160:	0040306c 	.word	0x0040306c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400850 	.word	0x20400850
  400190:	0040306c 	.word	0x0040306c
  400194:	0040306c 	.word	0x0040306c
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	00400795 	.word	0x00400795
  40021c:	00400801 	.word	0x00400801
  400220:	00400871 	.word	0x00400871

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	004007cd 	.word	0x004007cd
  400290:	004008e9 	.word	0x004008e9

00400294 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400294:	b580      	push	{r7, lr}
  400296:	b082      	sub	sp, #8
  400298:	af00      	add	r7, sp, #0
  40029a:	4603      	mov	r3, r0
  40029c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40029e:	bf00      	nop
  4002a0:	79fb      	ldrb	r3, [r7, #7]
  4002a2:	4618      	mov	r0, r3
  4002a4:	4b05      	ldr	r3, [pc, #20]	; (4002bc <osc_wait_ready+0x28>)
  4002a6:	4798      	blx	r3
  4002a8:	4603      	mov	r3, r0
  4002aa:	f083 0301 	eor.w	r3, r3, #1
  4002ae:	b2db      	uxtb	r3, r3
  4002b0:	2b00      	cmp	r3, #0
  4002b2:	d1f5      	bne.n	4002a0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4002b4:	bf00      	nop
  4002b6:	3708      	adds	r7, #8
  4002b8:	46bd      	mov	sp, r7
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	00400225 	.word	0x00400225

004002c0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4002c0:	b480      	push	{r7}
  4002c2:	af00      	add	r7, sp, #0
	}
#endif

	/* Config system clock setting */
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4002c8:	4618      	mov	r0, r3
  4002ca:	46bd      	mov	sp, r7
  4002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d0:	4770      	bx	lr
  4002d2:	bf00      	nop

004002d4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4002d4:	b580      	push	{r7, lr}
  4002d6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4002d8:	4b02      	ldr	r3, [pc, #8]	; (4002e4 <sysclk_get_cpu_hz+0x10>)
  4002da:	4798      	blx	r3
  4002dc:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4002de:	4618      	mov	r0, r3
  4002e0:	bd80      	pop	{r7, pc}
  4002e2:	bf00      	nop
  4002e4:	004002c1 	.word	0x004002c1

004002e8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4002e8:	b580      	push	{r7, lr}
  4002ea:	b082      	sub	sp, #8
  4002ec:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4002ee:	480c      	ldr	r0, [pc, #48]	; (400320 <sysclk_init+0x38>)
  4002f0:	4b0c      	ldr	r3, [pc, #48]	; (400324 <sysclk_init+0x3c>)
  4002f2:	4798      	blx	r3

	/* Config system clock setting */
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
		osc_enable(OSC_SLCK_32K_RC);
  4002f4:	2000      	movs	r0, #0
  4002f6:	4b0c      	ldr	r3, [pc, #48]	; (400328 <sysclk_init+0x40>)
  4002f8:	4798      	blx	r3
		osc_wait_ready(OSC_SLCK_32K_RC);
  4002fa:	2000      	movs	r0, #0
  4002fc:	4b0b      	ldr	r3, [pc, #44]	; (40032c <sysclk_init+0x44>)
  4002fe:	4798      	blx	r3
		pmc_switch_mck_to_sclk(CONFIG_SYSCLK_PRES);
  400300:	2000      	movs	r0, #0
  400302:	4b0b      	ldr	r3, [pc, #44]	; (400330 <sysclk_init+0x48>)
  400304:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400306:	4b0b      	ldr	r3, [pc, #44]	; (400334 <sysclk_init+0x4c>)
  400308:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40030a:	4b0b      	ldr	r3, [pc, #44]	; (400338 <sysclk_init+0x50>)
  40030c:	4798      	blx	r3
  40030e:	4603      	mov	r3, r0
  400310:	4618      	mov	r0, r3
  400312:	4b04      	ldr	r3, [pc, #16]	; (400324 <sysclk_init+0x3c>)
  400314:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400316:	bf00      	nop
  400318:	3708      	adds	r7, #8
  40031a:	46bd      	mov	sp, r7
  40031c:	bd80      	pop	{r7, pc}
  40031e:	bf00      	nop
  400320:	11e1a300 	.word	0x11e1a300
  400324:	0040159d 	.word	0x0040159d
  400328:	0040019d 	.word	0x0040019d
  40032c:	00400295 	.word	0x00400295
  400330:	00400715 	.word	0x00400715
  400334:	00401431 	.word	0x00401431
  400338:	004002d5 	.word	0x004002d5

0040033c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40033c:	b580      	push	{r7, lr}
  40033e:	b086      	sub	sp, #24
  400340:	af00      	add	r7, sp, #0
  400342:	60f8      	str	r0, [r7, #12]
  400344:	60b9      	str	r1, [r7, #8]
  400346:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400348:	2300      	movs	r3, #0
  40034a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40034c:	68fb      	ldr	r3, [r7, #12]
  40034e:	2b00      	cmp	r3, #0
  400350:	d012      	beq.n	400378 <_read+0x3c>
		return -1;
  400352:	f04f 33ff 	mov.w	r3, #4294967295
  400356:	e013      	b.n	400380 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400358:	4b0b      	ldr	r3, [pc, #44]	; (400388 <_read+0x4c>)
  40035a:	681b      	ldr	r3, [r3, #0]
  40035c:	4a0b      	ldr	r2, [pc, #44]	; (40038c <_read+0x50>)
  40035e:	6812      	ldr	r2, [r2, #0]
  400360:	68b9      	ldr	r1, [r7, #8]
  400362:	4610      	mov	r0, r2
  400364:	4798      	blx	r3
		ptr++;
  400366:	68bb      	ldr	r3, [r7, #8]
  400368:	3301      	adds	r3, #1
  40036a:	60bb      	str	r3, [r7, #8]
		nChars++;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	3301      	adds	r3, #1
  400370:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	3b01      	subs	r3, #1
  400376:	607b      	str	r3, [r7, #4]
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	2b00      	cmp	r3, #0
  40037c:	dcec      	bgt.n	400358 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40037e:	697b      	ldr	r3, [r7, #20]
}
  400380:	4618      	mov	r0, r3
  400382:	3718      	adds	r7, #24
  400384:	46bd      	mov	sp, r7
  400386:	bd80      	pop	{r7, pc}
  400388:	2040092c 	.word	0x2040092c
  40038c:	20400934 	.word	0x20400934

00400390 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400390:	b580      	push	{r7, lr}
  400392:	b086      	sub	sp, #24
  400394:	af00      	add	r7, sp, #0
  400396:	60f8      	str	r0, [r7, #12]
  400398:	60b9      	str	r1, [r7, #8]
  40039a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40039c:	2300      	movs	r3, #0
  40039e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4003a0:	68fb      	ldr	r3, [r7, #12]
  4003a2:	2b01      	cmp	r3, #1
  4003a4:	d01e      	beq.n	4003e4 <_write+0x54>
  4003a6:	68fb      	ldr	r3, [r7, #12]
  4003a8:	2b02      	cmp	r3, #2
  4003aa:	d01b      	beq.n	4003e4 <_write+0x54>
  4003ac:	68fb      	ldr	r3, [r7, #12]
  4003ae:	2b03      	cmp	r3, #3
  4003b0:	d018      	beq.n	4003e4 <_write+0x54>
		return -1;
  4003b2:	f04f 33ff 	mov.w	r3, #4294967295
  4003b6:	e019      	b.n	4003ec <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4003b8:	4b0e      	ldr	r3, [pc, #56]	; (4003f4 <_write+0x64>)
  4003ba:	681a      	ldr	r2, [r3, #0]
  4003bc:	4b0e      	ldr	r3, [pc, #56]	; (4003f8 <_write+0x68>)
  4003be:	6818      	ldr	r0, [r3, #0]
  4003c0:	68bb      	ldr	r3, [r7, #8]
  4003c2:	1c59      	adds	r1, r3, #1
  4003c4:	60b9      	str	r1, [r7, #8]
  4003c6:	781b      	ldrb	r3, [r3, #0]
  4003c8:	4619      	mov	r1, r3
  4003ca:	4790      	blx	r2
  4003cc:	4603      	mov	r3, r0
  4003ce:	2b00      	cmp	r3, #0
  4003d0:	da02      	bge.n	4003d8 <_write+0x48>
			return -1;
  4003d2:	f04f 33ff 	mov.w	r3, #4294967295
  4003d6:	e009      	b.n	4003ec <_write+0x5c>
		}
		++nChars;
  4003d8:	697b      	ldr	r3, [r7, #20]
  4003da:	3301      	adds	r3, #1
  4003dc:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4003de:	687b      	ldr	r3, [r7, #4]
  4003e0:	3b01      	subs	r3, #1
  4003e2:	607b      	str	r3, [r7, #4]
  4003e4:	687b      	ldr	r3, [r7, #4]
  4003e6:	2b00      	cmp	r3, #0
  4003e8:	d1e6      	bne.n	4003b8 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4003ea:	697b      	ldr	r3, [r7, #20]
}
  4003ec:	4618      	mov	r0, r3
  4003ee:	3718      	adds	r7, #24
  4003f0:	46bd      	mov	sp, r7
  4003f2:	bd80      	pop	{r7, pc}
  4003f4:	20400930 	.word	0x20400930
  4003f8:	20400934 	.word	0x20400934

004003fc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4003fc:	b480      	push	{r7}
  4003fe:	b085      	sub	sp, #20
  400400:	af00      	add	r7, sp, #0
  400402:	60f8      	str	r0, [r7, #12]
  400404:	60b9      	str	r1, [r7, #8]
  400406:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400408:	687b      	ldr	r3, [r7, #4]
  40040a:	2b00      	cmp	r3, #0
  40040c:	d003      	beq.n	400416 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40040e:	68fb      	ldr	r3, [r7, #12]
  400410:	68ba      	ldr	r2, [r7, #8]
  400412:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400414:	e002      	b.n	40041c <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400416:	68fb      	ldr	r3, [r7, #12]
  400418:	68ba      	ldr	r2, [r7, #8]
  40041a:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  40041c:	bf00      	nop
  40041e:	3714      	adds	r7, #20
  400420:	46bd      	mov	sp, r7
  400422:	f85d 7b04 	ldr.w	r7, [sp], #4
  400426:	4770      	bx	lr

00400428 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400428:	b480      	push	{r7}
  40042a:	b087      	sub	sp, #28
  40042c:	af00      	add	r7, sp, #0
  40042e:	60f8      	str	r0, [r7, #12]
  400430:	60b9      	str	r1, [r7, #8]
  400432:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400434:	68fb      	ldr	r3, [r7, #12]
  400436:	687a      	ldr	r2, [r7, #4]
  400438:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40043a:	68bb      	ldr	r3, [r7, #8]
  40043c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400440:	d04a      	beq.n	4004d8 <pio_set_peripheral+0xb0>
  400442:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400446:	d808      	bhi.n	40045a <pio_set_peripheral+0x32>
  400448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40044c:	d016      	beq.n	40047c <pio_set_peripheral+0x54>
  40044e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400452:	d02c      	beq.n	4004ae <pio_set_peripheral+0x86>
  400454:	2b00      	cmp	r3, #0
  400456:	d069      	beq.n	40052c <pio_set_peripheral+0x104>
  400458:	e064      	b.n	400524 <pio_set_peripheral+0xfc>
  40045a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40045e:	d065      	beq.n	40052c <pio_set_peripheral+0x104>
  400460:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400464:	d803      	bhi.n	40046e <pio_set_peripheral+0x46>
  400466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40046a:	d04a      	beq.n	400502 <pio_set_peripheral+0xda>
  40046c:	e05a      	b.n	400524 <pio_set_peripheral+0xfc>
  40046e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400472:	d05b      	beq.n	40052c <pio_set_peripheral+0x104>
  400474:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400478:	d058      	beq.n	40052c <pio_set_peripheral+0x104>
  40047a:	e053      	b.n	400524 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40047c:	68fb      	ldr	r3, [r7, #12]
  40047e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400480:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400482:	68fb      	ldr	r3, [r7, #12]
  400484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400486:	687b      	ldr	r3, [r7, #4]
  400488:	43d9      	mvns	r1, r3
  40048a:	697b      	ldr	r3, [r7, #20]
  40048c:	400b      	ands	r3, r1
  40048e:	401a      	ands	r2, r3
  400490:	68fb      	ldr	r3, [r7, #12]
  400492:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400494:	68fb      	ldr	r3, [r7, #12]
  400496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400498:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40049a:	68fb      	ldr	r3, [r7, #12]
  40049c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40049e:	687b      	ldr	r3, [r7, #4]
  4004a0:	43d9      	mvns	r1, r3
  4004a2:	697b      	ldr	r3, [r7, #20]
  4004a4:	400b      	ands	r3, r1
  4004a6:	401a      	ands	r2, r3
  4004a8:	68fb      	ldr	r3, [r7, #12]
  4004aa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4004ac:	e03a      	b.n	400524 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ae:	68fb      	ldr	r3, [r7, #12]
  4004b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4004b2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004b4:	687a      	ldr	r2, [r7, #4]
  4004b6:	697b      	ldr	r3, [r7, #20]
  4004b8:	431a      	orrs	r2, r3
  4004ba:	68fb      	ldr	r3, [r7, #12]
  4004bc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004be:	68fb      	ldr	r3, [r7, #12]
  4004c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4004c2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004c4:	68fb      	ldr	r3, [r7, #12]
  4004c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004c8:	687b      	ldr	r3, [r7, #4]
  4004ca:	43d9      	mvns	r1, r3
  4004cc:	697b      	ldr	r3, [r7, #20]
  4004ce:	400b      	ands	r3, r1
  4004d0:	401a      	ands	r2, r3
  4004d2:	68fb      	ldr	r3, [r7, #12]
  4004d4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4004d6:	e025      	b.n	400524 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004d8:	68fb      	ldr	r3, [r7, #12]
  4004da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4004dc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004de:	68fb      	ldr	r3, [r7, #12]
  4004e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004e2:	687b      	ldr	r3, [r7, #4]
  4004e4:	43d9      	mvns	r1, r3
  4004e6:	697b      	ldr	r3, [r7, #20]
  4004e8:	400b      	ands	r3, r1
  4004ea:	401a      	ands	r2, r3
  4004ec:	68fb      	ldr	r3, [r7, #12]
  4004ee:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f0:	68fb      	ldr	r3, [r7, #12]
  4004f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4004f4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004f6:	687a      	ldr	r2, [r7, #4]
  4004f8:	697b      	ldr	r3, [r7, #20]
  4004fa:	431a      	orrs	r2, r3
  4004fc:	68fb      	ldr	r3, [r7, #12]
  4004fe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400500:	e010      	b.n	400524 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400502:	68fb      	ldr	r3, [r7, #12]
  400504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400506:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400508:	687a      	ldr	r2, [r7, #4]
  40050a:	697b      	ldr	r3, [r7, #20]
  40050c:	431a      	orrs	r2, r3
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400512:	68fb      	ldr	r3, [r7, #12]
  400514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400516:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400518:	687a      	ldr	r2, [r7, #4]
  40051a:	697b      	ldr	r3, [r7, #20]
  40051c:	431a      	orrs	r2, r3
  40051e:	68fb      	ldr	r3, [r7, #12]
  400520:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400522:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400524:	68fb      	ldr	r3, [r7, #12]
  400526:	687a      	ldr	r2, [r7, #4]
  400528:	605a      	str	r2, [r3, #4]
  40052a:	e000      	b.n	40052e <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40052c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40052e:	371c      	adds	r7, #28
  400530:	46bd      	mov	sp, r7
  400532:	f85d 7b04 	ldr.w	r7, [sp], #4
  400536:	4770      	bx	lr

00400538 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400538:	b580      	push	{r7, lr}
  40053a:	b084      	sub	sp, #16
  40053c:	af00      	add	r7, sp, #0
  40053e:	60f8      	str	r0, [r7, #12]
  400540:	60b9      	str	r1, [r7, #8]
  400542:	607a      	str	r2, [r7, #4]
  400544:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400546:	68b9      	ldr	r1, [r7, #8]
  400548:	68f8      	ldr	r0, [r7, #12]
  40054a:	4b12      	ldr	r3, [pc, #72]	; (400594 <pio_set_output+0x5c>)
  40054c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40054e:	69ba      	ldr	r2, [r7, #24]
  400550:	68b9      	ldr	r1, [r7, #8]
  400552:	68f8      	ldr	r0, [r7, #12]
  400554:	4b10      	ldr	r3, [pc, #64]	; (400598 <pio_set_output+0x60>)
  400556:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400558:	683b      	ldr	r3, [r7, #0]
  40055a:	2b00      	cmp	r3, #0
  40055c:	d003      	beq.n	400566 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40055e:	68fb      	ldr	r3, [r7, #12]
  400560:	68ba      	ldr	r2, [r7, #8]
  400562:	651a      	str	r2, [r3, #80]	; 0x50
  400564:	e002      	b.n	40056c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400566:	68fb      	ldr	r3, [r7, #12]
  400568:	68ba      	ldr	r2, [r7, #8]
  40056a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40056c:	687b      	ldr	r3, [r7, #4]
  40056e:	2b00      	cmp	r3, #0
  400570:	d003      	beq.n	40057a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400572:	68fb      	ldr	r3, [r7, #12]
  400574:	68ba      	ldr	r2, [r7, #8]
  400576:	631a      	str	r2, [r3, #48]	; 0x30
  400578:	e002      	b.n	400580 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	68ba      	ldr	r2, [r7, #8]
  40057e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	68ba      	ldr	r2, [r7, #8]
  400584:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	68ba      	ldr	r2, [r7, #8]
  40058a:	601a      	str	r2, [r3, #0]
}
  40058c:	bf00      	nop
  40058e:	3710      	adds	r7, #16
  400590:	46bd      	mov	sp, r7
  400592:	bd80      	pop	{r7, pc}
  400594:	0040059d 	.word	0x0040059d
  400598:	004003fd 	.word	0x004003fd

0040059c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40059c:	b480      	push	{r7}
  40059e:	b083      	sub	sp, #12
  4005a0:	af00      	add	r7, sp, #0
  4005a2:	6078      	str	r0, [r7, #4]
  4005a4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4005a6:	687b      	ldr	r3, [r7, #4]
  4005a8:	683a      	ldr	r2, [r7, #0]
  4005aa:	645a      	str	r2, [r3, #68]	; 0x44
}
  4005ac:	bf00      	nop
  4005ae:	370c      	adds	r7, #12
  4005b0:	46bd      	mov	sp, r7
  4005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005b6:	4770      	bx	lr

004005b8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4005b8:	b480      	push	{r7}
  4005ba:	b083      	sub	sp, #12
  4005bc:	af00      	add	r7, sp, #0
  4005be:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4005c0:	687b      	ldr	r3, [r7, #4]
  4005c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4005c4:	4618      	mov	r0, r3
  4005c6:	370c      	adds	r7, #12
  4005c8:	46bd      	mov	sp, r7
  4005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005ce:	4770      	bx	lr

004005d0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4005d0:	b480      	push	{r7}
  4005d2:	b083      	sub	sp, #12
  4005d4:	af00      	add	r7, sp, #0
  4005d6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4005d8:	687b      	ldr	r3, [r7, #4]
  4005da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4005dc:	4618      	mov	r0, r3
  4005de:	370c      	adds	r7, #12
  4005e0:	46bd      	mov	sp, r7
  4005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005e6:	4770      	bx	lr

004005e8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005e8:	b580      	push	{r7, lr}
  4005ea:	b084      	sub	sp, #16
  4005ec:	af00      	add	r7, sp, #0
  4005ee:	6078      	str	r0, [r7, #4]
  4005f0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005f2:	6878      	ldr	r0, [r7, #4]
  4005f4:	4b26      	ldr	r3, [pc, #152]	; (400690 <pio_handler_process+0xa8>)
  4005f6:	4798      	blx	r3
  4005f8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4005fa:	6878      	ldr	r0, [r7, #4]
  4005fc:	4b25      	ldr	r3, [pc, #148]	; (400694 <pio_handler_process+0xac>)
  4005fe:	4798      	blx	r3
  400600:	4602      	mov	r2, r0
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	4013      	ands	r3, r2
  400606:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400608:	68fb      	ldr	r3, [r7, #12]
  40060a:	2b00      	cmp	r3, #0
  40060c:	d03c      	beq.n	400688 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40060e:	2300      	movs	r3, #0
  400610:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400612:	e034      	b.n	40067e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400614:	4a20      	ldr	r2, [pc, #128]	; (400698 <pio_handler_process+0xb0>)
  400616:	68bb      	ldr	r3, [r7, #8]
  400618:	011b      	lsls	r3, r3, #4
  40061a:	4413      	add	r3, r2
  40061c:	681a      	ldr	r2, [r3, #0]
  40061e:	683b      	ldr	r3, [r7, #0]
  400620:	429a      	cmp	r2, r3
  400622:	d126      	bne.n	400672 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400624:	4a1c      	ldr	r2, [pc, #112]	; (400698 <pio_handler_process+0xb0>)
  400626:	68bb      	ldr	r3, [r7, #8]
  400628:	011b      	lsls	r3, r3, #4
  40062a:	4413      	add	r3, r2
  40062c:	3304      	adds	r3, #4
  40062e:	681a      	ldr	r2, [r3, #0]
  400630:	68fb      	ldr	r3, [r7, #12]
  400632:	4013      	ands	r3, r2
  400634:	2b00      	cmp	r3, #0
  400636:	d01c      	beq.n	400672 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400638:	4a17      	ldr	r2, [pc, #92]	; (400698 <pio_handler_process+0xb0>)
  40063a:	68bb      	ldr	r3, [r7, #8]
  40063c:	011b      	lsls	r3, r3, #4
  40063e:	4413      	add	r3, r2
  400640:	330c      	adds	r3, #12
  400642:	681b      	ldr	r3, [r3, #0]
  400644:	4914      	ldr	r1, [pc, #80]	; (400698 <pio_handler_process+0xb0>)
  400646:	68ba      	ldr	r2, [r7, #8]
  400648:	0112      	lsls	r2, r2, #4
  40064a:	440a      	add	r2, r1
  40064c:	6810      	ldr	r0, [r2, #0]
  40064e:	4912      	ldr	r1, [pc, #72]	; (400698 <pio_handler_process+0xb0>)
  400650:	68ba      	ldr	r2, [r7, #8]
  400652:	0112      	lsls	r2, r2, #4
  400654:	440a      	add	r2, r1
  400656:	3204      	adds	r2, #4
  400658:	6812      	ldr	r2, [r2, #0]
  40065a:	4611      	mov	r1, r2
  40065c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40065e:	4a0e      	ldr	r2, [pc, #56]	; (400698 <pio_handler_process+0xb0>)
  400660:	68bb      	ldr	r3, [r7, #8]
  400662:	011b      	lsls	r3, r3, #4
  400664:	4413      	add	r3, r2
  400666:	3304      	adds	r3, #4
  400668:	681b      	ldr	r3, [r3, #0]
  40066a:	43db      	mvns	r3, r3
  40066c:	68fa      	ldr	r2, [r7, #12]
  40066e:	4013      	ands	r3, r2
  400670:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400672:	68bb      	ldr	r3, [r7, #8]
  400674:	3301      	adds	r3, #1
  400676:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400678:	68bb      	ldr	r3, [r7, #8]
  40067a:	2b06      	cmp	r3, #6
  40067c:	d803      	bhi.n	400686 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40067e:	68fb      	ldr	r3, [r7, #12]
  400680:	2b00      	cmp	r3, #0
  400682:	d1c7      	bne.n	400614 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400684:	e000      	b.n	400688 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400686:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400688:	bf00      	nop
  40068a:	3710      	adds	r7, #16
  40068c:	46bd      	mov	sp, r7
  40068e:	bd80      	pop	{r7, pc}
  400690:	004005b9 	.word	0x004005b9
  400694:	004005d1 	.word	0x004005d1
  400698:	20400868 	.word	0x20400868

0040069c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40069c:	b580      	push	{r7, lr}
  40069e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4006a0:	210a      	movs	r1, #10
  4006a2:	4802      	ldr	r0, [pc, #8]	; (4006ac <PIOA_Handler+0x10>)
  4006a4:	4b02      	ldr	r3, [pc, #8]	; (4006b0 <PIOA_Handler+0x14>)
  4006a6:	4798      	blx	r3
}
  4006a8:	bf00      	nop
  4006aa:	bd80      	pop	{r7, pc}
  4006ac:	400e0e00 	.word	0x400e0e00
  4006b0:	004005e9 	.word	0x004005e9

004006b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4006b4:	b580      	push	{r7, lr}
  4006b6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4006b8:	210b      	movs	r1, #11
  4006ba:	4802      	ldr	r0, [pc, #8]	; (4006c4 <PIOB_Handler+0x10>)
  4006bc:	4b02      	ldr	r3, [pc, #8]	; (4006c8 <PIOB_Handler+0x14>)
  4006be:	4798      	blx	r3
}
  4006c0:	bf00      	nop
  4006c2:	bd80      	pop	{r7, pc}
  4006c4:	400e1000 	.word	0x400e1000
  4006c8:	004005e9 	.word	0x004005e9

004006cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4006cc:	b580      	push	{r7, lr}
  4006ce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4006d0:	210c      	movs	r1, #12
  4006d2:	4802      	ldr	r0, [pc, #8]	; (4006dc <PIOC_Handler+0x10>)
  4006d4:	4b02      	ldr	r3, [pc, #8]	; (4006e0 <PIOC_Handler+0x14>)
  4006d6:	4798      	blx	r3
}
  4006d8:	bf00      	nop
  4006da:	bd80      	pop	{r7, pc}
  4006dc:	400e1200 	.word	0x400e1200
  4006e0:	004005e9 	.word	0x004005e9

004006e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4006e4:	b580      	push	{r7, lr}
  4006e6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4006e8:	2110      	movs	r1, #16
  4006ea:	4802      	ldr	r0, [pc, #8]	; (4006f4 <PIOD_Handler+0x10>)
  4006ec:	4b02      	ldr	r3, [pc, #8]	; (4006f8 <PIOD_Handler+0x14>)
  4006ee:	4798      	blx	r3
}
  4006f0:	bf00      	nop
  4006f2:	bd80      	pop	{r7, pc}
  4006f4:	400e1400 	.word	0x400e1400
  4006f8:	004005e9 	.word	0x004005e9

004006fc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4006fc:	b580      	push	{r7, lr}
  4006fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400700:	2111      	movs	r1, #17
  400702:	4802      	ldr	r0, [pc, #8]	; (40070c <PIOE_Handler+0x10>)
  400704:	4b02      	ldr	r3, [pc, #8]	; (400710 <PIOE_Handler+0x14>)
  400706:	4798      	blx	r3
}
  400708:	bf00      	nop
  40070a:	bd80      	pop	{r7, pc}
  40070c:	400e1600 	.word	0x400e1600
  400710:	004005e9 	.word	0x004005e9

00400714 <pmc_switch_mck_to_sclk>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
{
  400714:	b480      	push	{r7}
  400716:	b085      	sub	sp, #20
  400718:	af00      	add	r7, sp, #0
  40071a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40071c:	4a1c      	ldr	r2, [pc, #112]	; (400790 <pmc_switch_mck_to_sclk+0x7c>)
  40071e:	4b1c      	ldr	r3, [pc, #112]	; (400790 <pmc_switch_mck_to_sclk+0x7c>)
  400720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400722:	f023 0303 	bic.w	r3, r3, #3
  400726:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_SLOW_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40072c:	60fb      	str	r3, [r7, #12]
  40072e:	e007      	b.n	400740 <pmc_switch_mck_to_sclk+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400730:	68fb      	ldr	r3, [r7, #12]
  400732:	2b00      	cmp	r3, #0
  400734:	d101      	bne.n	40073a <pmc_switch_mck_to_sclk+0x26>
			return 1;
  400736:	2301      	movs	r3, #1
  400738:	e023      	b.n	400782 <pmc_switch_mck_to_sclk+0x6e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_SLOW_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40073a:	68fb      	ldr	r3, [r7, #12]
  40073c:	3b01      	subs	r3, #1
  40073e:	60fb      	str	r3, [r7, #12]
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_SLOW_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400740:	4b13      	ldr	r3, [pc, #76]	; (400790 <pmc_switch_mck_to_sclk+0x7c>)
  400742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400744:	f003 0308 	and.w	r3, r3, #8
  400748:	2b00      	cmp	r3, #0
  40074a:	d0f1      	beq.n	400730 <pmc_switch_mck_to_sclk+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40074c:	4910      	ldr	r1, [pc, #64]	; (400790 <pmc_switch_mck_to_sclk+0x7c>)
  40074e:	4b10      	ldr	r3, [pc, #64]	; (400790 <pmc_switch_mck_to_sclk+0x7c>)
  400750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400756:	687b      	ldr	r3, [r7, #4]
  400758:	4313      	orrs	r3, r2
  40075a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400760:	60fb      	str	r3, [r7, #12]
  400762:	e007      	b.n	400774 <pmc_switch_mck_to_sclk+0x60>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400764:	68fb      	ldr	r3, [r7, #12]
  400766:	2b00      	cmp	r3, #0
  400768:	d101      	bne.n	40076e <pmc_switch_mck_to_sclk+0x5a>
			return 1;
  40076a:	2301      	movs	r3, #1
  40076c:	e009      	b.n	400782 <pmc_switch_mck_to_sclk+0x6e>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40076e:	68fb      	ldr	r3, [r7, #12]
  400770:	3b01      	subs	r3, #1
  400772:	60fb      	str	r3, [r7, #12]
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400774:	4b06      	ldr	r3, [pc, #24]	; (400790 <pmc_switch_mck_to_sclk+0x7c>)
  400776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400778:	f003 0308 	and.w	r3, r3, #8
  40077c:	2b00      	cmp	r3, #0
  40077e:	d0f1      	beq.n	400764 <pmc_switch_mck_to_sclk+0x50>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400780:	2300      	movs	r3, #0
}
  400782:	4618      	mov	r0, r3
  400784:	3714      	adds	r7, #20
  400786:	46bd      	mov	sp, r7
  400788:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078c:	4770      	bx	lr
  40078e:	bf00      	nop
  400790:	400e0600 	.word	0x400e0600

00400794 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400794:	b480      	push	{r7}
  400796:	b083      	sub	sp, #12
  400798:	af00      	add	r7, sp, #0
  40079a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40079c:	687b      	ldr	r3, [r7, #4]
  40079e:	2b01      	cmp	r3, #1
  4007a0:	d105      	bne.n	4007ae <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4007a2:	4907      	ldr	r1, [pc, #28]	; (4007c0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4007a4:	4b06      	ldr	r3, [pc, #24]	; (4007c0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4007a6:	689a      	ldr	r2, [r3, #8]
  4007a8:	4b06      	ldr	r3, [pc, #24]	; (4007c4 <pmc_switch_sclk_to_32kxtal+0x30>)
  4007aa:	4313      	orrs	r3, r2
  4007ac:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4007ae:	4b04      	ldr	r3, [pc, #16]	; (4007c0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4007b0:	4a05      	ldr	r2, [pc, #20]	; (4007c8 <pmc_switch_sclk_to_32kxtal+0x34>)
  4007b2:	601a      	str	r2, [r3, #0]
}
  4007b4:	bf00      	nop
  4007b6:	370c      	adds	r7, #12
  4007b8:	46bd      	mov	sp, r7
  4007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007be:	4770      	bx	lr
  4007c0:	400e1810 	.word	0x400e1810
  4007c4:	a5100000 	.word	0xa5100000
  4007c8:	a5000008 	.word	0xa5000008

004007cc <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4007cc:	b480      	push	{r7}
  4007ce:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4007d0:	4b09      	ldr	r3, [pc, #36]	; (4007f8 <pmc_osc_is_ready_32kxtal+0x2c>)
  4007d2:	695b      	ldr	r3, [r3, #20]
  4007d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4007d8:	2b00      	cmp	r3, #0
  4007da:	d007      	beq.n	4007ec <pmc_osc_is_ready_32kxtal+0x20>
  4007dc:	4b07      	ldr	r3, [pc, #28]	; (4007fc <pmc_osc_is_ready_32kxtal+0x30>)
  4007de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4007e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4007e4:	2b00      	cmp	r3, #0
  4007e6:	d001      	beq.n	4007ec <pmc_osc_is_ready_32kxtal+0x20>
  4007e8:	2301      	movs	r3, #1
  4007ea:	e000      	b.n	4007ee <pmc_osc_is_ready_32kxtal+0x22>
  4007ec:	2300      	movs	r3, #0
}
  4007ee:	4618      	mov	r0, r3
  4007f0:	46bd      	mov	sp, r7
  4007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007f6:	4770      	bx	lr
  4007f8:	400e1810 	.word	0x400e1810
  4007fc:	400e0600 	.word	0x400e0600

00400800 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400800:	b480      	push	{r7}
  400802:	b083      	sub	sp, #12
  400804:	af00      	add	r7, sp, #0
  400806:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400808:	4915      	ldr	r1, [pc, #84]	; (400860 <pmc_switch_mainck_to_fastrc+0x60>)
  40080a:	4b15      	ldr	r3, [pc, #84]	; (400860 <pmc_switch_mainck_to_fastrc+0x60>)
  40080c:	6a1a      	ldr	r2, [r3, #32]
  40080e:	4b15      	ldr	r3, [pc, #84]	; (400864 <pmc_switch_mainck_to_fastrc+0x64>)
  400810:	4313      	orrs	r3, r2
  400812:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400814:	bf00      	nop
  400816:	4b12      	ldr	r3, [pc, #72]	; (400860 <pmc_switch_mainck_to_fastrc+0x60>)
  400818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40081e:	2b00      	cmp	r3, #0
  400820:	d0f9      	beq.n	400816 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400822:	490f      	ldr	r1, [pc, #60]	; (400860 <pmc_switch_mainck_to_fastrc+0x60>)
  400824:	4b0e      	ldr	r3, [pc, #56]	; (400860 <pmc_switch_mainck_to_fastrc+0x60>)
  400826:	6a1a      	ldr	r2, [r3, #32]
  400828:	4b0f      	ldr	r3, [pc, #60]	; (400868 <pmc_switch_mainck_to_fastrc+0x68>)
  40082a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40082c:	687a      	ldr	r2, [r7, #4]
  40082e:	4313      	orrs	r3, r2
  400830:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400834:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400836:	bf00      	nop
  400838:	4b09      	ldr	r3, [pc, #36]	; (400860 <pmc_switch_mainck_to_fastrc+0x60>)
  40083a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40083c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400840:	2b00      	cmp	r3, #0
  400842:	d0f9      	beq.n	400838 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400844:	4906      	ldr	r1, [pc, #24]	; (400860 <pmc_switch_mainck_to_fastrc+0x60>)
  400846:	4b06      	ldr	r3, [pc, #24]	; (400860 <pmc_switch_mainck_to_fastrc+0x60>)
  400848:	6a1a      	ldr	r2, [r3, #32]
  40084a:	4b08      	ldr	r3, [pc, #32]	; (40086c <pmc_switch_mainck_to_fastrc+0x6c>)
  40084c:	4013      	ands	r3, r2
  40084e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400852:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400854:	bf00      	nop
  400856:	370c      	adds	r7, #12
  400858:	46bd      	mov	sp, r7
  40085a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40085e:	4770      	bx	lr
  400860:	400e0600 	.word	0x400e0600
  400864:	00370008 	.word	0x00370008
  400868:	ffc8ff8f 	.word	0xffc8ff8f
  40086c:	fec8ffff 	.word	0xfec8ffff

00400870 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400870:	b480      	push	{r7}
  400872:	b083      	sub	sp, #12
  400874:	af00      	add	r7, sp, #0
  400876:	6078      	str	r0, [r7, #4]
  400878:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40087a:	687b      	ldr	r3, [r7, #4]
  40087c:	2b00      	cmp	r3, #0
  40087e:	d008      	beq.n	400892 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400880:	4913      	ldr	r1, [pc, #76]	; (4008d0 <pmc_switch_mainck_to_xtal+0x60>)
  400882:	4b13      	ldr	r3, [pc, #76]	; (4008d0 <pmc_switch_mainck_to_xtal+0x60>)
  400884:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400886:	4a13      	ldr	r2, [pc, #76]	; (4008d4 <pmc_switch_mainck_to_xtal+0x64>)
  400888:	401a      	ands	r2, r3
  40088a:	4b13      	ldr	r3, [pc, #76]	; (4008d8 <pmc_switch_mainck_to_xtal+0x68>)
  40088c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40088e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400890:	e018      	b.n	4008c4 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400892:	490f      	ldr	r1, [pc, #60]	; (4008d0 <pmc_switch_mainck_to_xtal+0x60>)
  400894:	4b0e      	ldr	r3, [pc, #56]	; (4008d0 <pmc_switch_mainck_to_xtal+0x60>)
  400896:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400898:	4b10      	ldr	r3, [pc, #64]	; (4008dc <pmc_switch_mainck_to_xtal+0x6c>)
  40089a:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40089c:	683a      	ldr	r2, [r7, #0]
  40089e:	0212      	lsls	r2, r2, #8
  4008a0:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008a2:	431a      	orrs	r2, r3
  4008a4:	4b0e      	ldr	r3, [pc, #56]	; (4008e0 <pmc_switch_mainck_to_xtal+0x70>)
  4008a6:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008a8:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008aa:	bf00      	nop
  4008ac:	4b08      	ldr	r3, [pc, #32]	; (4008d0 <pmc_switch_mainck_to_xtal+0x60>)
  4008ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008b0:	f003 0301 	and.w	r3, r3, #1
  4008b4:	2b00      	cmp	r3, #0
  4008b6:	d0f9      	beq.n	4008ac <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008b8:	4905      	ldr	r1, [pc, #20]	; (4008d0 <pmc_switch_mainck_to_xtal+0x60>)
  4008ba:	4b05      	ldr	r3, [pc, #20]	; (4008d0 <pmc_switch_mainck_to_xtal+0x60>)
  4008bc:	6a1a      	ldr	r2, [r3, #32]
  4008be:	4b09      	ldr	r3, [pc, #36]	; (4008e4 <pmc_switch_mainck_to_xtal+0x74>)
  4008c0:	4313      	orrs	r3, r2
  4008c2:	620b      	str	r3, [r1, #32]
	}
}
  4008c4:	bf00      	nop
  4008c6:	370c      	adds	r7, #12
  4008c8:	46bd      	mov	sp, r7
  4008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008ce:	4770      	bx	lr
  4008d0:	400e0600 	.word	0x400e0600
  4008d4:	fec8fffc 	.word	0xfec8fffc
  4008d8:	01370002 	.word	0x01370002
  4008dc:	ffc8fffc 	.word	0xffc8fffc
  4008e0:	00370001 	.word	0x00370001
  4008e4:	01370000 	.word	0x01370000

004008e8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4008e8:	b480      	push	{r7}
  4008ea:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008ec:	4b04      	ldr	r3, [pc, #16]	; (400900 <pmc_osc_is_ready_mainck+0x18>)
  4008ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4008f4:	4618      	mov	r0, r3
  4008f6:	46bd      	mov	sp, r7
  4008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008fc:	4770      	bx	lr
  4008fe:	bf00      	nop
  400900:	400e0600 	.word	0x400e0600

00400904 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400904:	b480      	push	{r7}
  400906:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400908:	4b04      	ldr	r3, [pc, #16]	; (40091c <pmc_disable_pllack+0x18>)
  40090a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40090e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400910:	bf00      	nop
  400912:	46bd      	mov	sp, r7
  400914:	f85d 7b04 	ldr.w	r7, [sp], #4
  400918:	4770      	bx	lr
  40091a:	bf00      	nop
  40091c:	400e0600 	.word	0x400e0600

00400920 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400920:	b480      	push	{r7}
  400922:	b083      	sub	sp, #12
  400924:	af00      	add	r7, sp, #0
  400926:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400928:	687b      	ldr	r3, [r7, #4]
  40092a:	2b3f      	cmp	r3, #63	; 0x3f
  40092c:	d901      	bls.n	400932 <pmc_enable_periph_clk+0x12>
		return 1;
  40092e:	2301      	movs	r3, #1
  400930:	e02f      	b.n	400992 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400932:	687b      	ldr	r3, [r7, #4]
  400934:	2b1f      	cmp	r3, #31
  400936:	d813      	bhi.n	400960 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400938:	4b19      	ldr	r3, [pc, #100]	; (4009a0 <pmc_enable_periph_clk+0x80>)
  40093a:	699a      	ldr	r2, [r3, #24]
  40093c:	2101      	movs	r1, #1
  40093e:	687b      	ldr	r3, [r7, #4]
  400940:	fa01 f303 	lsl.w	r3, r1, r3
  400944:	401a      	ands	r2, r3
  400946:	2101      	movs	r1, #1
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	fa01 f303 	lsl.w	r3, r1, r3
  40094e:	429a      	cmp	r2, r3
  400950:	d01e      	beq.n	400990 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400952:	4a13      	ldr	r2, [pc, #76]	; (4009a0 <pmc_enable_periph_clk+0x80>)
  400954:	2101      	movs	r1, #1
  400956:	687b      	ldr	r3, [r7, #4]
  400958:	fa01 f303 	lsl.w	r3, r1, r3
  40095c:	6113      	str	r3, [r2, #16]
  40095e:	e017      	b.n	400990 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400960:	687b      	ldr	r3, [r7, #4]
  400962:	3b20      	subs	r3, #32
  400964:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400966:	4b0e      	ldr	r3, [pc, #56]	; (4009a0 <pmc_enable_periph_clk+0x80>)
  400968:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40096c:	2101      	movs	r1, #1
  40096e:	687b      	ldr	r3, [r7, #4]
  400970:	fa01 f303 	lsl.w	r3, r1, r3
  400974:	401a      	ands	r2, r3
  400976:	2101      	movs	r1, #1
  400978:	687b      	ldr	r3, [r7, #4]
  40097a:	fa01 f303 	lsl.w	r3, r1, r3
  40097e:	429a      	cmp	r2, r3
  400980:	d006      	beq.n	400990 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400982:	4a07      	ldr	r2, [pc, #28]	; (4009a0 <pmc_enable_periph_clk+0x80>)
  400984:	2101      	movs	r1, #1
  400986:	687b      	ldr	r3, [r7, #4]
  400988:	fa01 f303 	lsl.w	r3, r1, r3
  40098c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400990:	2300      	movs	r3, #0
}
  400992:	4618      	mov	r0, r3
  400994:	370c      	adds	r7, #12
  400996:	46bd      	mov	sp, r7
  400998:	f85d 7b04 	ldr.w	r7, [sp], #4
  40099c:	4770      	bx	lr
  40099e:	bf00      	nop
  4009a0:	400e0600 	.word	0x400e0600

004009a4 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
  4009a4:	b480      	push	{r7}
  4009a6:	b083      	sub	sp, #12
  4009a8:	af00      	add	r7, sp, #0
  4009aa:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
  4009b2:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
  4009b4:	4905      	ldr	r1, [pc, #20]	; (4009cc <pmc_set_fast_startup_input+0x28>)
  4009b6:	4b05      	ldr	r3, [pc, #20]	; (4009cc <pmc_set_fast_startup_input+0x28>)
  4009b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009ba:	687b      	ldr	r3, [r7, #4]
  4009bc:	4313      	orrs	r3, r2
  4009be:	670b      	str	r3, [r1, #112]	; 0x70
}
  4009c0:	bf00      	nop
  4009c2:	370c      	adds	r7, #12
  4009c4:	46bd      	mov	sp, r7
  4009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009ca:	4770      	bx	lr
  4009cc:	400e0600 	.word	0x400e0600

004009d0 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4009d0:	b480      	push	{r7}
  4009d2:	b083      	sub	sp, #12
  4009d4:	af00      	add	r7, sp, #0
  4009d6:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  4009d8:	4a04      	ldr	r2, [pc, #16]	; (4009ec <pmc_set_flash_in_wait_mode+0x1c>)
  4009da:	687b      	ldr	r3, [r7, #4]
  4009dc:	6013      	str	r3, [r2, #0]
}
  4009de:	bf00      	nop
  4009e0:	370c      	adds	r7, #12
  4009e2:	46bd      	mov	sp, r7
  4009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009e8:	4770      	bx	lr
  4009ea:	bf00      	nop
  4009ec:	20400004 	.word	0x20400004

004009f0 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  4009f0:	b480      	push	{r7}
  4009f2:	b083      	sub	sp, #12
  4009f4:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4009f6:	4b20      	ldr	r3, [pc, #128]	; (400a78 <pmc_enable_waitmode+0x88>)
  4009f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4009fa:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  4009fc:	687b      	ldr	r3, [r7, #4]
  4009fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  400a02:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400a04:	687b      	ldr	r3, [r7, #4]
  400a06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400a0a:	607b      	str	r3, [r7, #4]
#endif
	PMC->PMC_FSMR = i;
  400a0c:	4a1a      	ldr	r2, [pc, #104]	; (400a78 <pmc_enable_waitmode+0x88>)
  400a0e:	687b      	ldr	r3, [r7, #4]
  400a10:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  400a12:	4919      	ldr	r1, [pc, #100]	; (400a78 <pmc_enable_waitmode+0x88>)
  400a14:	4b18      	ldr	r3, [pc, #96]	; (400a78 <pmc_enable_waitmode+0x88>)
  400a16:	6a1a      	ldr	r2, [r3, #32]
  400a18:	4b18      	ldr	r3, [pc, #96]	; (400a7c <pmc_enable_waitmode+0x8c>)
  400a1a:	4313      	orrs	r3, r2
  400a1c:	620b      	str	r3, [r1, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a1e:	bf00      	nop
  400a20:	4b15      	ldr	r3, [pc, #84]	; (400a78 <pmc_enable_waitmode+0x88>)
  400a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a24:	f003 0308 	and.w	r3, r3, #8
  400a28:	2b00      	cmp	r3, #0
  400a2a:	d0f9      	beq.n	400a20 <pmc_enable_waitmode+0x30>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  400a2c:	2300      	movs	r3, #0
  400a2e:	607b      	str	r3, [r7, #4]
  400a30:	e003      	b.n	400a3a <pmc_enable_waitmode+0x4a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400a32:	bf00      	nop
  400a34:	687b      	ldr	r3, [r7, #4]
  400a36:	3301      	adds	r3, #1
  400a38:	607b      	str	r3, [r7, #4]
  400a3a:	687b      	ldr	r3, [r7, #4]
  400a3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  400a40:	d3f7      	bcc.n	400a32 <pmc_enable_waitmode+0x42>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  400a42:	bf00      	nop
  400a44:	4b0c      	ldr	r3, [pc, #48]	; (400a78 <pmc_enable_waitmode+0x88>)
  400a46:	6a1b      	ldr	r3, [r3, #32]
  400a48:	f003 0308 	and.w	r3, r3, #8
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d0f9      	beq.n	400a44 <pmc_enable_waitmode+0x54>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  400a50:	4b09      	ldr	r3, [pc, #36]	; (400a78 <pmc_enable_waitmode+0x88>)
  400a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a54:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  400a56:	687b      	ldr	r3, [r7, #4]
  400a58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  400a5c:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400a5e:	687b      	ldr	r3, [r7, #4]
  400a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400a64:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  400a66:	4a04      	ldr	r2, [pc, #16]	; (400a78 <pmc_enable_waitmode+0x88>)
  400a68:	687b      	ldr	r3, [r7, #4]
  400a6a:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  400a6c:	bf00      	nop
  400a6e:	370c      	adds	r7, #12
  400a70:	46bd      	mov	sp, r7
  400a72:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a76:	4770      	bx	lr
  400a78:	400e0600 	.word	0x400e0600
  400a7c:	00370004 	.word	0x00370004

00400a80 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  400a80:	b590      	push	{r4, r7, lr}
  400a82:	b099      	sub	sp, #100	; 0x64
  400a84:	af00      	add	r7, sp, #0
  400a86:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  400a88:	687b      	ldr	r3, [r7, #4]
  400a8a:	3b01      	subs	r3, #1
  400a8c:	2b04      	cmp	r3, #4
  400a8e:	f200 81a3 	bhi.w	400dd8 <pmc_sleep+0x358>
  400a92:	a201      	add	r2, pc, #4	; (adr r2, 400a98 <pmc_sleep+0x18>)
  400a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a98:	00400aad 	.word	0x00400aad
  400a9c:	00400aad 	.word	0x00400aad
  400aa0:	00400ac9 	.word	0x00400ac9
  400aa4:	00400ac9 	.word	0x00400ac9
  400aa8:	00400db7 	.word	0x00400db7
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400aac:	4a71      	ldr	r2, [pc, #452]	; (400c74 <pmc_sleep+0x1f4>)
  400aae:	4b71      	ldr	r3, [pc, #452]	; (400c74 <pmc_sleep+0x1f4>)
  400ab0:	691b      	ldr	r3, [r3, #16]
  400ab2:	f023 0304 	bic.w	r3, r3, #4
  400ab6:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400ab8:	4b6f      	ldr	r3, [pc, #444]	; (400c78 <pmc_sleep+0x1f8>)
  400aba:	2201      	movs	r2, #1
  400abc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400abe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400ac2:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  400ac4:	bf30      	wfi
		__WFI();
		break;
  400ac6:	e187      	b.n	400dd8 <pmc_sleep+0x358>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400ac8:	687b      	ldr	r3, [r7, #4]
  400aca:	2b03      	cmp	r3, #3
  400acc:	d103      	bne.n	400ad6 <pmc_sleep+0x56>
  400ace:	2000      	movs	r0, #0
  400ad0:	4b6a      	ldr	r3, [pc, #424]	; (400c7c <pmc_sleep+0x1fc>)
  400ad2:	4798      	blx	r3
  400ad4:	e003      	b.n	400ade <pmc_sleep+0x5e>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400ad6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400ada:	4b68      	ldr	r3, [pc, #416]	; (400c7c <pmc_sleep+0x1fc>)
  400adc:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400ade:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400ae0:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400ae4:	4b64      	ldr	r3, [pc, #400]	; (400c78 <pmc_sleep+0x1f8>)
  400ae6:	2200      	movs	r2, #0
  400ae8:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400aea:	4b65      	ldr	r3, [pc, #404]	; (400c80 <pmc_sleep+0x200>)
  400aec:	2201      	movs	r2, #1
  400aee:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  400af0:	687b      	ldr	r3, [r7, #4]
  400af2:	2b04      	cmp	r3, #4
  400af4:	bf0c      	ite	eq
  400af6:	2301      	moveq	r3, #1
  400af8:	2300      	movne	r3, #0
  400afa:	b2da      	uxtb	r2, r3
  400afc:	f107 031c 	add.w	r3, r7, #28
  400b00:	653b      	str	r3, [r7, #80]	; 0x50
  400b02:	f107 0318 	add.w	r3, r7, #24
  400b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  400b08:	f107 0314 	add.w	r3, r7, #20
  400b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  400b0e:	f107 0310 	add.w	r3, r7, #16
  400b12:	647b      	str	r3, [r7, #68]	; 0x44
  400b14:	f107 030c 	add.w	r3, r7, #12
  400b18:	643b      	str	r3, [r7, #64]	; 0x40
  400b1a:	4613      	mov	r3, r2
  400b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if defined(EFC1)
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
  400b20:	4b58      	ldr	r3, [pc, #352]	; (400c84 <pmc_sleep+0x204>)
  400b22:	6a1b      	ldr	r3, [r3, #32]
  400b24:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  400b26:	4b57      	ldr	r3, [pc, #348]	; (400c84 <pmc_sleep+0x204>)
  400b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b2a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  400b2c:	4b56      	ldr	r3, [pc, #344]	; (400c88 <pmc_sleep+0x208>)
  400b2e:	681b      	ldr	r3, [r3, #0]
  400b30:	623b      	str	r3, [r7, #32]
# if defined(EFC1)
	uint32_t fmr1 = EFC1->EEFC_FMR;
# endif

	if (p_osc_setting) {
  400b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400b34:	2b00      	cmp	r3, #0
  400b36:	d002      	beq.n	400b3e <pmc_sleep+0xbe>
		*p_osc_setting = mor;
  400b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400b3c:	601a      	str	r2, [r3, #0]
	}
	if (p_pll0_setting) {
  400b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  400b40:	2b00      	cmp	r3, #0
  400b42:	d003      	beq.n	400b4c <pmc_sleep+0xcc>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400b44:	4b4f      	ldr	r3, [pc, #316]	; (400c84 <pmc_sleep+0x204>)
  400b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  400b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  400b4a:	601a      	str	r2, [r3, #0]
	}
	if (p_pll1_setting) {
  400b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400b4e:	2b00      	cmp	r3, #0
  400b50:	d002      	beq.n	400b58 <pmc_sleep+0xd8>
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
		*p_pll1_setting = PMC->CKGR_PLLBR;
#elif (SAM3U || SAM3XA)
		*p_pll1_setting = PMC->CKGR_UCKR;
#else
		*p_pll1_setting = 0;
  400b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400b54:	2200      	movs	r2, #0
  400b56:	601a      	str	r2, [r3, #0]
#endif
	}
	if (p_mck_setting) {
  400b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  400b5a:	2b00      	cmp	r3, #0
  400b5c:	d002      	beq.n	400b64 <pmc_sleep+0xe4>
		*p_mck_setting  = mckr;
  400b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  400b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400b62:	601a      	str	r2, [r3, #0]
	}
	if (p_fmr_setting) {
  400b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  400b66:	2b00      	cmp	r3, #0
  400b68:	d002      	beq.n	400b70 <pmc_sleep+0xf0>
		*p_fmr_setting  = fmr;
  400b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  400b6c:	6a3a      	ldr	r2, [r7, #32]
  400b6e:	601a      	str	r2, [r3, #0]
		*p_fmr_setting1 = fmr1;
	}
#endif

	/* Enable FAST RC */
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400b70:	4944      	ldr	r1, [pc, #272]	; (400c84 <pmc_sleep+0x204>)
  400b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400b74:	4b45      	ldr	r3, [pc, #276]	; (400c8c <pmc_sleep+0x20c>)
  400b76:	4313      	orrs	r3, r2
  400b78:	620b      	str	r3, [r1, #32]
	/* if MCK source is PLL, switch to mainck */
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b7c:	f003 0303 	and.w	r3, r3, #3
  400b80:	2b01      	cmp	r3, #1
  400b82:	d90e      	bls.n	400ba2 <pmc_sleep+0x122>
		/* MCK -> MAINCK */
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b86:	f023 0303 	bic.w	r3, r3, #3
  400b8a:	f043 0301 	orr.w	r3, r3, #1
  400b8e:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  400b90:	4a3c      	ldr	r2, [pc, #240]	; (400c84 <pmc_sleep+0x204>)
  400b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b94:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b96:	4b3b      	ldr	r3, [pc, #236]	; (400c84 <pmc_sleep+0x204>)
  400b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b9a:	f003 0308 	and.w	r3, r3, #8
  400b9e:	2b00      	cmp	r3, #0
  400ba0:	d0f9      	beq.n	400b96 <pmc_sleep+0x116>
	}
	/* MCK prescale -> 1 */
	if (mckr & PMC_MCKR_PRES_Msk) {
  400ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ba8:	2b00      	cmp	r3, #0
  400baa:	d00c      	beq.n	400bc6 <pmc_sleep+0x146>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400bb2:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  400bb4:	4a33      	ldr	r2, [pc, #204]	; (400c84 <pmc_sleep+0x204>)
  400bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400bb8:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400bba:	4b32      	ldr	r3, [pc, #200]	; (400c84 <pmc_sleep+0x204>)
  400bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bbe:	f003 0308 	and.w	r3, r3, #8
  400bc2:	2b00      	cmp	r3, #0
  400bc4:	d0f9      	beq.n	400bba <pmc_sleep+0x13a>
	}
	/* Disable PLLs */
	pmc_disable_pllack();
  400bc6:	4b32      	ldr	r3, [pc, #200]	; (400c90 <pmc_sleep+0x210>)
  400bc8:	4798      	blx	r3
	pmc_disable_upll_clock();
#endif

	/* Prepare for entering WAIT mode */
	/* Wait fast RC ready */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400bca:	4b2e      	ldr	r3, [pc, #184]	; (400c84 <pmc_sleep+0x204>)
  400bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400bd2:	2b00      	cmp	r3, #0
  400bd4:	d0f9      	beq.n	400bca <pmc_sleep+0x14a>
	EFC0->EEFC_FMR = (fmr & (~EEFC_FMR_FWS_Msk)) | EEFC_FMR_FWS(1);

	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | CKGR_MOR_MOSCRCF_24_MHz |
			CKGR_MOR_KEY_PASSWD;
#else
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400bd6:	492b      	ldr	r1, [pc, #172]	; (400c84 <pmc_sleep+0x204>)
  400bd8:	4b2a      	ldr	r3, [pc, #168]	; (400c84 <pmc_sleep+0x204>)
  400bda:	6a1a      	ldr	r2, [r3, #32]
  400bdc:	4b2d      	ldr	r3, [pc, #180]	; (400c94 <pmc_sleep+0x214>)
  400bde:	4013      	ands	r3, r2
  400be0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400be4:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
#endif
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400be6:	4b27      	ldr	r3, [pc, #156]	; (400c84 <pmc_sleep+0x204>)
  400be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400bee:	2b00      	cmp	r3, #0
  400bf0:	d0f9      	beq.n	400be6 <pmc_sleep+0x166>

#if (!SAMG)
	/* FWS update */
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  400bf2:	4a25      	ldr	r2, [pc, #148]	; (400c88 <pmc_sleep+0x208>)
  400bf4:	6a3b      	ldr	r3, [r7, #32]
  400bf6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  400bfa:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
#endif
#endif

	/* Disable XTALs */
	if (disable_xtal) {
  400bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  400c00:	2b00      	cmp	r3, #0
  400c02:	d007      	beq.n	400c14 <pmc_sleep+0x194>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c04:	491f      	ldr	r1, [pc, #124]	; (400c84 <pmc_sleep+0x204>)
  400c06:	4b1f      	ldr	r3, [pc, #124]	; (400c84 <pmc_sleep+0x204>)
  400c08:	6a1a      	ldr	r2, [r3, #32]
  400c0a:	4b23      	ldr	r3, [pc, #140]	; (400c98 <pmc_sleep+0x218>)
  400c0c:	4013      	ands	r3, r2
  400c0e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400c12:	620b      	str	r3, [r1, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  400c14:	4b18      	ldr	r3, [pc, #96]	; (400c78 <pmc_sleep+0x1f8>)
  400c16:	2201      	movs	r2, #1
  400c18:	701a      	strb	r2, [r3, #0]
  400c1a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400c1e:	b662      	cpsie	i

		pmc_enable_waitmode();
  400c20:	4b1e      	ldr	r3, [pc, #120]	; (400c9c <pmc_sleep+0x21c>)
  400c22:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400c24:	b672      	cpsid	i
  400c26:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  400c2a:	4b13      	ldr	r3, [pc, #76]	; (400c78 <pmc_sleep+0x1f8>)
  400c2c:	2200      	movs	r2, #0
  400c2e:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  400c30:	69fc      	ldr	r4, [r7, #28]
  400c32:	69b8      	ldr	r0, [r7, #24]
  400c34:	6979      	ldr	r1, [r7, #20]
  400c36:	693a      	ldr	r2, [r7, #16]
  400c38:	68fb      	ldr	r3, [r7, #12]
  400c3a:	65fc      	str	r4, [r7, #92]	; 0x5c
  400c3c:	65b8      	str	r0, [r7, #88]	; 0x58
  400c3e:	6579      	str	r1, [r7, #84]	; 0x54
  400c40:	63fa      	str	r2, [r7, #60]	; 0x3c
  400c42:	63bb      	str	r3, [r7, #56]	; 0x38
		, const uint32_t fmr_setting1
#endif
		)
{
	uint32_t mckr;
	uint32_t pll_sr = 0;
  400c44:	2300      	movs	r3, #0
  400c46:	637b      	str	r3, [r7, #52]	; 0x34

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  400c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  400c4a:	f003 0302 	and.w	r3, r3, #2
  400c4e:	2b00      	cmp	r3, #0
  400c50:	d02c      	beq.n	400cac <pmc_sleep+0x22c>
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c52:	490c      	ldr	r1, [pc, #48]	; (400c84 <pmc_sleep+0x204>)
  400c54:	4b0b      	ldr	r3, [pc, #44]	; (400c84 <pmc_sleep+0x204>)
  400c56:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400c58:	4a11      	ldr	r2, [pc, #68]	; (400ca0 <pmc_sleep+0x220>)
  400c5a:	401a      	ands	r2, r3
  400c5c:	4b11      	ldr	r3, [pc, #68]	; (400ca4 <pmc_sleep+0x224>)
  400c5e:	4313      	orrs	r3, r2
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c60:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400c62:	4908      	ldr	r1, [pc, #32]	; (400c84 <pmc_sleep+0x204>)
  400c64:	4b07      	ldr	r3, [pc, #28]	; (400c84 <pmc_sleep+0x204>)
  400c66:	6a1a      	ldr	r2, [r3, #32]
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
  400c68:	4b0f      	ldr	r3, [pc, #60]	; (400ca8 <pmc_sleep+0x228>)
  400c6a:	4013      	ands	r3, r2
  400c6c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400c70:	620b      	str	r3, [r1, #32]
  400c72:	e04e      	b.n	400d12 <pmc_sleep+0x292>
  400c74:	e000ed00 	.word	0xe000ed00
  400c78:	20400000 	.word	0x20400000
  400c7c:	004009d1 	.word	0x004009d1
  400c80:	204008d8 	.word	0x204008d8
  400c84:	400e0600 	.word	0x400e0600
  400c88:	400e0c00 	.word	0x400e0c00
  400c8c:	00370008 	.word	0x00370008
  400c90:	00400905 	.word	0x00400905
  400c94:	fec8ffff 	.word	0xfec8ffff
  400c98:	ffc8fffe 	.word	0xffc8fffe
  400c9c:	004009f1 	.word	0x004009f1
  400ca0:	fec8fffc 	.word	0xfec8fffc
  400ca4:	01370002 	.word	0x01370002
  400ca8:	ffc8ff87 	.word	0xffc8ff87
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  400cae:	f003 0301 	and.w	r3, r3, #1
  400cb2:	2b00      	cmp	r3, #0
  400cb4:	d02d      	beq.n	400d12 <pmc_sleep+0x292>
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400cb6:	4b4a      	ldr	r3, [pc, #296]	; (400de0 <pmc_sleep+0x360>)
  400cb8:	6a1b      	ldr	r3, [r3, #32]
  400cba:	f003 0301 	and.w	r3, r3, #1
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d10d      	bne.n	400cde <pmc_sleep+0x25e>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400cc2:	4947      	ldr	r1, [pc, #284]	; (400de0 <pmc_sleep+0x360>)
  400cc4:	4b46      	ldr	r3, [pc, #280]	; (400de0 <pmc_sleep+0x360>)
  400cc6:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400cc8:	4a46      	ldr	r2, [pc, #280]	; (400de4 <pmc_sleep+0x364>)
  400cca:	401a      	ands	r2, r3
  400ccc:	4b46      	ldr	r3, [pc, #280]	; (400de8 <pmc_sleep+0x368>)
  400cce:	4313      	orrs	r3, r2
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400cd0:	620b      	str	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
			/* Wait the Xtal to stabilize */
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400cd2:	4b43      	ldr	r3, [pc, #268]	; (400de0 <pmc_sleep+0x360>)
  400cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cd6:	f003 0301 	and.w	r3, r3, #1
  400cda:	2b00      	cmp	r3, #0
  400cdc:	d0f9      	beq.n	400cd2 <pmc_sleep+0x252>
		}
		/* Select External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400cde:	4b40      	ldr	r3, [pc, #256]	; (400de0 <pmc_sleep+0x360>)
  400ce0:	6a1b      	ldr	r3, [r3, #32]
  400ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400ce6:	2b00      	cmp	r3, #0
  400ce8:	d10b      	bne.n	400d02 <pmc_sleep+0x282>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400cea:	493d      	ldr	r1, [pc, #244]	; (400de0 <pmc_sleep+0x360>)
  400cec:	4b3c      	ldr	r3, [pc, #240]	; (400de0 <pmc_sleep+0x360>)
  400cee:	6a1a      	ldr	r2, [r3, #32]
  400cf0:	4b3e      	ldr	r3, [pc, #248]	; (400dec <pmc_sleep+0x36c>)
  400cf2:	4313      	orrs	r3, r2
  400cf4:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400cf6:	4b3a      	ldr	r3, [pc, #232]	; (400de0 <pmc_sleep+0x360>)
  400cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400cfe:	2b00      	cmp	r3, #0
  400d00:	d0f9      	beq.n	400cf6 <pmc_sleep+0x276>
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400d02:	4937      	ldr	r1, [pc, #220]	; (400de0 <pmc_sleep+0x360>)
  400d04:	4b36      	ldr	r3, [pc, #216]	; (400de0 <pmc_sleep+0x360>)
  400d06:	6a1a      	ldr	r2, [r3, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
  400d08:	4b39      	ldr	r3, [pc, #228]	; (400df0 <pmc_sleep+0x370>)
  400d0a:	4013      	ands	r3, r2
  400d0c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400d10:	620b      	str	r3, [r1, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
	}

	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  400d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
  400d14:	4b37      	ldr	r3, [pc, #220]	; (400df4 <pmc_sleep+0x374>)
  400d16:	4013      	ands	r3, r2
  400d18:	2b00      	cmp	r3, #0
  400d1a:	d008      	beq.n	400d2e <pmc_sleep+0x2ae>
#if (SAM4C || SAM4CM || SAMG || SAM4CP)
		PMC->CKGR_PLLAR = pll0_setting;
#else
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  400d1c:	4a30      	ldr	r2, [pc, #192]	; (400de0 <pmc_sleep+0x360>)
  400d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  400d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400d24:	6293      	str	r3, [r2, #40]	; 0x28
#endif
		pll_sr |= PMC_SR_LOCKA;
  400d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400d28:	f043 0302 	orr.w	r3, r3, #2
  400d2c:	637b      	str	r3, [r7, #52]	; 0x34
	}
#else
	UNUSED(pll1_setting);
#endif
	/* Wait MCK source ready */
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400d30:	f003 0303 	and.w	r3, r3, #3
  400d34:	2b02      	cmp	r3, #2
  400d36:	d105      	bne.n	400d44 <pmc_sleep+0x2c4>
	case PMC_MCKR_CSS_PLLA_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400d38:	4b29      	ldr	r3, [pc, #164]	; (400de0 <pmc_sleep+0x360>)
  400d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d3c:	f003 0302 	and.w	r3, r3, #2
  400d40:	2b00      	cmp	r3, #0
  400d42:	d0f9      	beq.n	400d38 <pmc_sleep+0x2b8>
		break;
#endif
	}

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;
  400d44:	4b26      	ldr	r3, [pc, #152]	; (400de0 <pmc_sleep+0x360>)
  400d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d48:	633b      	str	r3, [r7, #48]	; 0x30

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400d4a:	4925      	ldr	r1, [pc, #148]	; (400de0 <pmc_sleep+0x360>)
  400d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400d54:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d58:	4313      	orrs	r3, r2

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400d5a:	630b      	str	r3, [r1, #48]	; 0x30
		| (mck_setting & PMC_MCKR_PRES_Msk);
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d5c:	4b20      	ldr	r3, [pc, #128]	; (400de0 <pmc_sleep+0x360>)
  400d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d60:	f003 0308 	and.w	r3, r3, #8
  400d64:	2b00      	cmp	r3, #0
  400d66:	d0f9      	beq.n	400d5c <pmc_sleep+0x2dc>

	/* Restore flash wait states */
	EFC0->EEFC_FMR = fmr_setting;
  400d68:	4a23      	ldr	r2, [pc, #140]	; (400df8 <pmc_sleep+0x378>)
  400d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400d6c:	6013      	str	r3, [r2, #0]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr_setting1;
#endif

	/* Set CSS and others */
	PMC->PMC_MCKR = mck_setting;
  400d6e:	4a1c      	ldr	r2, [pc, #112]	; (400de0 <pmc_sleep+0x360>)
  400d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400d72:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d74:	4b1a      	ldr	r3, [pc, #104]	; (400de0 <pmc_sleep+0x360>)
  400d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d78:	f003 0308 	and.w	r3, r3, #8
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d0f9      	beq.n	400d74 <pmc_sleep+0x2f4>

	/* Waiting all restored PLLs ready */
	while (!(PMC->PMC_SR & pll_sr));
  400d80:	4b17      	ldr	r3, [pc, #92]	; (400de0 <pmc_sleep+0x360>)
  400d82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400d86:	4013      	ands	r3, r2
  400d88:	2b00      	cmp	r3, #0
  400d8a:	d0f9      	beq.n	400d80 <pmc_sleep+0x300>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400d8c:	4b1b      	ldr	r3, [pc, #108]	; (400dfc <pmc_sleep+0x37c>)
  400d8e:	2200      	movs	r2, #0
  400d90:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400d92:	4b1b      	ldr	r3, [pc, #108]	; (400e00 <pmc_sleep+0x380>)
  400d94:	681b      	ldr	r3, [r3, #0]
  400d96:	2b00      	cmp	r3, #0
  400d98:	d005      	beq.n	400da6 <pmc_sleep+0x326>
			callback_clocks_restored();
  400d9a:	4b19      	ldr	r3, [pc, #100]	; (400e00 <pmc_sleep+0x380>)
  400d9c:	681b      	ldr	r3, [r3, #0]
  400d9e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400da0:	4b17      	ldr	r3, [pc, #92]	; (400e00 <pmc_sleep+0x380>)
  400da2:	2200      	movs	r2, #0
  400da4:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400da6:	4b17      	ldr	r3, [pc, #92]	; (400e04 <pmc_sleep+0x384>)
  400da8:	2201      	movs	r2, #1
  400daa:	701a      	strb	r2, [r3, #0]
  400dac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400db0:	b662      	cpsie	i

		break;
  400db2:	bf00      	nop
  400db4:	e010      	b.n	400dd8 <pmc_sleep+0x358>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  400db6:	4a14      	ldr	r2, [pc, #80]	; (400e08 <pmc_sleep+0x388>)
  400db8:	4b13      	ldr	r3, [pc, #76]	; (400e08 <pmc_sleep+0x388>)
  400dba:	691b      	ldr	r3, [r3, #16]
  400dbc:	f043 0304 	orr.w	r3, r3, #4
  400dc0:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  400dc2:	4b12      	ldr	r3, [pc, #72]	; (400e0c <pmc_sleep+0x38c>)
  400dc4:	4a12      	ldr	r2, [pc, #72]	; (400e10 <pmc_sleep+0x390>)
  400dc6:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  400dc8:	4b0e      	ldr	r3, [pc, #56]	; (400e04 <pmc_sleep+0x384>)
  400dca:	2201      	movs	r2, #1
  400dcc:	701a      	strb	r2, [r3, #0]
  400dce:	f3bf 8f5f 	dmb	sy
  400dd2:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  400dd4:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  400dd6:	bf00      	nop
#endif
	}
}
  400dd8:	bf00      	nop
  400dda:	3764      	adds	r7, #100	; 0x64
  400ddc:	46bd      	mov	sp, r7
  400dde:	bd90      	pop	{r4, r7, pc}
  400de0:	400e0600 	.word	0x400e0600
  400de4:	ffc8fffc 	.word	0xffc8fffc
  400de8:	00370001 	.word	0x00370001
  400dec:	01370000 	.word	0x01370000
  400df0:	ffc8ff87 	.word	0xffc8ff87
  400df4:	07ff0000 	.word	0x07ff0000
  400df8:	400e0c00 	.word	0x400e0c00
  400dfc:	204008d8 	.word	0x204008d8
  400e00:	204008dc 	.word	0x204008dc
  400e04:	20400000 	.word	0x20400000
  400e08:	e000ed00 	.word	0xe000ed00
  400e0c:	400e1810 	.word	0x400e1810
  400e10:	a5000004 	.word	0xa5000004

00400e14 <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  400e14:	b480      	push	{r7}
  400e16:	b083      	sub	sp, #12
  400e18:	af00      	add	r7, sp, #0
  400e1a:	6078      	str	r0, [r7, #4]
  400e1c:	460b      	mov	r3, r1
  400e1e:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400e20:	887a      	ldrh	r2, [r7, #2]
  400e22:	4b07      	ldr	r3, [pc, #28]	; (400e40 <rtt_init+0x2c>)
  400e24:	681b      	ldr	r3, [r3, #0]
  400e26:	4313      	orrs	r3, r2
  400e28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  400e2c:	687b      	ldr	r3, [r7, #4]
  400e2e:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  400e30:	2300      	movs	r3, #0
}
  400e32:	4618      	mov	r0, r3
  400e34:	370c      	adds	r7, #12
  400e36:	46bd      	mov	sp, r7
  400e38:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e3c:	4770      	bx	lr
  400e3e:	bf00      	nop
  400e40:	204008e0 	.word	0x204008e0

00400e44 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  400e44:	b480      	push	{r7}
  400e46:	b085      	sub	sp, #20
  400e48:	af00      	add	r7, sp, #0
  400e4a:	6078      	str	r0, [r7, #4]
  400e4c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400e4e:	687b      	ldr	r3, [r7, #4]
  400e50:	681b      	ldr	r3, [r3, #0]
  400e52:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  400e54:	68fa      	ldr	r2, [r7, #12]
  400e56:	683b      	ldr	r3, [r7, #0]
  400e58:	4313      	orrs	r3, r2
  400e5a:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400e5c:	4b06      	ldr	r3, [pc, #24]	; (400e78 <rtt_enable_interrupt+0x34>)
  400e5e:	681b      	ldr	r3, [r3, #0]
  400e60:	68fa      	ldr	r2, [r7, #12]
  400e62:	4313      	orrs	r3, r2
  400e64:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400e66:	687b      	ldr	r3, [r7, #4]
  400e68:	68fa      	ldr	r2, [r7, #12]
  400e6a:	601a      	str	r2, [r3, #0]
}
  400e6c:	bf00      	nop
  400e6e:	3714      	adds	r7, #20
  400e70:	46bd      	mov	sp, r7
  400e72:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e76:	4770      	bx	lr
  400e78:	204008e0 	.word	0x204008e0

00400e7c <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  400e7c:	b480      	push	{r7}
  400e7e:	b085      	sub	sp, #20
  400e80:	af00      	add	r7, sp, #0
  400e82:	6078      	str	r0, [r7, #4]
  400e84:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  400e86:	2300      	movs	r3, #0
  400e88:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  400e8a:	687b      	ldr	r3, [r7, #4]
  400e8c:	681b      	ldr	r3, [r3, #0]
  400e8e:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  400e90:	683b      	ldr	r3, [r7, #0]
  400e92:	43db      	mvns	r3, r3
  400e94:	68fa      	ldr	r2, [r7, #12]
  400e96:	4013      	ands	r3, r2
  400e98:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400e9a:	4b07      	ldr	r3, [pc, #28]	; (400eb8 <rtt_disable_interrupt+0x3c>)
  400e9c:	681b      	ldr	r3, [r3, #0]
  400e9e:	68fa      	ldr	r2, [r7, #12]
  400ea0:	4313      	orrs	r3, r2
  400ea2:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400ea4:	687b      	ldr	r3, [r7, #4]
  400ea6:	68fa      	ldr	r2, [r7, #12]
  400ea8:	601a      	str	r2, [r3, #0]
}
  400eaa:	bf00      	nop
  400eac:	3714      	adds	r7, #20
  400eae:	46bd      	mov	sp, r7
  400eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eb4:	4770      	bx	lr
  400eb6:	bf00      	nop
  400eb8:	204008e0 	.word	0x204008e0

00400ebc <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  400ebc:	b480      	push	{r7}
  400ebe:	b085      	sub	sp, #20
  400ec0:	af00      	add	r7, sp, #0
  400ec2:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  400ec4:	687b      	ldr	r3, [r7, #4]
  400ec6:	689b      	ldr	r3, [r3, #8]
  400ec8:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  400eca:	e002      	b.n	400ed2 <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  400ecc:	687b      	ldr	r3, [r7, #4]
  400ece:	689b      	ldr	r3, [r3, #8]
  400ed0:	60fb      	str	r3, [r7, #12]
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;

	while (rtt_val != p_rtt->RTT_VR) {
  400ed2:	687b      	ldr	r3, [r7, #4]
  400ed4:	689a      	ldr	r2, [r3, #8]
  400ed6:	68fb      	ldr	r3, [r7, #12]
  400ed8:	429a      	cmp	r2, r3
  400eda:	d1f7      	bne.n	400ecc <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
	}

	return rtt_val;
  400edc:	68fb      	ldr	r3, [r7, #12]
}
  400ede:	4618      	mov	r0, r3
  400ee0:	3714      	adds	r7, #20
  400ee2:	46bd      	mov	sp, r7
  400ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee8:	4770      	bx	lr
  400eea:	bf00      	nop

00400eec <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  400eec:	b480      	push	{r7}
  400eee:	b083      	sub	sp, #12
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  400ef4:	687b      	ldr	r3, [r7, #4]
  400ef6:	68db      	ldr	r3, [r3, #12]
}
  400ef8:	4618      	mov	r0, r3
  400efa:	370c      	adds	r7, #12
  400efc:	46bd      	mov	sp, r7
  400efe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f02:	4770      	bx	lr

00400f04 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400f04:	b580      	push	{r7, lr}
  400f06:	b084      	sub	sp, #16
  400f08:	af00      	add	r7, sp, #0
  400f0a:	6078      	str	r0, [r7, #4]
  400f0c:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400f0e:	687b      	ldr	r3, [r7, #4]
  400f10:	681b      	ldr	r3, [r3, #0]
  400f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400f16:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400f18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400f1c:	480d      	ldr	r0, [pc, #52]	; (400f54 <rtt_write_alarm_time+0x50>)
  400f1e:	4b0e      	ldr	r3, [pc, #56]	; (400f58 <rtt_write_alarm_time+0x54>)
  400f20:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400f22:	683b      	ldr	r3, [r7, #0]
  400f24:	2b00      	cmp	r3, #0
  400f26:	d104      	bne.n	400f32 <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400f28:	687b      	ldr	r3, [r7, #4]
  400f2a:	f04f 32ff 	mov.w	r2, #4294967295
  400f2e:	605a      	str	r2, [r3, #4]
  400f30:	e003      	b.n	400f3a <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400f32:	683b      	ldr	r3, [r7, #0]
  400f34:	1e5a      	subs	r2, r3, #1
  400f36:	687b      	ldr	r3, [r7, #4]
  400f38:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  400f3a:	68fb      	ldr	r3, [r7, #12]
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	d004      	beq.n	400f4a <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400f40:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400f44:	4803      	ldr	r0, [pc, #12]	; (400f54 <rtt_write_alarm_time+0x50>)
  400f46:	4b05      	ldr	r3, [pc, #20]	; (400f5c <rtt_write_alarm_time+0x58>)
  400f48:	4798      	blx	r3
	}

	return 0;
  400f4a:	2300      	movs	r3, #0
}
  400f4c:	4618      	mov	r0, r3
  400f4e:	3710      	adds	r7, #16
  400f50:	46bd      	mov	sp, r7
  400f52:	bd80      	pop	{r7, pc}
  400f54:	400e1830 	.word	0x400e1830
  400f58:	00400e7d 	.word	0x00400e7d
  400f5c:	00400e45 	.word	0x00400e45

00400f60 <supc_set_wakeup_mode>:
 *
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_mode Bitmask of wake up mode (please refer to datasheet for more details).
 */
void supc_set_wakeup_mode(Supc *p_supc, uint32_t ul_mode)
{
  400f60:	b480      	push	{r7}
  400f62:	b083      	sub	sp, #12
  400f64:	af00      	add	r7, sp, #0
  400f66:	6078      	str	r0, [r7, #4]
  400f68:	6039      	str	r1, [r7, #0]
	p_supc->SUPC_WUMR = ul_mode;
  400f6a:	687b      	ldr	r3, [r7, #4]
  400f6c:	683a      	ldr	r2, [r7, #0]
  400f6e:	60da      	str	r2, [r3, #12]
}
  400f70:	bf00      	nop
  400f72:	370c      	adds	r7, #12
  400f74:	46bd      	mov	sp, r7
  400f76:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f7a:	4770      	bx	lr

00400f7c <supc_backup_sram_off>:
 *
 * \param p_supc Pointer to a SUPC instance.
 *
 */
void supc_backup_sram_off(Supc *p_supc)
{
  400f7c:	b480      	push	{r7}
  400f7e:	b083      	sub	sp, #12
  400f80:	af00      	add	r7, sp, #0
  400f82:	6078      	str	r0, [r7, #4]
	p_supc->SUPC_MR &= (~(SUPC_MR_KEY_PASSWD | SUPC_MR_BKUPRETON));	
  400f84:	687b      	ldr	r3, [r7, #4]
  400f86:	689a      	ldr	r2, [r3, #8]
  400f88:	4b04      	ldr	r3, [pc, #16]	; (400f9c <supc_backup_sram_off+0x20>)
  400f8a:	4013      	ands	r3, r2
  400f8c:	687a      	ldr	r2, [r7, #4]
  400f8e:	6093      	str	r3, [r2, #8]
}
  400f90:	bf00      	nop
  400f92:	370c      	adds	r7, #12
  400f94:	46bd      	mov	sp, r7
  400f96:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f9a:	4770      	bx	lr
  400f9c:	5afdffff 	.word	0x5afdffff

00400fa0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400fa0:	b480      	push	{r7}
  400fa2:	b085      	sub	sp, #20
  400fa4:	af00      	add	r7, sp, #0
  400fa6:	6078      	str	r0, [r7, #4]
  400fa8:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  400faa:	2300      	movs	r3, #0
  400fac:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400fae:	687b      	ldr	r3, [r7, #4]
  400fb0:	22ac      	movs	r2, #172	; 0xac
  400fb2:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400fb4:	683b      	ldr	r3, [r7, #0]
  400fb6:	681a      	ldr	r2, [r3, #0]
  400fb8:	683b      	ldr	r3, [r7, #0]
  400fba:	685b      	ldr	r3, [r3, #4]
  400fbc:	fbb2 f3f3 	udiv	r3, r2, r3
  400fc0:	091b      	lsrs	r3, r3, #4
  400fc2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400fc4:	68fb      	ldr	r3, [r7, #12]
  400fc6:	2b00      	cmp	r3, #0
  400fc8:	d003      	beq.n	400fd2 <uart_init+0x32>
  400fca:	68fb      	ldr	r3, [r7, #12]
  400fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400fd0:	d301      	bcc.n	400fd6 <uart_init+0x36>
		return 1;
  400fd2:	2301      	movs	r3, #1
  400fd4:	e00a      	b.n	400fec <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  400fd6:	687b      	ldr	r3, [r7, #4]
  400fd8:	68fa      	ldr	r2, [r7, #12]
  400fda:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400fdc:	683b      	ldr	r3, [r7, #0]
  400fde:	689a      	ldr	r2, [r3, #8]
  400fe0:	687b      	ldr	r3, [r7, #4]
  400fe2:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400fe4:	687b      	ldr	r3, [r7, #4]
  400fe6:	2250      	movs	r2, #80	; 0x50
  400fe8:	601a      	str	r2, [r3, #0]

	return 0;
  400fea:	2300      	movs	r3, #0
}
  400fec:	4618      	mov	r0, r3
  400fee:	3714      	adds	r7, #20
  400ff0:	46bd      	mov	sp, r7
  400ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ff6:	4770      	bx	lr

00400ff8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400ff8:	b480      	push	{r7}
  400ffa:	b083      	sub	sp, #12
  400ffc:	af00      	add	r7, sp, #0
  400ffe:	6078      	str	r0, [r7, #4]
  401000:	460b      	mov	r3, r1
  401002:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401004:	687b      	ldr	r3, [r7, #4]
  401006:	695b      	ldr	r3, [r3, #20]
  401008:	f003 0302 	and.w	r3, r3, #2
  40100c:	2b00      	cmp	r3, #0
  40100e:	d101      	bne.n	401014 <uart_write+0x1c>
		return 1;
  401010:	2301      	movs	r3, #1
  401012:	e003      	b.n	40101c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401014:	78fa      	ldrb	r2, [r7, #3]
  401016:	687b      	ldr	r3, [r7, #4]
  401018:	61da      	str	r2, [r3, #28]
	return 0;
  40101a:	2300      	movs	r3, #0
}
  40101c:	4618      	mov	r0, r3
  40101e:	370c      	adds	r7, #12
  401020:	46bd      	mov	sp, r7
  401022:	f85d 7b04 	ldr.w	r7, [sp], #4
  401026:	4770      	bx	lr

00401028 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401028:	b480      	push	{r7}
  40102a:	b083      	sub	sp, #12
  40102c:	af00      	add	r7, sp, #0
  40102e:	6078      	str	r0, [r7, #4]
  401030:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401032:	687b      	ldr	r3, [r7, #4]
  401034:	695b      	ldr	r3, [r3, #20]
  401036:	f003 0301 	and.w	r3, r3, #1
  40103a:	2b00      	cmp	r3, #0
  40103c:	d101      	bne.n	401042 <uart_read+0x1a>
		return 1;
  40103e:	2301      	movs	r3, #1
  401040:	e005      	b.n	40104e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401042:	687b      	ldr	r3, [r7, #4]
  401044:	699b      	ldr	r3, [r3, #24]
  401046:	b2da      	uxtb	r2, r3
  401048:	683b      	ldr	r3, [r7, #0]
  40104a:	701a      	strb	r2, [r3, #0]
	return 0;
  40104c:	2300      	movs	r3, #0
}
  40104e:	4618      	mov	r0, r3
  401050:	370c      	adds	r7, #12
  401052:	46bd      	mov	sp, r7
  401054:	f85d 7b04 	ldr.w	r7, [sp], #4
  401058:	4770      	bx	lr
  40105a:	bf00      	nop

0040105c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40105c:	b480      	push	{r7}
  40105e:	b089      	sub	sp, #36	; 0x24
  401060:	af00      	add	r7, sp, #0
  401062:	60f8      	str	r0, [r7, #12]
  401064:	60b9      	str	r1, [r7, #8]
  401066:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401068:	68bb      	ldr	r3, [r7, #8]
  40106a:	011a      	lsls	r2, r3, #4
  40106c:	687b      	ldr	r3, [r7, #4]
  40106e:	429a      	cmp	r2, r3
  401070:	d802      	bhi.n	401078 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401072:	2310      	movs	r3, #16
  401074:	61fb      	str	r3, [r7, #28]
  401076:	e001      	b.n	40107c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401078:	2308      	movs	r3, #8
  40107a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40107c:	687b      	ldr	r3, [r7, #4]
  40107e:	00da      	lsls	r2, r3, #3
  401080:	69fb      	ldr	r3, [r7, #28]
  401082:	68b9      	ldr	r1, [r7, #8]
  401084:	fb01 f303 	mul.w	r3, r1, r3
  401088:	085b      	lsrs	r3, r3, #1
  40108a:	441a      	add	r2, r3
  40108c:	69fb      	ldr	r3, [r7, #28]
  40108e:	68b9      	ldr	r1, [r7, #8]
  401090:	fb01 f303 	mul.w	r3, r1, r3
  401094:	fbb2 f3f3 	udiv	r3, r2, r3
  401098:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40109a:	69bb      	ldr	r3, [r7, #24]
  40109c:	08db      	lsrs	r3, r3, #3
  40109e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4010a0:	69bb      	ldr	r3, [r7, #24]
  4010a2:	f003 0307 	and.w	r3, r3, #7
  4010a6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4010a8:	697b      	ldr	r3, [r7, #20]
  4010aa:	2b00      	cmp	r3, #0
  4010ac:	d003      	beq.n	4010b6 <usart_set_async_baudrate+0x5a>
  4010ae:	697b      	ldr	r3, [r7, #20]
  4010b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4010b4:	d301      	bcc.n	4010ba <usart_set_async_baudrate+0x5e>
		return 1;
  4010b6:	2301      	movs	r3, #1
  4010b8:	e00f      	b.n	4010da <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4010ba:	69fb      	ldr	r3, [r7, #28]
  4010bc:	2b08      	cmp	r3, #8
  4010be:	d105      	bne.n	4010cc <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4010c0:	68fb      	ldr	r3, [r7, #12]
  4010c2:	685b      	ldr	r3, [r3, #4]
  4010c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4010c8:	68fb      	ldr	r3, [r7, #12]
  4010ca:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4010cc:	693b      	ldr	r3, [r7, #16]
  4010ce:	041a      	lsls	r2, r3, #16
  4010d0:	697b      	ldr	r3, [r7, #20]
  4010d2:	431a      	orrs	r2, r3
  4010d4:	68fb      	ldr	r3, [r7, #12]
  4010d6:	621a      	str	r2, [r3, #32]

	return 0;
  4010d8:	2300      	movs	r3, #0
}
  4010da:	4618      	mov	r0, r3
  4010dc:	3724      	adds	r7, #36	; 0x24
  4010de:	46bd      	mov	sp, r7
  4010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010e4:	4770      	bx	lr
  4010e6:	bf00      	nop

004010e8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4010e8:	b580      	push	{r7, lr}
  4010ea:	b082      	sub	sp, #8
  4010ec:	af00      	add	r7, sp, #0
  4010ee:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4010f0:	6878      	ldr	r0, [r7, #4]
  4010f2:	4b0d      	ldr	r3, [pc, #52]	; (401128 <usart_reset+0x40>)
  4010f4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4010f6:	687b      	ldr	r3, [r7, #4]
  4010f8:	2200      	movs	r2, #0
  4010fa:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4010fc:	687b      	ldr	r3, [r7, #4]
  4010fe:	2200      	movs	r2, #0
  401100:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401102:	687b      	ldr	r3, [r7, #4]
  401104:	2200      	movs	r2, #0
  401106:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401108:	6878      	ldr	r0, [r7, #4]
  40110a:	4b08      	ldr	r3, [pc, #32]	; (40112c <usart_reset+0x44>)
  40110c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40110e:	6878      	ldr	r0, [r7, #4]
  401110:	4b07      	ldr	r3, [pc, #28]	; (401130 <usart_reset+0x48>)
  401112:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401114:	6878      	ldr	r0, [r7, #4]
  401116:	4b07      	ldr	r3, [pc, #28]	; (401134 <usart_reset+0x4c>)
  401118:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40111a:	6878      	ldr	r0, [r7, #4]
  40111c:	4b06      	ldr	r3, [pc, #24]	; (401138 <usart_reset+0x50>)
  40111e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401120:	bf00      	nop
  401122:	3708      	adds	r7, #8
  401124:	46bd      	mov	sp, r7
  401126:	bd80      	pop	{r7, pc}
  401128:	004012d1 	.word	0x004012d1
  40112c:	004011dd 	.word	0x004011dd
  401130:	00401215 	.word	0x00401215
  401134:	00401231 	.word	0x00401231
  401138:	0040124d 	.word	0x0040124d

0040113c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40113c:	b580      	push	{r7, lr}
  40113e:	b084      	sub	sp, #16
  401140:	af00      	add	r7, sp, #0
  401142:	60f8      	str	r0, [r7, #12]
  401144:	60b9      	str	r1, [r7, #8]
  401146:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401148:	68f8      	ldr	r0, [r7, #12]
  40114a:	4b1a      	ldr	r3, [pc, #104]	; (4011b4 <usart_init_rs232+0x78>)
  40114c:	4798      	blx	r3

	ul_reg_val = 0;
  40114e:	4b1a      	ldr	r3, [pc, #104]	; (4011b8 <usart_init_rs232+0x7c>)
  401150:	2200      	movs	r2, #0
  401152:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401154:	68bb      	ldr	r3, [r7, #8]
  401156:	2b00      	cmp	r3, #0
  401158:	d009      	beq.n	40116e <usart_init_rs232+0x32>
  40115a:	68bb      	ldr	r3, [r7, #8]
  40115c:	681b      	ldr	r3, [r3, #0]
  40115e:	687a      	ldr	r2, [r7, #4]
  401160:	4619      	mov	r1, r3
  401162:	68f8      	ldr	r0, [r7, #12]
  401164:	4b15      	ldr	r3, [pc, #84]	; (4011bc <usart_init_rs232+0x80>)
  401166:	4798      	blx	r3
  401168:	4603      	mov	r3, r0
  40116a:	2b00      	cmp	r3, #0
  40116c:	d001      	beq.n	401172 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40116e:	2301      	movs	r3, #1
  401170:	e01b      	b.n	4011aa <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401172:	68bb      	ldr	r3, [r7, #8]
  401174:	685a      	ldr	r2, [r3, #4]
  401176:	68bb      	ldr	r3, [r7, #8]
  401178:	689b      	ldr	r3, [r3, #8]
  40117a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40117c:	68bb      	ldr	r3, [r7, #8]
  40117e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401180:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401182:	68bb      	ldr	r3, [r7, #8]
  401184:	68db      	ldr	r3, [r3, #12]
  401186:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401188:	4b0b      	ldr	r3, [pc, #44]	; (4011b8 <usart_init_rs232+0x7c>)
  40118a:	681b      	ldr	r3, [r3, #0]
  40118c:	4313      	orrs	r3, r2
  40118e:	4a0a      	ldr	r2, [pc, #40]	; (4011b8 <usart_init_rs232+0x7c>)
  401190:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401192:	4b09      	ldr	r3, [pc, #36]	; (4011b8 <usart_init_rs232+0x7c>)
  401194:	681b      	ldr	r3, [r3, #0]
  401196:	4a08      	ldr	r2, [pc, #32]	; (4011b8 <usart_init_rs232+0x7c>)
  401198:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40119a:	68fb      	ldr	r3, [r7, #12]
  40119c:	685a      	ldr	r2, [r3, #4]
  40119e:	4b06      	ldr	r3, [pc, #24]	; (4011b8 <usart_init_rs232+0x7c>)
  4011a0:	681b      	ldr	r3, [r3, #0]
  4011a2:	431a      	orrs	r2, r3
  4011a4:	68fb      	ldr	r3, [r7, #12]
  4011a6:	605a      	str	r2, [r3, #4]

	return 0;
  4011a8:	2300      	movs	r3, #0
}
  4011aa:	4618      	mov	r0, r3
  4011ac:	3710      	adds	r7, #16
  4011ae:	46bd      	mov	sp, r7
  4011b0:	bd80      	pop	{r7, pc}
  4011b2:	bf00      	nop
  4011b4:	004010e9 	.word	0x004010e9
  4011b8:	204008e4 	.word	0x204008e4
  4011bc:	0040105d 	.word	0x0040105d

004011c0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4011c0:	b480      	push	{r7}
  4011c2:	b083      	sub	sp, #12
  4011c4:	af00      	add	r7, sp, #0
  4011c6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4011c8:	687b      	ldr	r3, [r7, #4]
  4011ca:	2240      	movs	r2, #64	; 0x40
  4011cc:	601a      	str	r2, [r3, #0]
}
  4011ce:	bf00      	nop
  4011d0:	370c      	adds	r7, #12
  4011d2:	46bd      	mov	sp, r7
  4011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011d8:	4770      	bx	lr
  4011da:	bf00      	nop

004011dc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4011dc:	b480      	push	{r7}
  4011de:	b083      	sub	sp, #12
  4011e0:	af00      	add	r7, sp, #0
  4011e2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4011e4:	687b      	ldr	r3, [r7, #4]
  4011e6:	2288      	movs	r2, #136	; 0x88
  4011e8:	601a      	str	r2, [r3, #0]
}
  4011ea:	bf00      	nop
  4011ec:	370c      	adds	r7, #12
  4011ee:	46bd      	mov	sp, r7
  4011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011f4:	4770      	bx	lr
  4011f6:	bf00      	nop

004011f8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4011f8:	b480      	push	{r7}
  4011fa:	b083      	sub	sp, #12
  4011fc:	af00      	add	r7, sp, #0
  4011fe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401200:	687b      	ldr	r3, [r7, #4]
  401202:	2210      	movs	r2, #16
  401204:	601a      	str	r2, [r3, #0]
}
  401206:	bf00      	nop
  401208:	370c      	adds	r7, #12
  40120a:	46bd      	mov	sp, r7
  40120c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401210:	4770      	bx	lr
  401212:	bf00      	nop

00401214 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401214:	b480      	push	{r7}
  401216:	b083      	sub	sp, #12
  401218:	af00      	add	r7, sp, #0
  40121a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40121c:	687b      	ldr	r3, [r7, #4]
  40121e:	2224      	movs	r2, #36	; 0x24
  401220:	601a      	str	r2, [r3, #0]
}
  401222:	bf00      	nop
  401224:	370c      	adds	r7, #12
  401226:	46bd      	mov	sp, r7
  401228:	f85d 7b04 	ldr.w	r7, [sp], #4
  40122c:	4770      	bx	lr
  40122e:	bf00      	nop

00401230 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401230:	b480      	push	{r7}
  401232:	b083      	sub	sp, #12
  401234:	af00      	add	r7, sp, #0
  401236:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401238:	687b      	ldr	r3, [r7, #4]
  40123a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40123e:	601a      	str	r2, [r3, #0]
}
  401240:	bf00      	nop
  401242:	370c      	adds	r7, #12
  401244:	46bd      	mov	sp, r7
  401246:	f85d 7b04 	ldr.w	r7, [sp], #4
  40124a:	4770      	bx	lr

0040124c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40124c:	b480      	push	{r7}
  40124e:	b083      	sub	sp, #12
  401250:	af00      	add	r7, sp, #0
  401252:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401254:	687b      	ldr	r3, [r7, #4]
  401256:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40125a:	601a      	str	r2, [r3, #0]
}
  40125c:	bf00      	nop
  40125e:	370c      	adds	r7, #12
  401260:	46bd      	mov	sp, r7
  401262:	f85d 7b04 	ldr.w	r7, [sp], #4
  401266:	4770      	bx	lr

00401268 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401268:	b480      	push	{r7}
  40126a:	b083      	sub	sp, #12
  40126c:	af00      	add	r7, sp, #0
  40126e:	6078      	str	r0, [r7, #4]
  401270:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401272:	687b      	ldr	r3, [r7, #4]
  401274:	695b      	ldr	r3, [r3, #20]
  401276:	f003 0302 	and.w	r3, r3, #2
  40127a:	2b00      	cmp	r3, #0
  40127c:	d101      	bne.n	401282 <usart_write+0x1a>
		return 1;
  40127e:	2301      	movs	r3, #1
  401280:	e005      	b.n	40128e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401282:	683b      	ldr	r3, [r7, #0]
  401284:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401288:	687b      	ldr	r3, [r7, #4]
  40128a:	61da      	str	r2, [r3, #28]
	return 0;
  40128c:	2300      	movs	r3, #0
}
  40128e:	4618      	mov	r0, r3
  401290:	370c      	adds	r7, #12
  401292:	46bd      	mov	sp, r7
  401294:	f85d 7b04 	ldr.w	r7, [sp], #4
  401298:	4770      	bx	lr
  40129a:	bf00      	nop

0040129c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40129c:	b480      	push	{r7}
  40129e:	b083      	sub	sp, #12
  4012a0:	af00      	add	r7, sp, #0
  4012a2:	6078      	str	r0, [r7, #4]
  4012a4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4012a6:	687b      	ldr	r3, [r7, #4]
  4012a8:	695b      	ldr	r3, [r3, #20]
  4012aa:	f003 0301 	and.w	r3, r3, #1
  4012ae:	2b00      	cmp	r3, #0
  4012b0:	d101      	bne.n	4012b6 <usart_read+0x1a>
		return 1;
  4012b2:	2301      	movs	r3, #1
  4012b4:	e006      	b.n	4012c4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4012b6:	687b      	ldr	r3, [r7, #4]
  4012b8:	699b      	ldr	r3, [r3, #24]
  4012ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4012be:	683b      	ldr	r3, [r7, #0]
  4012c0:	601a      	str	r2, [r3, #0]

	return 0;
  4012c2:	2300      	movs	r3, #0
}
  4012c4:	4618      	mov	r0, r3
  4012c6:	370c      	adds	r7, #12
  4012c8:	46bd      	mov	sp, r7
  4012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ce:	4770      	bx	lr

004012d0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4012d0:	b480      	push	{r7}
  4012d2:	b083      	sub	sp, #12
  4012d4:	af00      	add	r7, sp, #0
  4012d6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4012d8:	687b      	ldr	r3, [r7, #4]
  4012da:	4a04      	ldr	r2, [pc, #16]	; (4012ec <usart_disable_writeprotect+0x1c>)
  4012dc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4012e0:	bf00      	nop
  4012e2:	370c      	adds	r7, #12
  4012e4:	46bd      	mov	sp, r7
  4012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ea:	4770      	bx	lr
  4012ec:	55534100 	.word	0x55534100

004012f0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4012f0:	b480      	push	{r7}
  4012f2:	b083      	sub	sp, #12
  4012f4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4012f6:	f3ef 8310 	mrs	r3, PRIMASK
  4012fa:	607b      	str	r3, [r7, #4]
  return(result);
  4012fc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4012fe:	2b00      	cmp	r3, #0
  401300:	bf0c      	ite	eq
  401302:	2301      	moveq	r3, #1
  401304:	2300      	movne	r3, #0
  401306:	b2db      	uxtb	r3, r3
  401308:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40130a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40130c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401310:	4b04      	ldr	r3, [pc, #16]	; (401324 <cpu_irq_save+0x34>)
  401312:	2200      	movs	r2, #0
  401314:	701a      	strb	r2, [r3, #0]
	return flags;
  401316:	683b      	ldr	r3, [r7, #0]
}
  401318:	4618      	mov	r0, r3
  40131a:	370c      	adds	r7, #12
  40131c:	46bd      	mov	sp, r7
  40131e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401322:	4770      	bx	lr
  401324:	20400000 	.word	0x20400000

00401328 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401328:	b480      	push	{r7}
  40132a:	b083      	sub	sp, #12
  40132c:	af00      	add	r7, sp, #0
  40132e:	6078      	str	r0, [r7, #4]
	return (flags);
  401330:	687b      	ldr	r3, [r7, #4]
  401332:	2b00      	cmp	r3, #0
  401334:	bf14      	ite	ne
  401336:	2301      	movne	r3, #1
  401338:	2300      	moveq	r3, #0
  40133a:	b2db      	uxtb	r3, r3
}
  40133c:	4618      	mov	r0, r3
  40133e:	370c      	adds	r7, #12
  401340:	46bd      	mov	sp, r7
  401342:	f85d 7b04 	ldr.w	r7, [sp], #4
  401346:	4770      	bx	lr

00401348 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401348:	b580      	push	{r7, lr}
  40134a:	b082      	sub	sp, #8
  40134c:	af00      	add	r7, sp, #0
  40134e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401350:	6878      	ldr	r0, [r7, #4]
  401352:	4b07      	ldr	r3, [pc, #28]	; (401370 <cpu_irq_restore+0x28>)
  401354:	4798      	blx	r3
  401356:	4603      	mov	r3, r0
  401358:	2b00      	cmp	r3, #0
  40135a:	d005      	beq.n	401368 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40135c:	4b05      	ldr	r3, [pc, #20]	; (401374 <cpu_irq_restore+0x2c>)
  40135e:	2201      	movs	r2, #1
  401360:	701a      	strb	r2, [r3, #0]
  401362:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401366:	b662      	cpsie	i
}
  401368:	bf00      	nop
  40136a:	3708      	adds	r7, #8
  40136c:	46bd      	mov	sp, r7
  40136e:	bd80      	pop	{r7, pc}
  401370:	00401329 	.word	0x00401329
  401374:	20400000 	.word	0x20400000

00401378 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401378:	b580      	push	{r7, lr}
  40137a:	b084      	sub	sp, #16
  40137c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40137e:	4b1e      	ldr	r3, [pc, #120]	; (4013f8 <Reset_Handler+0x80>)
  401380:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401382:	4b1e      	ldr	r3, [pc, #120]	; (4013fc <Reset_Handler+0x84>)
  401384:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401386:	68fa      	ldr	r2, [r7, #12]
  401388:	68bb      	ldr	r3, [r7, #8]
  40138a:	429a      	cmp	r2, r3
  40138c:	d00c      	beq.n	4013a8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40138e:	e007      	b.n	4013a0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401390:	68bb      	ldr	r3, [r7, #8]
  401392:	1d1a      	adds	r2, r3, #4
  401394:	60ba      	str	r2, [r7, #8]
  401396:	68fa      	ldr	r2, [r7, #12]
  401398:	1d11      	adds	r1, r2, #4
  40139a:	60f9      	str	r1, [r7, #12]
  40139c:	6812      	ldr	r2, [r2, #0]
  40139e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4013a0:	68bb      	ldr	r3, [r7, #8]
  4013a2:	4a17      	ldr	r2, [pc, #92]	; (401400 <Reset_Handler+0x88>)
  4013a4:	4293      	cmp	r3, r2
  4013a6:	d3f3      	bcc.n	401390 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4013a8:	4b16      	ldr	r3, [pc, #88]	; (401404 <Reset_Handler+0x8c>)
  4013aa:	60bb      	str	r3, [r7, #8]
  4013ac:	e004      	b.n	4013b8 <Reset_Handler+0x40>
                *pDest++ = 0;
  4013ae:	68bb      	ldr	r3, [r7, #8]
  4013b0:	1d1a      	adds	r2, r3, #4
  4013b2:	60ba      	str	r2, [r7, #8]
  4013b4:	2200      	movs	r2, #0
  4013b6:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4013b8:	68bb      	ldr	r3, [r7, #8]
  4013ba:	4a13      	ldr	r2, [pc, #76]	; (401408 <Reset_Handler+0x90>)
  4013bc:	4293      	cmp	r3, r2
  4013be:	d3f6      	bcc.n	4013ae <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4013c0:	4b12      	ldr	r3, [pc, #72]	; (40140c <Reset_Handler+0x94>)
  4013c2:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4013c4:	4a12      	ldr	r2, [pc, #72]	; (401410 <Reset_Handler+0x98>)
  4013c6:	68fb      	ldr	r3, [r7, #12]
  4013c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4013cc:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4013ce:	4b11      	ldr	r3, [pc, #68]	; (401414 <Reset_Handler+0x9c>)
  4013d0:	4798      	blx	r3
  4013d2:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4013d4:	4a10      	ldr	r2, [pc, #64]	; (401418 <Reset_Handler+0xa0>)
  4013d6:	4b10      	ldr	r3, [pc, #64]	; (401418 <Reset_Handler+0xa0>)
  4013d8:	681b      	ldr	r3, [r3, #0]
  4013da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4013de:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4013e0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4013e4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4013e8:	6878      	ldr	r0, [r7, #4]
  4013ea:	4b0c      	ldr	r3, [pc, #48]	; (40141c <Reset_Handler+0xa4>)
  4013ec:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4013ee:	4b0c      	ldr	r3, [pc, #48]	; (401420 <Reset_Handler+0xa8>)
  4013f0:	4798      	blx	r3

        /* Branch to main function */
        main();
  4013f2:	4b0c      	ldr	r3, [pc, #48]	; (401424 <Reset_Handler+0xac>)
  4013f4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4013f6:	e7fe      	b.n	4013f6 <Reset_Handler+0x7e>
  4013f8:	0040306c 	.word	0x0040306c
  4013fc:	20400000 	.word	0x20400000
  401400:	2040084c 	.word	0x2040084c
  401404:	2040084c 	.word	0x2040084c
  401408:	2040093c 	.word	0x2040093c
  40140c:	00400000 	.word	0x00400000
  401410:	e000ed00 	.word	0xe000ed00
  401414:	004012f1 	.word	0x004012f1
  401418:	e000ed88 	.word	0xe000ed88
  40141c:	00401349 	.word	0x00401349
  401420:	00401fdd 	.word	0x00401fdd
  401424:	00401ef1 	.word	0x00401ef1

00401428 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401428:	b480      	push	{r7}
  40142a:	af00      	add	r7, sp, #0
        while (1) {
        }
  40142c:	e7fe      	b.n	40142c <Dummy_Handler+0x4>
  40142e:	bf00      	nop

00401430 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401430:	b480      	push	{r7}
  401432:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401434:	4b52      	ldr	r3, [pc, #328]	; (401580 <SystemCoreClockUpdate+0x150>)
  401436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401438:	f003 0303 	and.w	r3, r3, #3
  40143c:	2b01      	cmp	r3, #1
  40143e:	d014      	beq.n	40146a <SystemCoreClockUpdate+0x3a>
  401440:	2b01      	cmp	r3, #1
  401442:	d302      	bcc.n	40144a <SystemCoreClockUpdate+0x1a>
  401444:	2b02      	cmp	r3, #2
  401446:	d038      	beq.n	4014ba <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401448:	e07a      	b.n	401540 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40144a:	4b4e      	ldr	r3, [pc, #312]	; (401584 <SystemCoreClockUpdate+0x154>)
  40144c:	695b      	ldr	r3, [r3, #20]
  40144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401452:	2b00      	cmp	r3, #0
  401454:	d004      	beq.n	401460 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401456:	4b4c      	ldr	r3, [pc, #304]	; (401588 <SystemCoreClockUpdate+0x158>)
  401458:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40145c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40145e:	e06f      	b.n	401540 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401460:	4b49      	ldr	r3, [pc, #292]	; (401588 <SystemCoreClockUpdate+0x158>)
  401462:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401466:	601a      	str	r2, [r3, #0]
      }
    break;
  401468:	e06a      	b.n	401540 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40146a:	4b45      	ldr	r3, [pc, #276]	; (401580 <SystemCoreClockUpdate+0x150>)
  40146c:	6a1b      	ldr	r3, [r3, #32]
  40146e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401472:	2b00      	cmp	r3, #0
  401474:	d003      	beq.n	40147e <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401476:	4b44      	ldr	r3, [pc, #272]	; (401588 <SystemCoreClockUpdate+0x158>)
  401478:	4a44      	ldr	r2, [pc, #272]	; (40158c <SystemCoreClockUpdate+0x15c>)
  40147a:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  40147c:	e060      	b.n	401540 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40147e:	4b42      	ldr	r3, [pc, #264]	; (401588 <SystemCoreClockUpdate+0x158>)
  401480:	4a43      	ldr	r2, [pc, #268]	; (401590 <SystemCoreClockUpdate+0x160>)
  401482:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401484:	4b3e      	ldr	r3, [pc, #248]	; (401580 <SystemCoreClockUpdate+0x150>)
  401486:	6a1b      	ldr	r3, [r3, #32]
  401488:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40148c:	2b10      	cmp	r3, #16
  40148e:	d004      	beq.n	40149a <SystemCoreClockUpdate+0x6a>
  401490:	2b20      	cmp	r3, #32
  401492:	d008      	beq.n	4014a6 <SystemCoreClockUpdate+0x76>
  401494:	2b00      	cmp	r3, #0
  401496:	d00e      	beq.n	4014b6 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401498:	e00e      	b.n	4014b8 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40149a:	4b3b      	ldr	r3, [pc, #236]	; (401588 <SystemCoreClockUpdate+0x158>)
  40149c:	681b      	ldr	r3, [r3, #0]
  40149e:	005b      	lsls	r3, r3, #1
  4014a0:	4a39      	ldr	r2, [pc, #228]	; (401588 <SystemCoreClockUpdate+0x158>)
  4014a2:	6013      	str	r3, [r2, #0]
          break;
  4014a4:	e008      	b.n	4014b8 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4014a6:	4b38      	ldr	r3, [pc, #224]	; (401588 <SystemCoreClockUpdate+0x158>)
  4014a8:	681a      	ldr	r2, [r3, #0]
  4014aa:	4613      	mov	r3, r2
  4014ac:	005b      	lsls	r3, r3, #1
  4014ae:	4413      	add	r3, r2
  4014b0:	4a35      	ldr	r2, [pc, #212]	; (401588 <SystemCoreClockUpdate+0x158>)
  4014b2:	6013      	str	r3, [r2, #0]
          break;
  4014b4:	e000      	b.n	4014b8 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4014b6:	bf00      	nop

          default:
          break;
        }
      }
    break;
  4014b8:	e042      	b.n	401540 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4014ba:	4b31      	ldr	r3, [pc, #196]	; (401580 <SystemCoreClockUpdate+0x150>)
  4014bc:	6a1b      	ldr	r3, [r3, #32]
  4014be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4014c2:	2b00      	cmp	r3, #0
  4014c4:	d003      	beq.n	4014ce <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4014c6:	4b30      	ldr	r3, [pc, #192]	; (401588 <SystemCoreClockUpdate+0x158>)
  4014c8:	4a30      	ldr	r2, [pc, #192]	; (40158c <SystemCoreClockUpdate+0x15c>)
  4014ca:	601a      	str	r2, [r3, #0]
  4014cc:	e01c      	b.n	401508 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4014ce:	4b2e      	ldr	r3, [pc, #184]	; (401588 <SystemCoreClockUpdate+0x158>)
  4014d0:	4a2f      	ldr	r2, [pc, #188]	; (401590 <SystemCoreClockUpdate+0x160>)
  4014d2:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4014d4:	4b2a      	ldr	r3, [pc, #168]	; (401580 <SystemCoreClockUpdate+0x150>)
  4014d6:	6a1b      	ldr	r3, [r3, #32]
  4014d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014dc:	2b10      	cmp	r3, #16
  4014de:	d004      	beq.n	4014ea <SystemCoreClockUpdate+0xba>
  4014e0:	2b20      	cmp	r3, #32
  4014e2:	d008      	beq.n	4014f6 <SystemCoreClockUpdate+0xc6>
  4014e4:	2b00      	cmp	r3, #0
  4014e6:	d00e      	beq.n	401506 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4014e8:	e00e      	b.n	401508 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4014ea:	4b27      	ldr	r3, [pc, #156]	; (401588 <SystemCoreClockUpdate+0x158>)
  4014ec:	681b      	ldr	r3, [r3, #0]
  4014ee:	005b      	lsls	r3, r3, #1
  4014f0:	4a25      	ldr	r2, [pc, #148]	; (401588 <SystemCoreClockUpdate+0x158>)
  4014f2:	6013      	str	r3, [r2, #0]
          break;
  4014f4:	e008      	b.n	401508 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4014f6:	4b24      	ldr	r3, [pc, #144]	; (401588 <SystemCoreClockUpdate+0x158>)
  4014f8:	681a      	ldr	r2, [r3, #0]
  4014fa:	4613      	mov	r3, r2
  4014fc:	005b      	lsls	r3, r3, #1
  4014fe:	4413      	add	r3, r2
  401500:	4a21      	ldr	r2, [pc, #132]	; (401588 <SystemCoreClockUpdate+0x158>)
  401502:	6013      	str	r3, [r2, #0]
          break;
  401504:	e000      	b.n	401508 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401506:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401508:	4b1d      	ldr	r3, [pc, #116]	; (401580 <SystemCoreClockUpdate+0x150>)
  40150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40150c:	f003 0303 	and.w	r3, r3, #3
  401510:	2b02      	cmp	r3, #2
  401512:	d114      	bne.n	40153e <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401514:	4b1a      	ldr	r3, [pc, #104]	; (401580 <SystemCoreClockUpdate+0x150>)
  401516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401518:	4b1e      	ldr	r3, [pc, #120]	; (401594 <SystemCoreClockUpdate+0x164>)
  40151a:	4013      	ands	r3, r2
  40151c:	0c1b      	lsrs	r3, r3, #16
  40151e:	3301      	adds	r3, #1
  401520:	4a19      	ldr	r2, [pc, #100]	; (401588 <SystemCoreClockUpdate+0x158>)
  401522:	6812      	ldr	r2, [r2, #0]
  401524:	fb02 f303 	mul.w	r3, r2, r3
  401528:	4a17      	ldr	r2, [pc, #92]	; (401588 <SystemCoreClockUpdate+0x158>)
  40152a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40152c:	4b14      	ldr	r3, [pc, #80]	; (401580 <SystemCoreClockUpdate+0x150>)
  40152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401530:	b2db      	uxtb	r3, r3
  401532:	4a15      	ldr	r2, [pc, #84]	; (401588 <SystemCoreClockUpdate+0x158>)
  401534:	6812      	ldr	r2, [r2, #0]
  401536:	fbb2 f3f3 	udiv	r3, r2, r3
  40153a:	4a13      	ldr	r2, [pc, #76]	; (401588 <SystemCoreClockUpdate+0x158>)
  40153c:	6013      	str	r3, [r2, #0]
      }
    break;
  40153e:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401540:	4b0f      	ldr	r3, [pc, #60]	; (401580 <SystemCoreClockUpdate+0x150>)
  401542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401544:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401548:	2b70      	cmp	r3, #112	; 0x70
  40154a:	d108      	bne.n	40155e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  40154c:	4b0e      	ldr	r3, [pc, #56]	; (401588 <SystemCoreClockUpdate+0x158>)
  40154e:	681b      	ldr	r3, [r3, #0]
  401550:	4a11      	ldr	r2, [pc, #68]	; (401598 <SystemCoreClockUpdate+0x168>)
  401552:	fba2 2303 	umull	r2, r3, r2, r3
  401556:	085b      	lsrs	r3, r3, #1
  401558:	4a0b      	ldr	r2, [pc, #44]	; (401588 <SystemCoreClockUpdate+0x158>)
  40155a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  40155c:	e00a      	b.n	401574 <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40155e:	4b08      	ldr	r3, [pc, #32]	; (401580 <SystemCoreClockUpdate+0x150>)
  401560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401562:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401566:	091b      	lsrs	r3, r3, #4
  401568:	4a07      	ldr	r2, [pc, #28]	; (401588 <SystemCoreClockUpdate+0x158>)
  40156a:	6812      	ldr	r2, [r2, #0]
  40156c:	fa22 f303 	lsr.w	r3, r2, r3
  401570:	4a05      	ldr	r2, [pc, #20]	; (401588 <SystemCoreClockUpdate+0x158>)
  401572:	6013      	str	r3, [r2, #0]
  }
}
  401574:	bf00      	nop
  401576:	46bd      	mov	sp, r7
  401578:	f85d 7b04 	ldr.w	r7, [sp], #4
  40157c:	4770      	bx	lr
  40157e:	bf00      	nop
  401580:	400e0600 	.word	0x400e0600
  401584:	400e1810 	.word	0x400e1810
  401588:	20400008 	.word	0x20400008
  40158c:	00b71b00 	.word	0x00b71b00
  401590:	003d0900 	.word	0x003d0900
  401594:	07ff0000 	.word	0x07ff0000
  401598:	aaaaaaab 	.word	0xaaaaaaab

0040159c <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  40159c:	b480      	push	{r7}
  40159e:	b083      	sub	sp, #12
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	4a19      	ldr	r2, [pc, #100]	; (40160c <system_init_flash+0x70>)
  4015a8:	4293      	cmp	r3, r2
  4015aa:	d804      	bhi.n	4015b6 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4015ac:	4b18      	ldr	r3, [pc, #96]	; (401610 <system_init_flash+0x74>)
  4015ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4015b2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4015b4:	e023      	b.n	4015fe <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4015b6:	687b      	ldr	r3, [r7, #4]
  4015b8:	4a16      	ldr	r2, [pc, #88]	; (401614 <system_init_flash+0x78>)
  4015ba:	4293      	cmp	r3, r2
  4015bc:	d803      	bhi.n	4015c6 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4015be:	4b14      	ldr	r3, [pc, #80]	; (401610 <system_init_flash+0x74>)
  4015c0:	4a15      	ldr	r2, [pc, #84]	; (401618 <system_init_flash+0x7c>)
  4015c2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4015c4:	e01b      	b.n	4015fe <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4015c6:	687b      	ldr	r3, [r7, #4]
  4015c8:	4a14      	ldr	r2, [pc, #80]	; (40161c <system_init_flash+0x80>)
  4015ca:	4293      	cmp	r3, r2
  4015cc:	d803      	bhi.n	4015d6 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4015ce:	4b10      	ldr	r3, [pc, #64]	; (401610 <system_init_flash+0x74>)
  4015d0:	4a13      	ldr	r2, [pc, #76]	; (401620 <system_init_flash+0x84>)
  4015d2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4015d4:	e013      	b.n	4015fe <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4015d6:	687b      	ldr	r3, [r7, #4]
  4015d8:	4a12      	ldr	r2, [pc, #72]	; (401624 <system_init_flash+0x88>)
  4015da:	4293      	cmp	r3, r2
  4015dc:	d803      	bhi.n	4015e6 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4015de:	4b0c      	ldr	r3, [pc, #48]	; (401610 <system_init_flash+0x74>)
  4015e0:	4a11      	ldr	r2, [pc, #68]	; (401628 <system_init_flash+0x8c>)
  4015e2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4015e4:	e00b      	b.n	4015fe <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4015e6:	687b      	ldr	r3, [r7, #4]
  4015e8:	4a10      	ldr	r2, [pc, #64]	; (40162c <system_init_flash+0x90>)
  4015ea:	4293      	cmp	r3, r2
  4015ec:	d804      	bhi.n	4015f8 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4015ee:	4b08      	ldr	r3, [pc, #32]	; (401610 <system_init_flash+0x74>)
  4015f0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4015f4:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4015f6:	e002      	b.n	4015fe <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4015f8:	4b05      	ldr	r3, [pc, #20]	; (401610 <system_init_flash+0x74>)
  4015fa:	4a0d      	ldr	r2, [pc, #52]	; (401630 <system_init_flash+0x94>)
  4015fc:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4015fe:	bf00      	nop
  401600:	370c      	adds	r7, #12
  401602:	46bd      	mov	sp, r7
  401604:	f85d 7b04 	ldr.w	r7, [sp], #4
  401608:	4770      	bx	lr
  40160a:	bf00      	nop
  40160c:	01312cff 	.word	0x01312cff
  401610:	400e0c00 	.word	0x400e0c00
  401614:	026259ff 	.word	0x026259ff
  401618:	04000100 	.word	0x04000100
  40161c:	039386ff 	.word	0x039386ff
  401620:	04000200 	.word	0x04000200
  401624:	04c4b3ff 	.word	0x04c4b3ff
  401628:	04000300 	.word	0x04000300
  40162c:	05f5e0ff 	.word	0x05f5e0ff
  401630:	04000500 	.word	0x04000500

00401634 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401634:	b480      	push	{r7}
  401636:	b085      	sub	sp, #20
  401638:	af00      	add	r7, sp, #0
  40163a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40163c:	4b10      	ldr	r3, [pc, #64]	; (401680 <_sbrk+0x4c>)
  40163e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401640:	4b10      	ldr	r3, [pc, #64]	; (401684 <_sbrk+0x50>)
  401642:	681b      	ldr	r3, [r3, #0]
  401644:	2b00      	cmp	r3, #0
  401646:	d102      	bne.n	40164e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401648:	4b0e      	ldr	r3, [pc, #56]	; (401684 <_sbrk+0x50>)
  40164a:	4a0f      	ldr	r2, [pc, #60]	; (401688 <_sbrk+0x54>)
  40164c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40164e:	4b0d      	ldr	r3, [pc, #52]	; (401684 <_sbrk+0x50>)
  401650:	681b      	ldr	r3, [r3, #0]
  401652:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401654:	68ba      	ldr	r2, [r7, #8]
  401656:	687b      	ldr	r3, [r7, #4]
  401658:	441a      	add	r2, r3
  40165a:	68fb      	ldr	r3, [r7, #12]
  40165c:	429a      	cmp	r2, r3
  40165e:	dd02      	ble.n	401666 <_sbrk+0x32>
		return (caddr_t) -1;	
  401660:	f04f 33ff 	mov.w	r3, #4294967295
  401664:	e006      	b.n	401674 <_sbrk+0x40>
	}

	heap += incr;
  401666:	4b07      	ldr	r3, [pc, #28]	; (401684 <_sbrk+0x50>)
  401668:	681a      	ldr	r2, [r3, #0]
  40166a:	687b      	ldr	r3, [r7, #4]
  40166c:	4413      	add	r3, r2
  40166e:	4a05      	ldr	r2, [pc, #20]	; (401684 <_sbrk+0x50>)
  401670:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401672:	68bb      	ldr	r3, [r7, #8]
}
  401674:	4618      	mov	r0, r3
  401676:	3714      	adds	r7, #20
  401678:	46bd      	mov	sp, r7
  40167a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40167e:	4770      	bx	lr
  401680:	2045fffc 	.word	0x2045fffc
  401684:	204008e8 	.word	0x204008e8
  401688:	20402b40 	.word	0x20402b40

0040168c <_close>:
{
	return -1;
}

extern int _close(int file)
{
  40168c:	b480      	push	{r7}
  40168e:	b083      	sub	sp, #12
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
	return -1;
  401694:	f04f 33ff 	mov.w	r3, #4294967295
}
  401698:	4618      	mov	r0, r3
  40169a:	370c      	adds	r7, #12
  40169c:	46bd      	mov	sp, r7
  40169e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016a2:	4770      	bx	lr

004016a4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4016a4:	b480      	push	{r7}
  4016a6:	b083      	sub	sp, #12
  4016a8:	af00      	add	r7, sp, #0
  4016aa:	6078      	str	r0, [r7, #4]
  4016ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4016ae:	683b      	ldr	r3, [r7, #0]
  4016b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4016b4:	605a      	str	r2, [r3, #4]

	return 0;
  4016b6:	2300      	movs	r3, #0
}
  4016b8:	4618      	mov	r0, r3
  4016ba:	370c      	adds	r7, #12
  4016bc:	46bd      	mov	sp, r7
  4016be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016c2:	4770      	bx	lr

004016c4 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
  4016c4:	b480      	push	{r7}
  4016c6:	b085      	sub	sp, #20
  4016c8:	af00      	add	r7, sp, #0
  4016ca:	60f8      	str	r0, [r7, #12]
  4016cc:	60b9      	str	r1, [r7, #8]
  4016ce:	607a      	str	r2, [r7, #4]
	return 0;
  4016d0:	2300      	movs	r3, #0
}
  4016d2:	4618      	mov	r0, r3
  4016d4:	3714      	adds	r7, #20
  4016d6:	46bd      	mov	sp, r7
  4016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016dc:	4770      	bx	lr
  4016de:	bf00      	nop

004016e0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4016e0:	b480      	push	{r7}
  4016e2:	b083      	sub	sp, #12
  4016e4:	af00      	add	r7, sp, #0
  4016e6:	4603      	mov	r3, r0
  4016e8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016ea:	4909      	ldr	r1, [pc, #36]	; (401710 <NVIC_EnableIRQ+0x30>)
  4016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016f0:	095b      	lsrs	r3, r3, #5
  4016f2:	79fa      	ldrb	r2, [r7, #7]
  4016f4:	f002 021f 	and.w	r2, r2, #31
  4016f8:	2001      	movs	r0, #1
  4016fa:	fa00 f202 	lsl.w	r2, r0, r2
  4016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401702:	bf00      	nop
  401704:	370c      	adds	r7, #12
  401706:	46bd      	mov	sp, r7
  401708:	f85d 7b04 	ldr.w	r7, [sp], #4
  40170c:	4770      	bx	lr
  40170e:	bf00      	nop
  401710:	e000e100 	.word	0xe000e100

00401714 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401714:	b480      	push	{r7}
  401716:	b083      	sub	sp, #12
  401718:	af00      	add	r7, sp, #0
  40171a:	4603      	mov	r3, r0
  40171c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40171e:	4909      	ldr	r1, [pc, #36]	; (401744 <NVIC_DisableIRQ+0x30>)
  401720:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401724:	095b      	lsrs	r3, r3, #5
  401726:	79fa      	ldrb	r2, [r7, #7]
  401728:	f002 021f 	and.w	r2, r2, #31
  40172c:	2001      	movs	r0, #1
  40172e:	fa00 f202 	lsl.w	r2, r0, r2
  401732:	3320      	adds	r3, #32
  401734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401738:	bf00      	nop
  40173a:	370c      	adds	r7, #12
  40173c:	46bd      	mov	sp, r7
  40173e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401742:	4770      	bx	lr
  401744:	e000e100 	.word	0xe000e100

00401748 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401748:	b480      	push	{r7}
  40174a:	b083      	sub	sp, #12
  40174c:	af00      	add	r7, sp, #0
  40174e:	4603      	mov	r3, r0
  401750:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401752:	4909      	ldr	r1, [pc, #36]	; (401778 <NVIC_ClearPendingIRQ+0x30>)
  401754:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401758:	095b      	lsrs	r3, r3, #5
  40175a:	79fa      	ldrb	r2, [r7, #7]
  40175c:	f002 021f 	and.w	r2, r2, #31
  401760:	2001      	movs	r0, #1
  401762:	fa00 f202 	lsl.w	r2, r0, r2
  401766:	3360      	adds	r3, #96	; 0x60
  401768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40176c:	bf00      	nop
  40176e:	370c      	adds	r7, #12
  401770:	46bd      	mov	sp, r7
  401772:	f85d 7b04 	ldr.w	r7, [sp], #4
  401776:	4770      	bx	lr
  401778:	e000e100 	.word	0xe000e100

0040177c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40177c:	b480      	push	{r7}
  40177e:	b083      	sub	sp, #12
  401780:	af00      	add	r7, sp, #0
  401782:	4603      	mov	r3, r0
  401784:	6039      	str	r1, [r7, #0]
  401786:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401788:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40178c:	2b00      	cmp	r3, #0
  40178e:	da0b      	bge.n	4017a8 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401790:	490d      	ldr	r1, [pc, #52]	; (4017c8 <NVIC_SetPriority+0x4c>)
  401792:	79fb      	ldrb	r3, [r7, #7]
  401794:	f003 030f 	and.w	r3, r3, #15
  401798:	3b04      	subs	r3, #4
  40179a:	683a      	ldr	r2, [r7, #0]
  40179c:	b2d2      	uxtb	r2, r2
  40179e:	0152      	lsls	r2, r2, #5
  4017a0:	b2d2      	uxtb	r2, r2
  4017a2:	440b      	add	r3, r1
  4017a4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  4017a6:	e009      	b.n	4017bc <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4017a8:	4908      	ldr	r1, [pc, #32]	; (4017cc <NVIC_SetPriority+0x50>)
  4017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017ae:	683a      	ldr	r2, [r7, #0]
  4017b0:	b2d2      	uxtb	r2, r2
  4017b2:	0152      	lsls	r2, r2, #5
  4017b4:	b2d2      	uxtb	r2, r2
  4017b6:	440b      	add	r3, r1
  4017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4017bc:	bf00      	nop
  4017be:	370c      	adds	r7, #12
  4017c0:	46bd      	mov	sp, r7
  4017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017c6:	4770      	bx	lr
  4017c8:	e000ed00 	.word	0xe000ed00
  4017cc:	e000e100 	.word	0xe000e100

004017d0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4017d0:	b480      	push	{r7}
  4017d2:	b083      	sub	sp, #12
  4017d4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4017d6:	f3ef 8310 	mrs	r3, PRIMASK
  4017da:	607b      	str	r3, [r7, #4]
  return(result);
  4017dc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4017de:	2b00      	cmp	r3, #0
  4017e0:	bf0c      	ite	eq
  4017e2:	2301      	moveq	r3, #1
  4017e4:	2300      	movne	r3, #0
  4017e6:	b2db      	uxtb	r3, r3
  4017e8:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4017ea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4017ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4017f0:	4b04      	ldr	r3, [pc, #16]	; (401804 <cpu_irq_save+0x34>)
  4017f2:	2200      	movs	r2, #0
  4017f4:	701a      	strb	r2, [r3, #0]
	return flags;
  4017f6:	683b      	ldr	r3, [r7, #0]
}
  4017f8:	4618      	mov	r0, r3
  4017fa:	370c      	adds	r7, #12
  4017fc:	46bd      	mov	sp, r7
  4017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401802:	4770      	bx	lr
  401804:	20400000 	.word	0x20400000

00401808 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401808:	b480      	push	{r7}
  40180a:	b083      	sub	sp, #12
  40180c:	af00      	add	r7, sp, #0
  40180e:	6078      	str	r0, [r7, #4]
	return (flags);
  401810:	687b      	ldr	r3, [r7, #4]
  401812:	2b00      	cmp	r3, #0
  401814:	bf14      	ite	ne
  401816:	2301      	movne	r3, #1
  401818:	2300      	moveq	r3, #0
  40181a:	b2db      	uxtb	r3, r3
}
  40181c:	4618      	mov	r0, r3
  40181e:	370c      	adds	r7, #12
  401820:	46bd      	mov	sp, r7
  401822:	f85d 7b04 	ldr.w	r7, [sp], #4
  401826:	4770      	bx	lr

00401828 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401828:	b580      	push	{r7, lr}
  40182a:	b082      	sub	sp, #8
  40182c:	af00      	add	r7, sp, #0
  40182e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401830:	6878      	ldr	r0, [r7, #4]
  401832:	4b07      	ldr	r3, [pc, #28]	; (401850 <cpu_irq_restore+0x28>)
  401834:	4798      	blx	r3
  401836:	4603      	mov	r3, r0
  401838:	2b00      	cmp	r3, #0
  40183a:	d005      	beq.n	401848 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40183c:	4b05      	ldr	r3, [pc, #20]	; (401854 <cpu_irq_restore+0x2c>)
  40183e:	2201      	movs	r2, #1
  401840:	701a      	strb	r2, [r3, #0]
  401842:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401846:	b662      	cpsie	i
}
  401848:	bf00      	nop
  40184a:	3708      	adds	r7, #8
  40184c:	46bd      	mov	sp, r7
  40184e:	bd80      	pop	{r7, pc}
  401850:	00401809 	.word	0x00401809
  401854:	20400000 	.word	0x20400000

00401858 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401858:	b480      	push	{r7}
  40185a:	af00      	add	r7, sp, #0
	}
#endif

	/* Config system clock setting */
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
		return OSC_SLCK_32K_RC_HZ;
  40185c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401860:	4618      	mov	r0, r3
  401862:	46bd      	mov	sp, r7
  401864:	f85d 7b04 	ldr.w	r7, [sp], #4
  401868:	4770      	bx	lr
  40186a:	bf00      	nop

0040186c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40186c:	b580      	push	{r7, lr}
  40186e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401870:	4b02      	ldr	r3, [pc, #8]	; (40187c <sysclk_get_peripheral_hz+0x10>)
  401872:	4798      	blx	r3
  401874:	4603      	mov	r3, r0
  401876:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  401878:	4618      	mov	r0, r3
  40187a:	bd80      	pop	{r7, pc}
  40187c:	00401859 	.word	0x00401859

00401880 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401880:	b580      	push	{r7, lr}
  401882:	b082      	sub	sp, #8
  401884:	af00      	add	r7, sp, #0
  401886:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401888:	6878      	ldr	r0, [r7, #4]
  40188a:	4b03      	ldr	r3, [pc, #12]	; (401898 <sysclk_enable_peripheral_clock+0x18>)
  40188c:	4798      	blx	r3
}
  40188e:	bf00      	nop
  401890:	3708      	adds	r7, #8
  401892:	46bd      	mov	sp, r7
  401894:	bd80      	pop	{r7, pc}
  401896:	bf00      	nop
  401898:	00400921 	.word	0x00400921

0040189c <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
  40189c:	b580      	push	{r7, lr}
  40189e:	b082      	sub	sp, #8
  4018a0:	af00      	add	r7, sp, #0
  4018a2:	4603      	mov	r3, r0
  4018a4:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4018a6:	b672      	cpsid	i
  4018a8:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
  4018ac:	4b05      	ldr	r3, [pc, #20]	; (4018c4 <sleepmgr_sleep+0x28>)
  4018ae:	2200      	movs	r2, #0
  4018b0:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  4018b2:	79fb      	ldrb	r3, [r7, #7]
  4018b4:	4618      	mov	r0, r3
  4018b6:	4b04      	ldr	r3, [pc, #16]	; (4018c8 <sleepmgr_sleep+0x2c>)
  4018b8:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
  4018ba:	bf00      	nop
  4018bc:	3708      	adds	r7, #8
  4018be:	46bd      	mov	sp, r7
  4018c0:	bd80      	pop	{r7, pc}
  4018c2:	bf00      	nop
  4018c4:	20400000 	.word	0x20400000
  4018c8:	00400a81 	.word	0x00400a81

004018cc <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
  4018cc:	b480      	push	{r7}
  4018ce:	b083      	sub	sp, #12
  4018d0:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
  4018d2:	2300      	movs	r3, #0
  4018d4:	71fb      	strb	r3, [r7, #7]
  4018d6:	e006      	b.n	4018e6 <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
  4018d8:	79fb      	ldrb	r3, [r7, #7]
  4018da:	4a09      	ldr	r2, [pc, #36]	; (401900 <sleepmgr_init+0x34>)
  4018dc:	2100      	movs	r1, #0
  4018de:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
  4018e0:	79fb      	ldrb	r3, [r7, #7]
  4018e2:	3301      	adds	r3, #1
  4018e4:	71fb      	strb	r3, [r7, #7]
  4018e6:	79fb      	ldrb	r3, [r7, #7]
  4018e8:	2b04      	cmp	r3, #4
  4018ea:	d9f5      	bls.n	4018d8 <sleepmgr_init+0xc>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  4018ec:	4b04      	ldr	r3, [pc, #16]	; (401900 <sleepmgr_init+0x34>)
  4018ee:	2201      	movs	r2, #1
  4018f0:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  4018f2:	bf00      	nop
  4018f4:	370c      	adds	r7, #12
  4018f6:	46bd      	mov	sp, r7
  4018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018fc:	4770      	bx	lr
  4018fe:	bf00      	nop
  401900:	20400924 	.word	0x20400924

00401904 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  401904:	b580      	push	{r7, lr}
  401906:	b084      	sub	sp, #16
  401908:	af00      	add	r7, sp, #0
  40190a:	4603      	mov	r3, r0
  40190c:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40190e:	79fb      	ldrb	r3, [r7, #7]
  401910:	4a0a      	ldr	r2, [pc, #40]	; (40193c <sleepmgr_lock_mode+0x38>)
  401912:	5cd3      	ldrb	r3, [r2, r3]
  401914:	2bff      	cmp	r3, #255	; 0xff
  401916:	d100      	bne.n	40191a <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  401918:	e7fe      	b.n	401918 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40191a:	4b09      	ldr	r3, [pc, #36]	; (401940 <sleepmgr_lock_mode+0x3c>)
  40191c:	4798      	blx	r3
  40191e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  401920:	79fb      	ldrb	r3, [r7, #7]
  401922:	4a06      	ldr	r2, [pc, #24]	; (40193c <sleepmgr_lock_mode+0x38>)
  401924:	5cd2      	ldrb	r2, [r2, r3]
  401926:	3201      	adds	r2, #1
  401928:	b2d1      	uxtb	r1, r2
  40192a:	4a04      	ldr	r2, [pc, #16]	; (40193c <sleepmgr_lock_mode+0x38>)
  40192c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  40192e:	68f8      	ldr	r0, [r7, #12]
  401930:	4b04      	ldr	r3, [pc, #16]	; (401944 <sleepmgr_lock_mode+0x40>)
  401932:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401934:	bf00      	nop
  401936:	3710      	adds	r7, #16
  401938:	46bd      	mov	sp, r7
  40193a:	bd80      	pop	{r7, pc}
  40193c:	20400924 	.word	0x20400924
  401940:	004017d1 	.word	0x004017d1
  401944:	00401829 	.word	0x00401829

00401948 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  401948:	b580      	push	{r7, lr}
  40194a:	b084      	sub	sp, #16
  40194c:	af00      	add	r7, sp, #0
  40194e:	4603      	mov	r3, r0
  401950:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  401952:	79fb      	ldrb	r3, [r7, #7]
  401954:	4a0a      	ldr	r2, [pc, #40]	; (401980 <sleepmgr_unlock_mode+0x38>)
  401956:	5cd3      	ldrb	r3, [r2, r3]
  401958:	2b00      	cmp	r3, #0
  40195a:	d100      	bne.n	40195e <sleepmgr_unlock_mode+0x16>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
  40195c:	e7fe      	b.n	40195c <sleepmgr_unlock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40195e:	4b09      	ldr	r3, [pc, #36]	; (401984 <sleepmgr_unlock_mode+0x3c>)
  401960:	4798      	blx	r3
  401962:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  401964:	79fb      	ldrb	r3, [r7, #7]
  401966:	4a06      	ldr	r2, [pc, #24]	; (401980 <sleepmgr_unlock_mode+0x38>)
  401968:	5cd2      	ldrb	r2, [r2, r3]
  40196a:	3a01      	subs	r2, #1
  40196c:	b2d1      	uxtb	r1, r2
  40196e:	4a04      	ldr	r2, [pc, #16]	; (401980 <sleepmgr_unlock_mode+0x38>)
  401970:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401972:	68f8      	ldr	r0, [r7, #12]
  401974:	4b04      	ldr	r3, [pc, #16]	; (401988 <sleepmgr_unlock_mode+0x40>)
  401976:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401978:	bf00      	nop
  40197a:	3710      	adds	r7, #16
  40197c:	46bd      	mov	sp, r7
  40197e:	bd80      	pop	{r7, pc}
  401980:	20400924 	.word	0x20400924
  401984:	004017d1 	.word	0x004017d1
  401988:	00401829 	.word	0x00401829

0040198c <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
  40198c:	b480      	push	{r7}
  40198e:	b083      	sub	sp, #12
  401990:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
  401992:	2300      	movs	r3, #0
  401994:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
  401996:	4b0a      	ldr	r3, [pc, #40]	; (4019c0 <sleepmgr_get_sleep_mode+0x34>)
  401998:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
  40199a:	e005      	b.n	4019a8 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
  40199c:	683b      	ldr	r3, [r7, #0]
  40199e:	3301      	adds	r3, #1
  4019a0:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  4019a2:	79fb      	ldrb	r3, [r7, #7]
  4019a4:	3301      	adds	r3, #1
  4019a6:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
  4019a8:	683b      	ldr	r3, [r7, #0]
  4019aa:	781b      	ldrb	r3, [r3, #0]
  4019ac:	2b00      	cmp	r3, #0
  4019ae:	d0f5      	beq.n	40199c <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
  4019b0:	79fb      	ldrb	r3, [r7, #7]
}
  4019b2:	4618      	mov	r0, r3
  4019b4:	370c      	adds	r7, #12
  4019b6:	46bd      	mov	sp, r7
  4019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019bc:	4770      	bx	lr
  4019be:	bf00      	nop
  4019c0:	20400924 	.word	0x20400924

004019c4 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
  4019c4:	b580      	push	{r7, lr}
  4019c6:	b082      	sub	sp, #8
  4019c8:	af00      	add	r7, sp, #0
  4019ca:	b672      	cpsid	i
  4019cc:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  4019d0:	4b0b      	ldr	r3, [pc, #44]	; (401a00 <sleepmgr_enter_sleep+0x3c>)
  4019d2:	2200      	movs	r2, #0
  4019d4:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
  4019d6:	4b0b      	ldr	r3, [pc, #44]	; (401a04 <sleepmgr_enter_sleep+0x40>)
  4019d8:	4798      	blx	r3
  4019da:	4603      	mov	r3, r0
  4019dc:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  4019de:	79fb      	ldrb	r3, [r7, #7]
  4019e0:	2b00      	cmp	r3, #0
  4019e2:	d106      	bne.n	4019f2 <sleepmgr_enter_sleep+0x2e>
		cpu_irq_enable();
  4019e4:	4b06      	ldr	r3, [pc, #24]	; (401a00 <sleepmgr_enter_sleep+0x3c>)
  4019e6:	2201      	movs	r2, #1
  4019e8:	701a      	strb	r2, [r3, #0]
  4019ea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4019ee:	b662      	cpsie	i
		return;
  4019f0:	e003      	b.n	4019fa <sleepmgr_enter_sleep+0x36>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
  4019f2:	79fb      	ldrb	r3, [r7, #7]
  4019f4:	4618      	mov	r0, r3
  4019f6:	4b04      	ldr	r3, [pc, #16]	; (401a08 <sleepmgr_enter_sleep+0x44>)
  4019f8:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  4019fa:	3708      	adds	r7, #8
  4019fc:	46bd      	mov	sp, r7
  4019fe:	bd80      	pop	{r7, pc}
  401a00:	20400000 	.word	0x20400000
  401a04:	0040198d 	.word	0x0040198d
  401a08:	0040189d 	.word	0x0040189d

00401a0c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401a0c:	b580      	push	{r7, lr}
  401a0e:	b08c      	sub	sp, #48	; 0x30
  401a10:	af00      	add	r7, sp, #0
  401a12:	6078      	str	r0, [r7, #4]
  401a14:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401a16:	4b49      	ldr	r3, [pc, #292]	; (401b3c <usart_serial_init+0x130>)
  401a18:	4798      	blx	r3
  401a1a:	4603      	mov	r3, r0
  401a1c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401a1e:	683b      	ldr	r3, [r7, #0]
  401a20:	681b      	ldr	r3, [r3, #0]
  401a22:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401a24:	683b      	ldr	r3, [r7, #0]
  401a26:	689b      	ldr	r3, [r3, #8]
  401a28:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401a2a:	683b      	ldr	r3, [r7, #0]
  401a2c:	681b      	ldr	r3, [r3, #0]
  401a2e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401a30:	683b      	ldr	r3, [r7, #0]
  401a32:	685b      	ldr	r3, [r3, #4]
  401a34:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401a36:	683b      	ldr	r3, [r7, #0]
  401a38:	689b      	ldr	r3, [r3, #8]
  401a3a:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401a3c:	683b      	ldr	r3, [r7, #0]
  401a3e:	68db      	ldr	r3, [r3, #12]
  401a40:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401a42:	2300      	movs	r3, #0
  401a44:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401a46:	687b      	ldr	r3, [r7, #4]
  401a48:	4a3d      	ldr	r2, [pc, #244]	; (401b40 <usart_serial_init+0x134>)
  401a4a:	4293      	cmp	r3, r2
  401a4c:	d108      	bne.n	401a60 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401a4e:	2007      	movs	r0, #7
  401a50:	4b3c      	ldr	r3, [pc, #240]	; (401b44 <usart_serial_init+0x138>)
  401a52:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401a58:	4619      	mov	r1, r3
  401a5a:	6878      	ldr	r0, [r7, #4]
  401a5c:	4b3a      	ldr	r3, [pc, #232]	; (401b48 <usart_serial_init+0x13c>)
  401a5e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401a60:	687b      	ldr	r3, [r7, #4]
  401a62:	4a3a      	ldr	r2, [pc, #232]	; (401b4c <usart_serial_init+0x140>)
  401a64:	4293      	cmp	r3, r2
  401a66:	d108      	bne.n	401a7a <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401a68:	2008      	movs	r0, #8
  401a6a:	4b36      	ldr	r3, [pc, #216]	; (401b44 <usart_serial_init+0x138>)
  401a6c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401a72:	4619      	mov	r1, r3
  401a74:	6878      	ldr	r0, [r7, #4]
  401a76:	4b34      	ldr	r3, [pc, #208]	; (401b48 <usart_serial_init+0x13c>)
  401a78:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401a7a:	687b      	ldr	r3, [r7, #4]
  401a7c:	4a34      	ldr	r2, [pc, #208]	; (401b50 <usart_serial_init+0x144>)
  401a7e:	4293      	cmp	r3, r2
  401a80:	d108      	bne.n	401a94 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401a82:	202c      	movs	r0, #44	; 0x2c
  401a84:	4b2f      	ldr	r3, [pc, #188]	; (401b44 <usart_serial_init+0x138>)
  401a86:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401a8c:	4619      	mov	r1, r3
  401a8e:	6878      	ldr	r0, [r7, #4]
  401a90:	4b2d      	ldr	r3, [pc, #180]	; (401b48 <usart_serial_init+0x13c>)
  401a92:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401a94:	687b      	ldr	r3, [r7, #4]
  401a96:	4a2f      	ldr	r2, [pc, #188]	; (401b54 <usart_serial_init+0x148>)
  401a98:	4293      	cmp	r3, r2
  401a9a:	d108      	bne.n	401aae <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401a9c:	202d      	movs	r0, #45	; 0x2d
  401a9e:	4b29      	ldr	r3, [pc, #164]	; (401b44 <usart_serial_init+0x138>)
  401aa0:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401aa6:	4619      	mov	r1, r3
  401aa8:	6878      	ldr	r0, [r7, #4]
  401aaa:	4b27      	ldr	r3, [pc, #156]	; (401b48 <usart_serial_init+0x13c>)
  401aac:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401aae:	687b      	ldr	r3, [r7, #4]
  401ab0:	4a29      	ldr	r2, [pc, #164]	; (401b58 <usart_serial_init+0x14c>)
  401ab2:	4293      	cmp	r3, r2
  401ab4:	d111      	bne.n	401ada <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401ab6:	200d      	movs	r0, #13
  401ab8:	4b22      	ldr	r3, [pc, #136]	; (401b44 <usart_serial_init+0x138>)
  401aba:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401abc:	4b1f      	ldr	r3, [pc, #124]	; (401b3c <usart_serial_init+0x130>)
  401abe:	4798      	blx	r3
  401ac0:	4602      	mov	r2, r0
  401ac2:	f107 030c 	add.w	r3, r7, #12
  401ac6:	4619      	mov	r1, r3
  401ac8:	6878      	ldr	r0, [r7, #4]
  401aca:	4b24      	ldr	r3, [pc, #144]	; (401b5c <usart_serial_init+0x150>)
  401acc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401ace:	6878      	ldr	r0, [r7, #4]
  401ad0:	4b23      	ldr	r3, [pc, #140]	; (401b60 <usart_serial_init+0x154>)
  401ad2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401ad4:	6878      	ldr	r0, [r7, #4]
  401ad6:	4b23      	ldr	r3, [pc, #140]	; (401b64 <usart_serial_init+0x158>)
  401ad8:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401ada:	687b      	ldr	r3, [r7, #4]
  401adc:	4a22      	ldr	r2, [pc, #136]	; (401b68 <usart_serial_init+0x15c>)
  401ade:	4293      	cmp	r3, r2
  401ae0:	d111      	bne.n	401b06 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401ae2:	200e      	movs	r0, #14
  401ae4:	4b17      	ldr	r3, [pc, #92]	; (401b44 <usart_serial_init+0x138>)
  401ae6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401ae8:	4b14      	ldr	r3, [pc, #80]	; (401b3c <usart_serial_init+0x130>)
  401aea:	4798      	blx	r3
  401aec:	4602      	mov	r2, r0
  401aee:	f107 030c 	add.w	r3, r7, #12
  401af2:	4619      	mov	r1, r3
  401af4:	6878      	ldr	r0, [r7, #4]
  401af6:	4b19      	ldr	r3, [pc, #100]	; (401b5c <usart_serial_init+0x150>)
  401af8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401afa:	6878      	ldr	r0, [r7, #4]
  401afc:	4b18      	ldr	r3, [pc, #96]	; (401b60 <usart_serial_init+0x154>)
  401afe:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401b00:	6878      	ldr	r0, [r7, #4]
  401b02:	4b18      	ldr	r3, [pc, #96]	; (401b64 <usart_serial_init+0x158>)
  401b04:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401b06:	687b      	ldr	r3, [r7, #4]
  401b08:	4a18      	ldr	r2, [pc, #96]	; (401b6c <usart_serial_init+0x160>)
  401b0a:	4293      	cmp	r3, r2
  401b0c:	d111      	bne.n	401b32 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  401b0e:	200f      	movs	r0, #15
  401b10:	4b0c      	ldr	r3, [pc, #48]	; (401b44 <usart_serial_init+0x138>)
  401b12:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401b14:	4b09      	ldr	r3, [pc, #36]	; (401b3c <usart_serial_init+0x130>)
  401b16:	4798      	blx	r3
  401b18:	4602      	mov	r2, r0
  401b1a:	f107 030c 	add.w	r3, r7, #12
  401b1e:	4619      	mov	r1, r3
  401b20:	6878      	ldr	r0, [r7, #4]
  401b22:	4b0e      	ldr	r3, [pc, #56]	; (401b5c <usart_serial_init+0x150>)
  401b24:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401b26:	6878      	ldr	r0, [r7, #4]
  401b28:	4b0d      	ldr	r3, [pc, #52]	; (401b60 <usart_serial_init+0x154>)
  401b2a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401b2c:	6878      	ldr	r0, [r7, #4]
  401b2e:	4b0d      	ldr	r3, [pc, #52]	; (401b64 <usart_serial_init+0x158>)
  401b30:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401b32:	bf00      	nop
  401b34:	3730      	adds	r7, #48	; 0x30
  401b36:	46bd      	mov	sp, r7
  401b38:	bd80      	pop	{r7, pc}
  401b3a:	bf00      	nop
  401b3c:	0040186d 	.word	0x0040186d
  401b40:	400e0800 	.word	0x400e0800
  401b44:	00401881 	.word	0x00401881
  401b48:	00400fa1 	.word	0x00400fa1
  401b4c:	400e0a00 	.word	0x400e0a00
  401b50:	400e1a00 	.word	0x400e1a00
  401b54:	400e1c00 	.word	0x400e1c00
  401b58:	40024000 	.word	0x40024000
  401b5c:	0040113d 	.word	0x0040113d
  401b60:	004011c1 	.word	0x004011c1
  401b64:	004011f9 	.word	0x004011f9
  401b68:	40028000 	.word	0x40028000
  401b6c:	4002c000 	.word	0x4002c000

00401b70 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401b70:	b580      	push	{r7, lr}
  401b72:	b082      	sub	sp, #8
  401b74:	af00      	add	r7, sp, #0
  401b76:	6078      	str	r0, [r7, #4]
  401b78:	460b      	mov	r3, r1
  401b7a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401b7c:	687b      	ldr	r3, [r7, #4]
  401b7e:	4a36      	ldr	r2, [pc, #216]	; (401c58 <usart_serial_putchar+0xe8>)
  401b80:	4293      	cmp	r3, r2
  401b82:	d10a      	bne.n	401b9a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401b84:	bf00      	nop
  401b86:	78fb      	ldrb	r3, [r7, #3]
  401b88:	4619      	mov	r1, r3
  401b8a:	6878      	ldr	r0, [r7, #4]
  401b8c:	4b33      	ldr	r3, [pc, #204]	; (401c5c <usart_serial_putchar+0xec>)
  401b8e:	4798      	blx	r3
  401b90:	4603      	mov	r3, r0
  401b92:	2b00      	cmp	r3, #0
  401b94:	d1f7      	bne.n	401b86 <usart_serial_putchar+0x16>
		return 1;
  401b96:	2301      	movs	r3, #1
  401b98:	e05a      	b.n	401c50 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401b9a:	687b      	ldr	r3, [r7, #4]
  401b9c:	4a30      	ldr	r2, [pc, #192]	; (401c60 <usart_serial_putchar+0xf0>)
  401b9e:	4293      	cmp	r3, r2
  401ba0:	d10a      	bne.n	401bb8 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401ba2:	bf00      	nop
  401ba4:	78fb      	ldrb	r3, [r7, #3]
  401ba6:	4619      	mov	r1, r3
  401ba8:	6878      	ldr	r0, [r7, #4]
  401baa:	4b2c      	ldr	r3, [pc, #176]	; (401c5c <usart_serial_putchar+0xec>)
  401bac:	4798      	blx	r3
  401bae:	4603      	mov	r3, r0
  401bb0:	2b00      	cmp	r3, #0
  401bb2:	d1f7      	bne.n	401ba4 <usart_serial_putchar+0x34>
		return 1;
  401bb4:	2301      	movs	r3, #1
  401bb6:	e04b      	b.n	401c50 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	4a2a      	ldr	r2, [pc, #168]	; (401c64 <usart_serial_putchar+0xf4>)
  401bbc:	4293      	cmp	r3, r2
  401bbe:	d10a      	bne.n	401bd6 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401bc0:	bf00      	nop
  401bc2:	78fb      	ldrb	r3, [r7, #3]
  401bc4:	4619      	mov	r1, r3
  401bc6:	6878      	ldr	r0, [r7, #4]
  401bc8:	4b24      	ldr	r3, [pc, #144]	; (401c5c <usart_serial_putchar+0xec>)
  401bca:	4798      	blx	r3
  401bcc:	4603      	mov	r3, r0
  401bce:	2b00      	cmp	r3, #0
  401bd0:	d1f7      	bne.n	401bc2 <usart_serial_putchar+0x52>
		return 1;
  401bd2:	2301      	movs	r3, #1
  401bd4:	e03c      	b.n	401c50 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401bd6:	687b      	ldr	r3, [r7, #4]
  401bd8:	4a23      	ldr	r2, [pc, #140]	; (401c68 <usart_serial_putchar+0xf8>)
  401bda:	4293      	cmp	r3, r2
  401bdc:	d10a      	bne.n	401bf4 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401bde:	bf00      	nop
  401be0:	78fb      	ldrb	r3, [r7, #3]
  401be2:	4619      	mov	r1, r3
  401be4:	6878      	ldr	r0, [r7, #4]
  401be6:	4b1d      	ldr	r3, [pc, #116]	; (401c5c <usart_serial_putchar+0xec>)
  401be8:	4798      	blx	r3
  401bea:	4603      	mov	r3, r0
  401bec:	2b00      	cmp	r3, #0
  401bee:	d1f7      	bne.n	401be0 <usart_serial_putchar+0x70>
		return 1;
  401bf0:	2301      	movs	r3, #1
  401bf2:	e02d      	b.n	401c50 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401bf4:	687b      	ldr	r3, [r7, #4]
  401bf6:	4a1d      	ldr	r2, [pc, #116]	; (401c6c <usart_serial_putchar+0xfc>)
  401bf8:	4293      	cmp	r3, r2
  401bfa:	d10a      	bne.n	401c12 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401bfc:	bf00      	nop
  401bfe:	78fb      	ldrb	r3, [r7, #3]
  401c00:	4619      	mov	r1, r3
  401c02:	6878      	ldr	r0, [r7, #4]
  401c04:	4b1a      	ldr	r3, [pc, #104]	; (401c70 <usart_serial_putchar+0x100>)
  401c06:	4798      	blx	r3
  401c08:	4603      	mov	r3, r0
  401c0a:	2b00      	cmp	r3, #0
  401c0c:	d1f7      	bne.n	401bfe <usart_serial_putchar+0x8e>
		return 1;
  401c0e:	2301      	movs	r3, #1
  401c10:	e01e      	b.n	401c50 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401c12:	687b      	ldr	r3, [r7, #4]
  401c14:	4a17      	ldr	r2, [pc, #92]	; (401c74 <usart_serial_putchar+0x104>)
  401c16:	4293      	cmp	r3, r2
  401c18:	d10a      	bne.n	401c30 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401c1a:	bf00      	nop
  401c1c:	78fb      	ldrb	r3, [r7, #3]
  401c1e:	4619      	mov	r1, r3
  401c20:	6878      	ldr	r0, [r7, #4]
  401c22:	4b13      	ldr	r3, [pc, #76]	; (401c70 <usart_serial_putchar+0x100>)
  401c24:	4798      	blx	r3
  401c26:	4603      	mov	r3, r0
  401c28:	2b00      	cmp	r3, #0
  401c2a:	d1f7      	bne.n	401c1c <usart_serial_putchar+0xac>
		return 1;
  401c2c:	2301      	movs	r3, #1
  401c2e:	e00f      	b.n	401c50 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401c30:	687b      	ldr	r3, [r7, #4]
  401c32:	4a11      	ldr	r2, [pc, #68]	; (401c78 <usart_serial_putchar+0x108>)
  401c34:	4293      	cmp	r3, r2
  401c36:	d10a      	bne.n	401c4e <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401c38:	bf00      	nop
  401c3a:	78fb      	ldrb	r3, [r7, #3]
  401c3c:	4619      	mov	r1, r3
  401c3e:	6878      	ldr	r0, [r7, #4]
  401c40:	4b0b      	ldr	r3, [pc, #44]	; (401c70 <usart_serial_putchar+0x100>)
  401c42:	4798      	blx	r3
  401c44:	4603      	mov	r3, r0
  401c46:	2b00      	cmp	r3, #0
  401c48:	d1f7      	bne.n	401c3a <usart_serial_putchar+0xca>
		return 1;
  401c4a:	2301      	movs	r3, #1
  401c4c:	e000      	b.n	401c50 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401c4e:	2300      	movs	r3, #0
}
  401c50:	4618      	mov	r0, r3
  401c52:	3708      	adds	r7, #8
  401c54:	46bd      	mov	sp, r7
  401c56:	bd80      	pop	{r7, pc}
  401c58:	400e0800 	.word	0x400e0800
  401c5c:	00400ff9 	.word	0x00400ff9
  401c60:	400e0a00 	.word	0x400e0a00
  401c64:	400e1a00 	.word	0x400e1a00
  401c68:	400e1c00 	.word	0x400e1c00
  401c6c:	40024000 	.word	0x40024000
  401c70:	00401269 	.word	0x00401269
  401c74:	40028000 	.word	0x40028000
  401c78:	4002c000 	.word	0x4002c000

00401c7c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401c7c:	b580      	push	{r7, lr}
  401c7e:	b084      	sub	sp, #16
  401c80:	af00      	add	r7, sp, #0
  401c82:	6078      	str	r0, [r7, #4]
  401c84:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401c86:	2300      	movs	r3, #0
  401c88:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c8a:	687b      	ldr	r3, [r7, #4]
  401c8c:	4a34      	ldr	r2, [pc, #208]	; (401d60 <usart_serial_getchar+0xe4>)
  401c8e:	4293      	cmp	r3, r2
  401c90:	d107      	bne.n	401ca2 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401c92:	bf00      	nop
  401c94:	6839      	ldr	r1, [r7, #0]
  401c96:	6878      	ldr	r0, [r7, #4]
  401c98:	4b32      	ldr	r3, [pc, #200]	; (401d64 <usart_serial_getchar+0xe8>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b00      	cmp	r3, #0
  401ca0:	d1f8      	bne.n	401c94 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401ca2:	687b      	ldr	r3, [r7, #4]
  401ca4:	4a30      	ldr	r2, [pc, #192]	; (401d68 <usart_serial_getchar+0xec>)
  401ca6:	4293      	cmp	r3, r2
  401ca8:	d107      	bne.n	401cba <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401caa:	bf00      	nop
  401cac:	6839      	ldr	r1, [r7, #0]
  401cae:	6878      	ldr	r0, [r7, #4]
  401cb0:	4b2c      	ldr	r3, [pc, #176]	; (401d64 <usart_serial_getchar+0xe8>)
  401cb2:	4798      	blx	r3
  401cb4:	4603      	mov	r3, r0
  401cb6:	2b00      	cmp	r3, #0
  401cb8:	d1f8      	bne.n	401cac <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401cba:	687b      	ldr	r3, [r7, #4]
  401cbc:	4a2b      	ldr	r2, [pc, #172]	; (401d6c <usart_serial_getchar+0xf0>)
  401cbe:	4293      	cmp	r3, r2
  401cc0:	d107      	bne.n	401cd2 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401cc2:	bf00      	nop
  401cc4:	6839      	ldr	r1, [r7, #0]
  401cc6:	6878      	ldr	r0, [r7, #4]
  401cc8:	4b26      	ldr	r3, [pc, #152]	; (401d64 <usart_serial_getchar+0xe8>)
  401cca:	4798      	blx	r3
  401ccc:	4603      	mov	r3, r0
  401cce:	2b00      	cmp	r3, #0
  401cd0:	d1f8      	bne.n	401cc4 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401cd2:	687b      	ldr	r3, [r7, #4]
  401cd4:	4a26      	ldr	r2, [pc, #152]	; (401d70 <usart_serial_getchar+0xf4>)
  401cd6:	4293      	cmp	r3, r2
  401cd8:	d107      	bne.n	401cea <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401cda:	bf00      	nop
  401cdc:	6839      	ldr	r1, [r7, #0]
  401cde:	6878      	ldr	r0, [r7, #4]
  401ce0:	4b20      	ldr	r3, [pc, #128]	; (401d64 <usart_serial_getchar+0xe8>)
  401ce2:	4798      	blx	r3
  401ce4:	4603      	mov	r3, r0
  401ce6:	2b00      	cmp	r3, #0
  401ce8:	d1f8      	bne.n	401cdc <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401cea:	687b      	ldr	r3, [r7, #4]
  401cec:	4a21      	ldr	r2, [pc, #132]	; (401d74 <usart_serial_getchar+0xf8>)
  401cee:	4293      	cmp	r3, r2
  401cf0:	d10d      	bne.n	401d0e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401cf2:	bf00      	nop
  401cf4:	f107 030c 	add.w	r3, r7, #12
  401cf8:	4619      	mov	r1, r3
  401cfa:	6878      	ldr	r0, [r7, #4]
  401cfc:	4b1e      	ldr	r3, [pc, #120]	; (401d78 <usart_serial_getchar+0xfc>)
  401cfe:	4798      	blx	r3
  401d00:	4603      	mov	r3, r0
  401d02:	2b00      	cmp	r3, #0
  401d04:	d1f6      	bne.n	401cf4 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	b2da      	uxtb	r2, r3
  401d0a:	683b      	ldr	r3, [r7, #0]
  401d0c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401d0e:	687b      	ldr	r3, [r7, #4]
  401d10:	4a1a      	ldr	r2, [pc, #104]	; (401d7c <usart_serial_getchar+0x100>)
  401d12:	4293      	cmp	r3, r2
  401d14:	d10d      	bne.n	401d32 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401d16:	bf00      	nop
  401d18:	f107 030c 	add.w	r3, r7, #12
  401d1c:	4619      	mov	r1, r3
  401d1e:	6878      	ldr	r0, [r7, #4]
  401d20:	4b15      	ldr	r3, [pc, #84]	; (401d78 <usart_serial_getchar+0xfc>)
  401d22:	4798      	blx	r3
  401d24:	4603      	mov	r3, r0
  401d26:	2b00      	cmp	r3, #0
  401d28:	d1f6      	bne.n	401d18 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401d2a:	68fb      	ldr	r3, [r7, #12]
  401d2c:	b2da      	uxtb	r2, r3
  401d2e:	683b      	ldr	r3, [r7, #0]
  401d30:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401d32:	687b      	ldr	r3, [r7, #4]
  401d34:	4a12      	ldr	r2, [pc, #72]	; (401d80 <usart_serial_getchar+0x104>)
  401d36:	4293      	cmp	r3, r2
  401d38:	d10d      	bne.n	401d56 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401d3a:	bf00      	nop
  401d3c:	f107 030c 	add.w	r3, r7, #12
  401d40:	4619      	mov	r1, r3
  401d42:	6878      	ldr	r0, [r7, #4]
  401d44:	4b0c      	ldr	r3, [pc, #48]	; (401d78 <usart_serial_getchar+0xfc>)
  401d46:	4798      	blx	r3
  401d48:	4603      	mov	r3, r0
  401d4a:	2b00      	cmp	r3, #0
  401d4c:	d1f6      	bne.n	401d3c <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401d4e:	68fb      	ldr	r3, [r7, #12]
  401d50:	b2da      	uxtb	r2, r3
  401d52:	683b      	ldr	r3, [r7, #0]
  401d54:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401d56:	bf00      	nop
  401d58:	3710      	adds	r7, #16
  401d5a:	46bd      	mov	sp, r7
  401d5c:	bd80      	pop	{r7, pc}
  401d5e:	bf00      	nop
  401d60:	400e0800 	.word	0x400e0800
  401d64:	00401029 	.word	0x00401029
  401d68:	400e0a00 	.word	0x400e0a00
  401d6c:	400e1a00 	.word	0x400e1a00
  401d70:	400e1c00 	.word	0x400e1c00
  401d74:	40024000 	.word	0x40024000
  401d78:	0040129d 	.word	0x0040129d
  401d7c:	40028000 	.word	0x40028000
  401d80:	4002c000 	.word	0x4002c000

00401d84 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401d84:	b580      	push	{r7, lr}
  401d86:	b082      	sub	sp, #8
  401d88:	af00      	add	r7, sp, #0
  401d8a:	6078      	str	r0, [r7, #4]
  401d8c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401d8e:	4a0f      	ldr	r2, [pc, #60]	; (401dcc <stdio_serial_init+0x48>)
  401d90:	687b      	ldr	r3, [r7, #4]
  401d92:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401d94:	4b0e      	ldr	r3, [pc, #56]	; (401dd0 <stdio_serial_init+0x4c>)
  401d96:	4a0f      	ldr	r2, [pc, #60]	; (401dd4 <stdio_serial_init+0x50>)
  401d98:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401d9a:	4b0f      	ldr	r3, [pc, #60]	; (401dd8 <stdio_serial_init+0x54>)
  401d9c:	4a0f      	ldr	r2, [pc, #60]	; (401ddc <stdio_serial_init+0x58>)
  401d9e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401da0:	6839      	ldr	r1, [r7, #0]
  401da2:	6878      	ldr	r0, [r7, #4]
  401da4:	4b0e      	ldr	r3, [pc, #56]	; (401de0 <stdio_serial_init+0x5c>)
  401da6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401da8:	4b0e      	ldr	r3, [pc, #56]	; (401de4 <stdio_serial_init+0x60>)
  401daa:	681b      	ldr	r3, [r3, #0]
  401dac:	689b      	ldr	r3, [r3, #8]
  401dae:	2100      	movs	r1, #0
  401db0:	4618      	mov	r0, r3
  401db2:	4b0d      	ldr	r3, [pc, #52]	; (401de8 <stdio_serial_init+0x64>)
  401db4:	4798      	blx	r3
	setbuf(stdin, NULL);
  401db6:	4b0b      	ldr	r3, [pc, #44]	; (401de4 <stdio_serial_init+0x60>)
  401db8:	681b      	ldr	r3, [r3, #0]
  401dba:	685b      	ldr	r3, [r3, #4]
  401dbc:	2100      	movs	r1, #0
  401dbe:	4618      	mov	r0, r3
  401dc0:	4b09      	ldr	r3, [pc, #36]	; (401de8 <stdio_serial_init+0x64>)
  401dc2:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401dc4:	bf00      	nop
  401dc6:	3708      	adds	r7, #8
  401dc8:	46bd      	mov	sp, r7
  401dca:	bd80      	pop	{r7, pc}
  401dcc:	20400934 	.word	0x20400934
  401dd0:	20400930 	.word	0x20400930
  401dd4:	00401b71 	.word	0x00401b71
  401dd8:	2040092c 	.word	0x2040092c
  401ddc:	00401c7d 	.word	0x00401c7d
  401de0:	00401a0d 	.word	0x00401a0d
  401de4:	20400438 	.word	0x20400438
  401de8:	004020c9 	.word	0x004020c9

00401dec <RTT_Handler>:


int count = 0;

void RTT_Handler(void)
{	
  401dec:	b580      	push	{r7, lr}
  401dee:	af00      	add	r7, sp, #0
	
	rtt_get_status(RTT);
  401df0:	480a      	ldr	r0, [pc, #40]	; (401e1c <RTT_Handler+0x30>)
  401df2:	4b0b      	ldr	r3, [pc, #44]	; (401e20 <RTT_Handler+0x34>)
  401df4:	4798      	blx	r3
	if (count == 1){
  401df6:	4b0b      	ldr	r3, [pc, #44]	; (401e24 <RTT_Handler+0x38>)
  401df8:	681b      	ldr	r3, [r3, #0]
  401dfa:	2b01      	cmp	r3, #1
  401dfc:	d106      	bne.n	401e0c <RTT_Handler+0x20>
		LED_init(1);
  401dfe:	2001      	movs	r0, #1
  401e00:	4b09      	ldr	r3, [pc, #36]	; (401e28 <RTT_Handler+0x3c>)
  401e02:	4798      	blx	r3
		count = 0;
  401e04:	4b07      	ldr	r3, [pc, #28]	; (401e24 <RTT_Handler+0x38>)
  401e06:	2200      	movs	r2, #0
  401e08:	601a      	str	r2, [r3, #0]
	}else{
		LED_init(1);
		count = 0;
	}
}
  401e0a:	e005      	b.n	401e18 <RTT_Handler+0x2c>
	rtt_get_status(RTT);
	if (count == 1){
		LED_init(1);
		count = 0;
	}else{
		LED_init(1);
  401e0c:	2001      	movs	r0, #1
  401e0e:	4b06      	ldr	r3, [pc, #24]	; (401e28 <RTT_Handler+0x3c>)
  401e10:	4798      	blx	r3
		count = 0;
  401e12:	4b04      	ldr	r3, [pc, #16]	; (401e24 <RTT_Handler+0x38>)
  401e14:	2200      	movs	r2, #0
  401e16:	601a      	str	r2, [r3, #0]
	}
}
  401e18:	bf00      	nop
  401e1a:	bd80      	pop	{r7, pc}
  401e1c:	400e1830 	.word	0x400e1830
  401e20:	00400eed 	.word	0x00400eed
  401e24:	204008ec 	.word	0x204008ec
  401e28:	00401e2d 	.word	0x00401e2d

00401e2c <LED_init>:


/**
 * @Brief Inicializa o pino do LED
 */
void LED_init(int estado){
  401e2c:	b590      	push	{r4, r7, lr}
  401e2e:	b085      	sub	sp, #20
  401e30:	af02      	add	r7, sp, #8
  401e32:	6078      	str	r0, [r7, #4]
    pmc_enable_periph_clk(LED_PIO_ID);
  401e34:	200c      	movs	r0, #12
  401e36:	4b07      	ldr	r3, [pc, #28]	; (401e54 <LED_init+0x28>)
  401e38:	4798      	blx	r3
    pio_set_output(LED_PIO, LED_PIN_MASK, estado, 0, 0 );
  401e3a:	687a      	ldr	r2, [r7, #4]
  401e3c:	2300      	movs	r3, #0
  401e3e:	9300      	str	r3, [sp, #0]
  401e40:	2300      	movs	r3, #0
  401e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401e46:	4804      	ldr	r0, [pc, #16]	; (401e58 <LED_init+0x2c>)
  401e48:	4c04      	ldr	r4, [pc, #16]	; (401e5c <LED_init+0x30>)
  401e4a:	47a0      	blx	r4
	
};
  401e4c:	bf00      	nop
  401e4e:	370c      	adds	r7, #12
  401e50:	46bd      	mov	sp, r7
  401e52:	bd90      	pop	{r4, r7, pc}
  401e54:	00400921 	.word	0x00400921
  401e58:	400e1200 	.word	0x400e1200
  401e5c:	00400539 	.word	0x00400539

00401e60 <USART1_init>:
    

/**
 * \brief Configure UART console.
 */
static void USART1_init(void){
  401e60:	b580      	push	{r7, lr}
  401e62:	b086      	sub	sp, #24
  401e64:	af00      	add	r7, sp, #0
  
  /* Configura USART1 Pinos */
 sysclk_enable_peripheral_clock(ID_PIOB);
  401e66:	200b      	movs	r0, #11
  401e68:	4b1a      	ldr	r3, [pc, #104]	; (401ed4 <USART1_init+0x74>)
  401e6a:	4798      	blx	r3
 sysclk_enable_peripheral_clock(ID_PIOA);
  401e6c:	200a      	movs	r0, #10
  401e6e:	4b19      	ldr	r3, [pc, #100]	; (401ed4 <USART1_init+0x74>)
  401e70:	4798      	blx	r3
 pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  401e72:	2210      	movs	r2, #16
  401e74:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401e78:	4817      	ldr	r0, [pc, #92]	; (401ed8 <USART1_init+0x78>)
  401e7a:	4b18      	ldr	r3, [pc, #96]	; (401edc <USART1_init+0x7c>)
  401e7c:	4798      	blx	r3
 pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  401e7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401e82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e86:	4816      	ldr	r0, [pc, #88]	; (401ee0 <USART1_init+0x80>)
  401e88:	4b14      	ldr	r3, [pc, #80]	; (401edc <USART1_init+0x7c>)
  401e8a:	4798      	blx	r3
 MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401e8c:	4a15      	ldr	r2, [pc, #84]	; (401ee4 <USART1_init+0x84>)
  401e8e:	4b15      	ldr	r3, [pc, #84]	; (401ee4 <USART1_init+0x84>)
  401e90:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  401e94:	f043 0310 	orr.w	r3, r3, #16
  401e98:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  
  /* Configura opcoes USART */
  const sam_usart_opt_t usart_settings = {
  401e9c:	463b      	mov	r3, r7
  401e9e:	2200      	movs	r2, #0
  401ea0:	601a      	str	r2, [r3, #0]
  401ea2:	605a      	str	r2, [r3, #4]
  401ea4:	609a      	str	r2, [r3, #8]
  401ea6:	60da      	str	r2, [r3, #12]
  401ea8:	611a      	str	r2, [r3, #16]
  401eaa:	615a      	str	r2, [r3, #20]
  401eac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401eb0:	603b      	str	r3, [r7, #0]
  401eb2:	23c0      	movs	r3, #192	; 0xc0
  401eb4:	607b      	str	r3, [r7, #4]
  401eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401eba:	60bb      	str	r3, [r7, #8]
    .stop_bits    = US_MR_NBSTOP_1_BIT    ,
    .channel_mode = US_MR_CHMODE_NORMAL
  };

  /* Ativa Clock periferico USART0 */
  sysclk_enable_peripheral_clock(USART_COM_ID); 
  401ebc:	200e      	movs	r0, #14
  401ebe:	4b05      	ldr	r3, [pc, #20]	; (401ed4 <USART1_init+0x74>)
  401ec0:	4798      	blx	r3
 	stdio_serial_init(CONF_UART, &usart_settings);
  401ec2:	463b      	mov	r3, r7
  401ec4:	4619      	mov	r1, r3
  401ec6:	4808      	ldr	r0, [pc, #32]	; (401ee8 <USART1_init+0x88>)
  401ec8:	4b08      	ldr	r3, [pc, #32]	; (401eec <USART1_init+0x8c>)
  401eca:	4798      	blx	r3

 }
  401ecc:	bf00      	nop
  401ece:	3718      	adds	r7, #24
  401ed0:	46bd      	mov	sp, r7
  401ed2:	bd80      	pop	{r7, pc}
  401ed4:	00401881 	.word	0x00401881
  401ed8:	400e1000 	.word	0x400e1000
  401edc:	00400429 	.word	0x00400429
  401ee0:	400e0e00 	.word	0x400e0e00
  401ee4:	40088000 	.word	0x40088000
  401ee8:	40028000 	.word	0x40028000
  401eec:	00401d85 	.word	0x00401d85

00401ef0 <main>:

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  401ef0:	b580      	push	{r7, lr}
  401ef2:	b082      	sub	sp, #8
  401ef4:	af00      	add	r7, sp, #0
	//pmc_enable_periph_clk(ID_TC1);

	
	
	
	enum sleepmgr_mode current_sleep_mode = SLEEPMGR_ACTIVE;
  401ef6:	2300      	movs	r3, #0
  401ef8:	71fb      	strb	r3, [r7, #7]
	/* Initialize the SAM system */
	sysclk_init();
  401efa:	4b22      	ldr	r3, [pc, #136]	; (401f84 <main+0x94>)
  401efc:	4798      	blx	r3

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401efe:	4b22      	ldr	r3, [pc, #136]	; (401f88 <main+0x98>)
  401f00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401f04:	605a      	str	r2, [r3, #4]

  /* Configura Leds */
  LED_init(0);
  401f06:	2000      	movs	r0, #0
  401f08:	4b20      	ldr	r3, [pc, #128]	; (401f8c <main+0x9c>)
  401f0a:	4798      	blx	r3
    
  /** Configura RTC */
  //RTC_init();
  
  /** Inicializa USART como printf */
  USART1_init();
  401f0c:	4b20      	ldr	r3, [pc, #128]	; (401f90 <main+0xa0>)
  401f0e:	4798      	blx	r3
  
  //ioport_set_pin_level(77,  IOPORT_PIN_LEVEL_LOW);
  
  //sleepmgr_init();
 // sleepmgr_lock_mode(current_sleep_mode);
 rtt_init(RTT, 32768);
  401f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401f14:	481f      	ldr	r0, [pc, #124]	; (401f94 <main+0xa4>)
  401f16:	4b20      	ldr	r3, [pc, #128]	; (401f98 <main+0xa8>)
  401f18:	4798      	blx	r3
 /* Enable RTT interrupt */
 NVIC_DisableIRQ(RTT_IRQn);
  401f1a:	2003      	movs	r0, #3
  401f1c:	4b1f      	ldr	r3, [pc, #124]	; (401f9c <main+0xac>)
  401f1e:	4798      	blx	r3
 NVIC_ClearPendingIRQ(RTT_IRQn);
  401f20:	2003      	movs	r0, #3
  401f22:	4b1f      	ldr	r3, [pc, #124]	; (401fa0 <main+0xb0>)
  401f24:	4798      	blx	r3
 NVIC_SetPriority(RTT_IRQn, 0);
  401f26:	2100      	movs	r1, #0
  401f28:	2003      	movs	r0, #3
  401f2a:	4b1e      	ldr	r3, [pc, #120]	; (401fa4 <main+0xb4>)
  401f2c:	4798      	blx	r3
 NVIC_EnableIRQ(RTT_IRQn);
  401f2e:	2003      	movs	r0, #3
  401f30:	4b1d      	ldr	r3, [pc, #116]	; (401fa8 <main+0xb8>)
  401f32:	4798      	blx	r3
 rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401f34:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401f38:	4816      	ldr	r0, [pc, #88]	; (401f94 <main+0xa4>)
  401f3a:	4b1c      	ldr	r3, [pc, #112]	; (401fac <main+0xbc>)
  401f3c:	4798      	blx	r3
  pmc_disable_pllack();
  401f3e:	4b1c      	ldr	r3, [pc, #112]	; (401fb0 <main+0xc0>)
  401f40:	4798      	blx	r3
  pmc_set_fast_startup_input(PMC_FSMR_RTTAL);
  401f42:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  401f46:	4b1b      	ldr	r3, [pc, #108]	; (401fb4 <main+0xc4>)
  401f48:	4798      	blx	r3
  #if (!(SAMG51 || SAMG53 || SAMG54))
	supc_set_wakeup_mode(SUPC, SUPC_WUMR_RTTEN_ENABLE);
  401f4a:	2104      	movs	r1, #4
  401f4c:	481a      	ldr	r0, [pc, #104]	; (401fb8 <main+0xc8>)
  401f4e:	4b1b      	ldr	r3, [pc, #108]	; (401fbc <main+0xcc>)
  401f50:	4798      	blx	r3
	supc_backup_sram_off(SUPC);
  401f52:	4819      	ldr	r0, [pc, #100]	; (401fb8 <main+0xc8>)
  401f54:	4b1a      	ldr	r3, [pc, #104]	; (401fc0 <main+0xd0>)
  401f56:	4798      	blx	r3
	//pmc_sleep(SLEEPMGR_SLEEP_WFI);
  #endif
  sleepmgr_init();
  401f58:	4b1a      	ldr	r3, [pc, #104]	; (401fc4 <main+0xd4>)
  401f5a:	4798      	blx	r3
  sleepmgr_lock_mode(current_sleep_mode);
  401f5c:	79fb      	ldrb	r3, [r7, #7]
  401f5e:	4618      	mov	r0, r3
  401f60:	4b19      	ldr	r3, [pc, #100]	; (401fc8 <main+0xd8>)
  401f62:	4798      	blx	r3
		//LED_init(1);
		//delay_s(ACTIVE_TIME);
		
		//LED_init(0);
		//delay_s(ACTIVE_TIME);
		rtt_write_alarm_time(RTT, rtt_read_timer_value(RTT) + SLEEP_TIME);
  401f64:	480b      	ldr	r0, [pc, #44]	; (401f94 <main+0xa4>)
  401f66:	4b19      	ldr	r3, [pc, #100]	; (401fcc <main+0xdc>)
  401f68:	4798      	blx	r3
  401f6a:	4603      	mov	r3, r0
  401f6c:	3301      	adds	r3, #1
  401f6e:	4619      	mov	r1, r3
  401f70:	4808      	ldr	r0, [pc, #32]	; (401f94 <main+0xa4>)
  401f72:	4b17      	ldr	r3, [pc, #92]	; (401fd0 <main+0xe0>)
  401f74:	4798      	blx	r3
		//LED_init(1);
		//ioport_set_pin_level(77,  IOPORT_PIN_LEVEL_HIGH);
		sleepmgr_enter_sleep();
  401f76:	4b17      	ldr	r3, [pc, #92]	; (401fd4 <main+0xe4>)
  401f78:	4798      	blx	r3
		//LED_init(0);
		//ioport_set_pin_level(77,  IOPORT_PIN_LEVEL_LOW);
		sleepmgr_unlock_mode(current_sleep_mode);
  401f7a:	79fb      	ldrb	r3, [r7, #7]
  401f7c:	4618      	mov	r0, r3
  401f7e:	4b16      	ldr	r3, [pc, #88]	; (401fd8 <main+0xe8>)
  401f80:	4798      	blx	r3
		//}

		//sleepmgr_lock_mode(current_sleep_mode);
		
		//pmc_sleep(SLEEPMGR_SLEEP_WFI);
	}
  401f82:	e7ef      	b.n	401f64 <main+0x74>
  401f84:	004002e9 	.word	0x004002e9
  401f88:	400e1850 	.word	0x400e1850
  401f8c:	00401e2d 	.word	0x00401e2d
  401f90:	00401e61 	.word	0x00401e61
  401f94:	400e1830 	.word	0x400e1830
  401f98:	00400e15 	.word	0x00400e15
  401f9c:	00401715 	.word	0x00401715
  401fa0:	00401749 	.word	0x00401749
  401fa4:	0040177d 	.word	0x0040177d
  401fa8:	004016e1 	.word	0x004016e1
  401fac:	00400e45 	.word	0x00400e45
  401fb0:	00400905 	.word	0x00400905
  401fb4:	004009a5 	.word	0x004009a5
  401fb8:	400e1810 	.word	0x400e1810
  401fbc:	00400f61 	.word	0x00400f61
  401fc0:	00400f7d 	.word	0x00400f7d
  401fc4:	004018cd 	.word	0x004018cd
  401fc8:	00401905 	.word	0x00401905
  401fcc:	00400ebd 	.word	0x00400ebd
  401fd0:	00400f05 	.word	0x00400f05
  401fd4:	004019c5 	.word	0x004019c5
  401fd8:	00401949 	.word	0x00401949

00401fdc <__libc_init_array>:
  401fdc:	b570      	push	{r4, r5, r6, lr}
  401fde:	4e0f      	ldr	r6, [pc, #60]	; (40201c <__libc_init_array+0x40>)
  401fe0:	4d0f      	ldr	r5, [pc, #60]	; (402020 <__libc_init_array+0x44>)
  401fe2:	1b76      	subs	r6, r6, r5
  401fe4:	10b6      	asrs	r6, r6, #2
  401fe6:	bf18      	it	ne
  401fe8:	2400      	movne	r4, #0
  401fea:	d005      	beq.n	401ff8 <__libc_init_array+0x1c>
  401fec:	3401      	adds	r4, #1
  401fee:	f855 3b04 	ldr.w	r3, [r5], #4
  401ff2:	4798      	blx	r3
  401ff4:	42a6      	cmp	r6, r4
  401ff6:	d1f9      	bne.n	401fec <__libc_init_array+0x10>
  401ff8:	4e0a      	ldr	r6, [pc, #40]	; (402024 <__libc_init_array+0x48>)
  401ffa:	4d0b      	ldr	r5, [pc, #44]	; (402028 <__libc_init_array+0x4c>)
  401ffc:	1b76      	subs	r6, r6, r5
  401ffe:	f001 f823 	bl	403048 <_init>
  402002:	10b6      	asrs	r6, r6, #2
  402004:	bf18      	it	ne
  402006:	2400      	movne	r4, #0
  402008:	d006      	beq.n	402018 <__libc_init_array+0x3c>
  40200a:	3401      	adds	r4, #1
  40200c:	f855 3b04 	ldr.w	r3, [r5], #4
  402010:	4798      	blx	r3
  402012:	42a6      	cmp	r6, r4
  402014:	d1f9      	bne.n	40200a <__libc_init_array+0x2e>
  402016:	bd70      	pop	{r4, r5, r6, pc}
  402018:	bd70      	pop	{r4, r5, r6, pc}
  40201a:	bf00      	nop
  40201c:	00403054 	.word	0x00403054
  402020:	00403054 	.word	0x00403054
  402024:	0040305c 	.word	0x0040305c
  402028:	00403054 	.word	0x00403054

0040202c <memset>:
  40202c:	b470      	push	{r4, r5, r6}
  40202e:	0784      	lsls	r4, r0, #30
  402030:	d046      	beq.n	4020c0 <memset+0x94>
  402032:	1e54      	subs	r4, r2, #1
  402034:	2a00      	cmp	r2, #0
  402036:	d041      	beq.n	4020bc <memset+0x90>
  402038:	b2cd      	uxtb	r5, r1
  40203a:	4603      	mov	r3, r0
  40203c:	e002      	b.n	402044 <memset+0x18>
  40203e:	1e62      	subs	r2, r4, #1
  402040:	b3e4      	cbz	r4, 4020bc <memset+0x90>
  402042:	4614      	mov	r4, r2
  402044:	f803 5b01 	strb.w	r5, [r3], #1
  402048:	079a      	lsls	r2, r3, #30
  40204a:	d1f8      	bne.n	40203e <memset+0x12>
  40204c:	2c03      	cmp	r4, #3
  40204e:	d92e      	bls.n	4020ae <memset+0x82>
  402050:	b2cd      	uxtb	r5, r1
  402052:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402056:	2c0f      	cmp	r4, #15
  402058:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40205c:	d919      	bls.n	402092 <memset+0x66>
  40205e:	f103 0210 	add.w	r2, r3, #16
  402062:	4626      	mov	r6, r4
  402064:	3e10      	subs	r6, #16
  402066:	2e0f      	cmp	r6, #15
  402068:	f842 5c10 	str.w	r5, [r2, #-16]
  40206c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402070:	f842 5c08 	str.w	r5, [r2, #-8]
  402074:	f842 5c04 	str.w	r5, [r2, #-4]
  402078:	f102 0210 	add.w	r2, r2, #16
  40207c:	d8f2      	bhi.n	402064 <memset+0x38>
  40207e:	f1a4 0210 	sub.w	r2, r4, #16
  402082:	f022 020f 	bic.w	r2, r2, #15
  402086:	f004 040f 	and.w	r4, r4, #15
  40208a:	3210      	adds	r2, #16
  40208c:	2c03      	cmp	r4, #3
  40208e:	4413      	add	r3, r2
  402090:	d90d      	bls.n	4020ae <memset+0x82>
  402092:	461e      	mov	r6, r3
  402094:	4622      	mov	r2, r4
  402096:	3a04      	subs	r2, #4
  402098:	2a03      	cmp	r2, #3
  40209a:	f846 5b04 	str.w	r5, [r6], #4
  40209e:	d8fa      	bhi.n	402096 <memset+0x6a>
  4020a0:	1f22      	subs	r2, r4, #4
  4020a2:	f022 0203 	bic.w	r2, r2, #3
  4020a6:	3204      	adds	r2, #4
  4020a8:	4413      	add	r3, r2
  4020aa:	f004 0403 	and.w	r4, r4, #3
  4020ae:	b12c      	cbz	r4, 4020bc <memset+0x90>
  4020b0:	b2c9      	uxtb	r1, r1
  4020b2:	441c      	add	r4, r3
  4020b4:	f803 1b01 	strb.w	r1, [r3], #1
  4020b8:	42a3      	cmp	r3, r4
  4020ba:	d1fb      	bne.n	4020b4 <memset+0x88>
  4020bc:	bc70      	pop	{r4, r5, r6}
  4020be:	4770      	bx	lr
  4020c0:	4614      	mov	r4, r2
  4020c2:	4603      	mov	r3, r0
  4020c4:	e7c2      	b.n	40204c <memset+0x20>
  4020c6:	bf00      	nop

004020c8 <setbuf>:
  4020c8:	2900      	cmp	r1, #0
  4020ca:	bf0c      	ite	eq
  4020cc:	2202      	moveq	r2, #2
  4020ce:	2200      	movne	r2, #0
  4020d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4020d4:	f000 b800 	b.w	4020d8 <setvbuf>

004020d8 <setvbuf>:
  4020d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4020dc:	4c51      	ldr	r4, [pc, #324]	; (402224 <setvbuf+0x14c>)
  4020de:	6825      	ldr	r5, [r4, #0]
  4020e0:	b083      	sub	sp, #12
  4020e2:	4604      	mov	r4, r0
  4020e4:	460f      	mov	r7, r1
  4020e6:	4690      	mov	r8, r2
  4020e8:	461e      	mov	r6, r3
  4020ea:	b115      	cbz	r5, 4020f2 <setvbuf+0x1a>
  4020ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4020ee:	2b00      	cmp	r3, #0
  4020f0:	d079      	beq.n	4021e6 <setvbuf+0x10e>
  4020f2:	f1b8 0f02 	cmp.w	r8, #2
  4020f6:	d004      	beq.n	402102 <setvbuf+0x2a>
  4020f8:	f1b8 0f01 	cmp.w	r8, #1
  4020fc:	d87f      	bhi.n	4021fe <setvbuf+0x126>
  4020fe:	2e00      	cmp	r6, #0
  402100:	db7d      	blt.n	4021fe <setvbuf+0x126>
  402102:	4621      	mov	r1, r4
  402104:	4628      	mov	r0, r5
  402106:	f000 f943 	bl	402390 <_fflush_r>
  40210a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40210c:	b141      	cbz	r1, 402120 <setvbuf+0x48>
  40210e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402112:	4299      	cmp	r1, r3
  402114:	d002      	beq.n	40211c <setvbuf+0x44>
  402116:	4628      	mov	r0, r5
  402118:	f000 fa3a 	bl	402590 <_free_r>
  40211c:	2300      	movs	r3, #0
  40211e:	6323      	str	r3, [r4, #48]	; 0x30
  402120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402124:	2200      	movs	r2, #0
  402126:	61a2      	str	r2, [r4, #24]
  402128:	6062      	str	r2, [r4, #4]
  40212a:	061a      	lsls	r2, r3, #24
  40212c:	d454      	bmi.n	4021d8 <setvbuf+0x100>
  40212e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402132:	f023 0303 	bic.w	r3, r3, #3
  402136:	f1b8 0f02 	cmp.w	r8, #2
  40213a:	81a3      	strh	r3, [r4, #12]
  40213c:	d039      	beq.n	4021b2 <setvbuf+0xda>
  40213e:	ab01      	add	r3, sp, #4
  402140:	466a      	mov	r2, sp
  402142:	4621      	mov	r1, r4
  402144:	4628      	mov	r0, r5
  402146:	f000 fb35 	bl	4027b4 <__swhatbuf_r>
  40214a:	89a3      	ldrh	r3, [r4, #12]
  40214c:	4318      	orrs	r0, r3
  40214e:	81a0      	strh	r0, [r4, #12]
  402150:	b326      	cbz	r6, 40219c <setvbuf+0xc4>
  402152:	b327      	cbz	r7, 40219e <setvbuf+0xc6>
  402154:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402156:	2b00      	cmp	r3, #0
  402158:	d04d      	beq.n	4021f6 <setvbuf+0x11e>
  40215a:	9b00      	ldr	r3, [sp, #0]
  40215c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  402160:	6027      	str	r7, [r4, #0]
  402162:	429e      	cmp	r6, r3
  402164:	bf1c      	itt	ne
  402166:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40216a:	81a0      	strhne	r0, [r4, #12]
  40216c:	f1b8 0f01 	cmp.w	r8, #1
  402170:	bf08      	it	eq
  402172:	f040 0001 	orreq.w	r0, r0, #1
  402176:	b283      	uxth	r3, r0
  402178:	bf08      	it	eq
  40217a:	81a0      	strheq	r0, [r4, #12]
  40217c:	f003 0008 	and.w	r0, r3, #8
  402180:	b280      	uxth	r0, r0
  402182:	6127      	str	r7, [r4, #16]
  402184:	6166      	str	r6, [r4, #20]
  402186:	b318      	cbz	r0, 4021d0 <setvbuf+0xf8>
  402188:	f013 0001 	ands.w	r0, r3, #1
  40218c:	d02f      	beq.n	4021ee <setvbuf+0x116>
  40218e:	2000      	movs	r0, #0
  402190:	4276      	negs	r6, r6
  402192:	61a6      	str	r6, [r4, #24]
  402194:	60a0      	str	r0, [r4, #8]
  402196:	b003      	add	sp, #12
  402198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40219c:	9e00      	ldr	r6, [sp, #0]
  40219e:	4630      	mov	r0, r6
  4021a0:	f000 fb38 	bl	402814 <malloc>
  4021a4:	4607      	mov	r7, r0
  4021a6:	b368      	cbz	r0, 402204 <setvbuf+0x12c>
  4021a8:	89a3      	ldrh	r3, [r4, #12]
  4021aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021ae:	81a3      	strh	r3, [r4, #12]
  4021b0:	e7d0      	b.n	402154 <setvbuf+0x7c>
  4021b2:	2000      	movs	r0, #0
  4021b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4021b8:	f043 0302 	orr.w	r3, r3, #2
  4021bc:	2500      	movs	r5, #0
  4021be:	2101      	movs	r1, #1
  4021c0:	81a3      	strh	r3, [r4, #12]
  4021c2:	60a5      	str	r5, [r4, #8]
  4021c4:	6022      	str	r2, [r4, #0]
  4021c6:	6122      	str	r2, [r4, #16]
  4021c8:	6161      	str	r1, [r4, #20]
  4021ca:	b003      	add	sp, #12
  4021cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021d0:	60a0      	str	r0, [r4, #8]
  4021d2:	b003      	add	sp, #12
  4021d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021d8:	6921      	ldr	r1, [r4, #16]
  4021da:	4628      	mov	r0, r5
  4021dc:	f000 f9d8 	bl	402590 <_free_r>
  4021e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4021e4:	e7a3      	b.n	40212e <setvbuf+0x56>
  4021e6:	4628      	mov	r0, r5
  4021e8:	f000 f966 	bl	4024b8 <__sinit>
  4021ec:	e781      	b.n	4020f2 <setvbuf+0x1a>
  4021ee:	60a6      	str	r6, [r4, #8]
  4021f0:	b003      	add	sp, #12
  4021f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021f6:	4628      	mov	r0, r5
  4021f8:	f000 f95e 	bl	4024b8 <__sinit>
  4021fc:	e7ad      	b.n	40215a <setvbuf+0x82>
  4021fe:	f04f 30ff 	mov.w	r0, #4294967295
  402202:	e7e2      	b.n	4021ca <setvbuf+0xf2>
  402204:	f8dd 9000 	ldr.w	r9, [sp]
  402208:	45b1      	cmp	r9, r6
  40220a:	d006      	beq.n	40221a <setvbuf+0x142>
  40220c:	4648      	mov	r0, r9
  40220e:	f000 fb01 	bl	402814 <malloc>
  402212:	4607      	mov	r7, r0
  402214:	b108      	cbz	r0, 40221a <setvbuf+0x142>
  402216:	464e      	mov	r6, r9
  402218:	e7c6      	b.n	4021a8 <setvbuf+0xd0>
  40221a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40221e:	f04f 30ff 	mov.w	r0, #4294967295
  402222:	e7c7      	b.n	4021b4 <setvbuf+0xdc>
  402224:	20400438 	.word	0x20400438

00402228 <register_fini>:
  402228:	4b02      	ldr	r3, [pc, #8]	; (402234 <register_fini+0xc>)
  40222a:	b113      	cbz	r3, 402232 <register_fini+0xa>
  40222c:	4802      	ldr	r0, [pc, #8]	; (402238 <register_fini+0x10>)
  40222e:	f000 b805 	b.w	40223c <atexit>
  402232:	4770      	bx	lr
  402234:	00000000 	.word	0x00000000
  402238:	004024cd 	.word	0x004024cd

0040223c <atexit>:
  40223c:	2300      	movs	r3, #0
  40223e:	4601      	mov	r1, r0
  402240:	461a      	mov	r2, r3
  402242:	4618      	mov	r0, r3
  402244:	f000 be16 	b.w	402e74 <__register_exitproc>

00402248 <__sflush_r>:
  402248:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40224c:	b29a      	uxth	r2, r3
  40224e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402252:	460d      	mov	r5, r1
  402254:	0711      	lsls	r1, r2, #28
  402256:	4680      	mov	r8, r0
  402258:	d43c      	bmi.n	4022d4 <__sflush_r+0x8c>
  40225a:	686a      	ldr	r2, [r5, #4]
  40225c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402260:	2a00      	cmp	r2, #0
  402262:	81ab      	strh	r3, [r5, #12]
  402264:	dd73      	ble.n	40234e <__sflush_r+0x106>
  402266:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402268:	2c00      	cmp	r4, #0
  40226a:	d04b      	beq.n	402304 <__sflush_r+0xbc>
  40226c:	b29b      	uxth	r3, r3
  40226e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402272:	2100      	movs	r1, #0
  402274:	b292      	uxth	r2, r2
  402276:	f8d8 6000 	ldr.w	r6, [r8]
  40227a:	f8c8 1000 	str.w	r1, [r8]
  40227e:	2a00      	cmp	r2, #0
  402280:	d069      	beq.n	402356 <__sflush_r+0x10e>
  402282:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402284:	075f      	lsls	r7, r3, #29
  402286:	d505      	bpl.n	402294 <__sflush_r+0x4c>
  402288:	6869      	ldr	r1, [r5, #4]
  40228a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40228c:	1a52      	subs	r2, r2, r1
  40228e:	b10b      	cbz	r3, 402294 <__sflush_r+0x4c>
  402290:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402292:	1ad2      	subs	r2, r2, r3
  402294:	2300      	movs	r3, #0
  402296:	69e9      	ldr	r1, [r5, #28]
  402298:	4640      	mov	r0, r8
  40229a:	47a0      	blx	r4
  40229c:	1c44      	adds	r4, r0, #1
  40229e:	d03c      	beq.n	40231a <__sflush_r+0xd2>
  4022a0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4022a4:	692a      	ldr	r2, [r5, #16]
  4022a6:	602a      	str	r2, [r5, #0]
  4022a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4022ac:	2200      	movs	r2, #0
  4022ae:	81ab      	strh	r3, [r5, #12]
  4022b0:	04db      	lsls	r3, r3, #19
  4022b2:	606a      	str	r2, [r5, #4]
  4022b4:	d449      	bmi.n	40234a <__sflush_r+0x102>
  4022b6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4022b8:	f8c8 6000 	str.w	r6, [r8]
  4022bc:	b311      	cbz	r1, 402304 <__sflush_r+0xbc>
  4022be:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4022c2:	4299      	cmp	r1, r3
  4022c4:	d002      	beq.n	4022cc <__sflush_r+0x84>
  4022c6:	4640      	mov	r0, r8
  4022c8:	f000 f962 	bl	402590 <_free_r>
  4022cc:	2000      	movs	r0, #0
  4022ce:	6328      	str	r0, [r5, #48]	; 0x30
  4022d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022d4:	692e      	ldr	r6, [r5, #16]
  4022d6:	b1ae      	cbz	r6, 402304 <__sflush_r+0xbc>
  4022d8:	682c      	ldr	r4, [r5, #0]
  4022da:	602e      	str	r6, [r5, #0]
  4022dc:	0790      	lsls	r0, r2, #30
  4022de:	bf0c      	ite	eq
  4022e0:	696b      	ldreq	r3, [r5, #20]
  4022e2:	2300      	movne	r3, #0
  4022e4:	1ba4      	subs	r4, r4, r6
  4022e6:	60ab      	str	r3, [r5, #8]
  4022e8:	e00a      	b.n	402300 <__sflush_r+0xb8>
  4022ea:	4623      	mov	r3, r4
  4022ec:	4632      	mov	r2, r6
  4022ee:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4022f0:	69e9      	ldr	r1, [r5, #28]
  4022f2:	4640      	mov	r0, r8
  4022f4:	47b8      	blx	r7
  4022f6:	2800      	cmp	r0, #0
  4022f8:	eba4 0400 	sub.w	r4, r4, r0
  4022fc:	4406      	add	r6, r0
  4022fe:	dd04      	ble.n	40230a <__sflush_r+0xc2>
  402300:	2c00      	cmp	r4, #0
  402302:	dcf2      	bgt.n	4022ea <__sflush_r+0xa2>
  402304:	2000      	movs	r0, #0
  402306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40230a:	89ab      	ldrh	r3, [r5, #12]
  40230c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402310:	81ab      	strh	r3, [r5, #12]
  402312:	f04f 30ff 	mov.w	r0, #4294967295
  402316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40231a:	f8d8 2000 	ldr.w	r2, [r8]
  40231e:	2a1d      	cmp	r2, #29
  402320:	d8f3      	bhi.n	40230a <__sflush_r+0xc2>
  402322:	4b1a      	ldr	r3, [pc, #104]	; (40238c <__sflush_r+0x144>)
  402324:	40d3      	lsrs	r3, r2
  402326:	f003 0301 	and.w	r3, r3, #1
  40232a:	f083 0401 	eor.w	r4, r3, #1
  40232e:	2b00      	cmp	r3, #0
  402330:	d0eb      	beq.n	40230a <__sflush_r+0xc2>
  402332:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402336:	6929      	ldr	r1, [r5, #16]
  402338:	6029      	str	r1, [r5, #0]
  40233a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40233e:	04d9      	lsls	r1, r3, #19
  402340:	606c      	str	r4, [r5, #4]
  402342:	81ab      	strh	r3, [r5, #12]
  402344:	d5b7      	bpl.n	4022b6 <__sflush_r+0x6e>
  402346:	2a00      	cmp	r2, #0
  402348:	d1b5      	bne.n	4022b6 <__sflush_r+0x6e>
  40234a:	6528      	str	r0, [r5, #80]	; 0x50
  40234c:	e7b3      	b.n	4022b6 <__sflush_r+0x6e>
  40234e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402350:	2a00      	cmp	r2, #0
  402352:	dc88      	bgt.n	402266 <__sflush_r+0x1e>
  402354:	e7d6      	b.n	402304 <__sflush_r+0xbc>
  402356:	2301      	movs	r3, #1
  402358:	69e9      	ldr	r1, [r5, #28]
  40235a:	4640      	mov	r0, r8
  40235c:	47a0      	blx	r4
  40235e:	1c43      	adds	r3, r0, #1
  402360:	4602      	mov	r2, r0
  402362:	d002      	beq.n	40236a <__sflush_r+0x122>
  402364:	89ab      	ldrh	r3, [r5, #12]
  402366:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402368:	e78c      	b.n	402284 <__sflush_r+0x3c>
  40236a:	f8d8 3000 	ldr.w	r3, [r8]
  40236e:	2b00      	cmp	r3, #0
  402370:	d0f8      	beq.n	402364 <__sflush_r+0x11c>
  402372:	2b1d      	cmp	r3, #29
  402374:	d001      	beq.n	40237a <__sflush_r+0x132>
  402376:	2b16      	cmp	r3, #22
  402378:	d102      	bne.n	402380 <__sflush_r+0x138>
  40237a:	f8c8 6000 	str.w	r6, [r8]
  40237e:	e7c1      	b.n	402304 <__sflush_r+0xbc>
  402380:	89ab      	ldrh	r3, [r5, #12]
  402382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402386:	81ab      	strh	r3, [r5, #12]
  402388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40238c:	20400001 	.word	0x20400001

00402390 <_fflush_r>:
  402390:	b510      	push	{r4, lr}
  402392:	4604      	mov	r4, r0
  402394:	b082      	sub	sp, #8
  402396:	b108      	cbz	r0, 40239c <_fflush_r+0xc>
  402398:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40239a:	b153      	cbz	r3, 4023b2 <_fflush_r+0x22>
  40239c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4023a0:	b908      	cbnz	r0, 4023a6 <_fflush_r+0x16>
  4023a2:	b002      	add	sp, #8
  4023a4:	bd10      	pop	{r4, pc}
  4023a6:	4620      	mov	r0, r4
  4023a8:	b002      	add	sp, #8
  4023aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4023ae:	f7ff bf4b 	b.w	402248 <__sflush_r>
  4023b2:	9101      	str	r1, [sp, #4]
  4023b4:	f000 f880 	bl	4024b8 <__sinit>
  4023b8:	9901      	ldr	r1, [sp, #4]
  4023ba:	e7ef      	b.n	40239c <_fflush_r+0xc>

004023bc <_cleanup_r>:
  4023bc:	4901      	ldr	r1, [pc, #4]	; (4023c4 <_cleanup_r+0x8>)
  4023be:	f000 b9cf 	b.w	402760 <_fwalk_reent>
  4023c2:	bf00      	nop
  4023c4:	00402f3d 	.word	0x00402f3d

004023c8 <__sinit.part.1>:
  4023c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023cc:	4b35      	ldr	r3, [pc, #212]	; (4024a4 <__sinit.part.1+0xdc>)
  4023ce:	6845      	ldr	r5, [r0, #4]
  4023d0:	63c3      	str	r3, [r0, #60]	; 0x3c
  4023d2:	2400      	movs	r4, #0
  4023d4:	4607      	mov	r7, r0
  4023d6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4023da:	2304      	movs	r3, #4
  4023dc:	2103      	movs	r1, #3
  4023de:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4023e2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4023e6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4023ea:	b083      	sub	sp, #12
  4023ec:	602c      	str	r4, [r5, #0]
  4023ee:	606c      	str	r4, [r5, #4]
  4023f0:	60ac      	str	r4, [r5, #8]
  4023f2:	666c      	str	r4, [r5, #100]	; 0x64
  4023f4:	81ec      	strh	r4, [r5, #14]
  4023f6:	612c      	str	r4, [r5, #16]
  4023f8:	616c      	str	r4, [r5, #20]
  4023fa:	61ac      	str	r4, [r5, #24]
  4023fc:	81ab      	strh	r3, [r5, #12]
  4023fe:	4621      	mov	r1, r4
  402400:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402404:	2208      	movs	r2, #8
  402406:	f7ff fe11 	bl	40202c <memset>
  40240a:	68be      	ldr	r6, [r7, #8]
  40240c:	f8df b098 	ldr.w	fp, [pc, #152]	; 4024a8 <__sinit.part.1+0xe0>
  402410:	f8df a098 	ldr.w	sl, [pc, #152]	; 4024ac <__sinit.part.1+0xe4>
  402414:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4024b0 <__sinit.part.1+0xe8>
  402418:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4024b4 <__sinit.part.1+0xec>
  40241c:	f8c5 b020 	str.w	fp, [r5, #32]
  402420:	2301      	movs	r3, #1
  402422:	2209      	movs	r2, #9
  402424:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402428:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40242c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402430:	61ed      	str	r5, [r5, #28]
  402432:	4621      	mov	r1, r4
  402434:	81f3      	strh	r3, [r6, #14]
  402436:	81b2      	strh	r2, [r6, #12]
  402438:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40243c:	6034      	str	r4, [r6, #0]
  40243e:	6074      	str	r4, [r6, #4]
  402440:	60b4      	str	r4, [r6, #8]
  402442:	6674      	str	r4, [r6, #100]	; 0x64
  402444:	6134      	str	r4, [r6, #16]
  402446:	6174      	str	r4, [r6, #20]
  402448:	61b4      	str	r4, [r6, #24]
  40244a:	2208      	movs	r2, #8
  40244c:	9301      	str	r3, [sp, #4]
  40244e:	f7ff fded 	bl	40202c <memset>
  402452:	68fd      	ldr	r5, [r7, #12]
  402454:	61f6      	str	r6, [r6, #28]
  402456:	2012      	movs	r0, #18
  402458:	2202      	movs	r2, #2
  40245a:	f8c6 b020 	str.w	fp, [r6, #32]
  40245e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402462:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402466:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40246a:	4621      	mov	r1, r4
  40246c:	81a8      	strh	r0, [r5, #12]
  40246e:	81ea      	strh	r2, [r5, #14]
  402470:	602c      	str	r4, [r5, #0]
  402472:	606c      	str	r4, [r5, #4]
  402474:	60ac      	str	r4, [r5, #8]
  402476:	666c      	str	r4, [r5, #100]	; 0x64
  402478:	612c      	str	r4, [r5, #16]
  40247a:	616c      	str	r4, [r5, #20]
  40247c:	61ac      	str	r4, [r5, #24]
  40247e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402482:	2208      	movs	r2, #8
  402484:	f7ff fdd2 	bl	40202c <memset>
  402488:	9b01      	ldr	r3, [sp, #4]
  40248a:	61ed      	str	r5, [r5, #28]
  40248c:	f8c5 b020 	str.w	fp, [r5, #32]
  402490:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402494:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402498:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40249c:	63bb      	str	r3, [r7, #56]	; 0x38
  40249e:	b003      	add	sp, #12
  4024a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024a4:	004023bd 	.word	0x004023bd
  4024a8:	00402dc1 	.word	0x00402dc1
  4024ac:	00402de5 	.word	0x00402de5
  4024b0:	00402e21 	.word	0x00402e21
  4024b4:	00402e41 	.word	0x00402e41

004024b8 <__sinit>:
  4024b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4024ba:	b103      	cbz	r3, 4024be <__sinit+0x6>
  4024bc:	4770      	bx	lr
  4024be:	f7ff bf83 	b.w	4023c8 <__sinit.part.1>
  4024c2:	bf00      	nop

004024c4 <__sfp_lock_acquire>:
  4024c4:	4770      	bx	lr
  4024c6:	bf00      	nop

004024c8 <__sfp_lock_release>:
  4024c8:	4770      	bx	lr
  4024ca:	bf00      	nop

004024cc <__libc_fini_array>:
  4024cc:	b538      	push	{r3, r4, r5, lr}
  4024ce:	4d07      	ldr	r5, [pc, #28]	; (4024ec <__libc_fini_array+0x20>)
  4024d0:	4c07      	ldr	r4, [pc, #28]	; (4024f0 <__libc_fini_array+0x24>)
  4024d2:	1b2c      	subs	r4, r5, r4
  4024d4:	10a4      	asrs	r4, r4, #2
  4024d6:	d005      	beq.n	4024e4 <__libc_fini_array+0x18>
  4024d8:	3c01      	subs	r4, #1
  4024da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4024de:	4798      	blx	r3
  4024e0:	2c00      	cmp	r4, #0
  4024e2:	d1f9      	bne.n	4024d8 <__libc_fini_array+0xc>
  4024e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4024e8:	f000 bdb8 	b.w	40305c <_fini>
  4024ec:	0040306c 	.word	0x0040306c
  4024f0:	00403068 	.word	0x00403068

004024f4 <_malloc_trim_r>:
  4024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4024f6:	4f23      	ldr	r7, [pc, #140]	; (402584 <_malloc_trim_r+0x90>)
  4024f8:	460c      	mov	r4, r1
  4024fa:	4606      	mov	r6, r0
  4024fc:	f000 fc4a 	bl	402d94 <__malloc_lock>
  402500:	68bb      	ldr	r3, [r7, #8]
  402502:	685d      	ldr	r5, [r3, #4]
  402504:	f025 0503 	bic.w	r5, r5, #3
  402508:	1b29      	subs	r1, r5, r4
  40250a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40250e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402512:	f021 010f 	bic.w	r1, r1, #15
  402516:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40251a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40251e:	db07      	blt.n	402530 <_malloc_trim_r+0x3c>
  402520:	2100      	movs	r1, #0
  402522:	4630      	mov	r0, r6
  402524:	f000 fc3a 	bl	402d9c <_sbrk_r>
  402528:	68bb      	ldr	r3, [r7, #8]
  40252a:	442b      	add	r3, r5
  40252c:	4298      	cmp	r0, r3
  40252e:	d004      	beq.n	40253a <_malloc_trim_r+0x46>
  402530:	4630      	mov	r0, r6
  402532:	f000 fc31 	bl	402d98 <__malloc_unlock>
  402536:	2000      	movs	r0, #0
  402538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40253a:	4261      	negs	r1, r4
  40253c:	4630      	mov	r0, r6
  40253e:	f000 fc2d 	bl	402d9c <_sbrk_r>
  402542:	3001      	adds	r0, #1
  402544:	d00d      	beq.n	402562 <_malloc_trim_r+0x6e>
  402546:	4b10      	ldr	r3, [pc, #64]	; (402588 <_malloc_trim_r+0x94>)
  402548:	68ba      	ldr	r2, [r7, #8]
  40254a:	6819      	ldr	r1, [r3, #0]
  40254c:	1b2d      	subs	r5, r5, r4
  40254e:	f045 0501 	orr.w	r5, r5, #1
  402552:	4630      	mov	r0, r6
  402554:	1b09      	subs	r1, r1, r4
  402556:	6055      	str	r5, [r2, #4]
  402558:	6019      	str	r1, [r3, #0]
  40255a:	f000 fc1d 	bl	402d98 <__malloc_unlock>
  40255e:	2001      	movs	r0, #1
  402560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402562:	2100      	movs	r1, #0
  402564:	4630      	mov	r0, r6
  402566:	f000 fc19 	bl	402d9c <_sbrk_r>
  40256a:	68ba      	ldr	r2, [r7, #8]
  40256c:	1a83      	subs	r3, r0, r2
  40256e:	2b0f      	cmp	r3, #15
  402570:	ddde      	ble.n	402530 <_malloc_trim_r+0x3c>
  402572:	4c06      	ldr	r4, [pc, #24]	; (40258c <_malloc_trim_r+0x98>)
  402574:	4904      	ldr	r1, [pc, #16]	; (402588 <_malloc_trim_r+0x94>)
  402576:	6824      	ldr	r4, [r4, #0]
  402578:	f043 0301 	orr.w	r3, r3, #1
  40257c:	1b00      	subs	r0, r0, r4
  40257e:	6053      	str	r3, [r2, #4]
  402580:	6008      	str	r0, [r1, #0]
  402582:	e7d5      	b.n	402530 <_malloc_trim_r+0x3c>
  402584:	2040043c 	.word	0x2040043c
  402588:	204008fc 	.word	0x204008fc
  40258c:	20400848 	.word	0x20400848

00402590 <_free_r>:
  402590:	2900      	cmp	r1, #0
  402592:	d045      	beq.n	402620 <_free_r+0x90>
  402594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402598:	460d      	mov	r5, r1
  40259a:	4680      	mov	r8, r0
  40259c:	f000 fbfa 	bl	402d94 <__malloc_lock>
  4025a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4025a4:	496a      	ldr	r1, [pc, #424]	; (402750 <_free_r+0x1c0>)
  4025a6:	f027 0301 	bic.w	r3, r7, #1
  4025aa:	f1a5 0408 	sub.w	r4, r5, #8
  4025ae:	18e2      	adds	r2, r4, r3
  4025b0:	688e      	ldr	r6, [r1, #8]
  4025b2:	6850      	ldr	r0, [r2, #4]
  4025b4:	42b2      	cmp	r2, r6
  4025b6:	f020 0003 	bic.w	r0, r0, #3
  4025ba:	d062      	beq.n	402682 <_free_r+0xf2>
  4025bc:	07fe      	lsls	r6, r7, #31
  4025be:	6050      	str	r0, [r2, #4]
  4025c0:	d40b      	bmi.n	4025da <_free_r+0x4a>
  4025c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4025c6:	1be4      	subs	r4, r4, r7
  4025c8:	f101 0e08 	add.w	lr, r1, #8
  4025cc:	68a5      	ldr	r5, [r4, #8]
  4025ce:	4575      	cmp	r5, lr
  4025d0:	443b      	add	r3, r7
  4025d2:	d06f      	beq.n	4026b4 <_free_r+0x124>
  4025d4:	68e7      	ldr	r7, [r4, #12]
  4025d6:	60ef      	str	r7, [r5, #12]
  4025d8:	60bd      	str	r5, [r7, #8]
  4025da:	1815      	adds	r5, r2, r0
  4025dc:	686d      	ldr	r5, [r5, #4]
  4025de:	07ed      	lsls	r5, r5, #31
  4025e0:	d542      	bpl.n	402668 <_free_r+0xd8>
  4025e2:	f043 0201 	orr.w	r2, r3, #1
  4025e6:	6062      	str	r2, [r4, #4]
  4025e8:	50e3      	str	r3, [r4, r3]
  4025ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4025ee:	d218      	bcs.n	402622 <_free_r+0x92>
  4025f0:	08db      	lsrs	r3, r3, #3
  4025f2:	1c5a      	adds	r2, r3, #1
  4025f4:	684d      	ldr	r5, [r1, #4]
  4025f6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4025fa:	60a7      	str	r7, [r4, #8]
  4025fc:	2001      	movs	r0, #1
  4025fe:	109b      	asrs	r3, r3, #2
  402600:	fa00 f303 	lsl.w	r3, r0, r3
  402604:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  402608:	431d      	orrs	r5, r3
  40260a:	3808      	subs	r0, #8
  40260c:	60e0      	str	r0, [r4, #12]
  40260e:	604d      	str	r5, [r1, #4]
  402610:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  402614:	60fc      	str	r4, [r7, #12]
  402616:	4640      	mov	r0, r8
  402618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40261c:	f000 bbbc 	b.w	402d98 <__malloc_unlock>
  402620:	4770      	bx	lr
  402622:	0a5a      	lsrs	r2, r3, #9
  402624:	2a04      	cmp	r2, #4
  402626:	d853      	bhi.n	4026d0 <_free_r+0x140>
  402628:	099a      	lsrs	r2, r3, #6
  40262a:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40262e:	007f      	lsls	r7, r7, #1
  402630:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402634:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  402638:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40263c:	4944      	ldr	r1, [pc, #272]	; (402750 <_free_r+0x1c0>)
  40263e:	3808      	subs	r0, #8
  402640:	4290      	cmp	r0, r2
  402642:	d04d      	beq.n	4026e0 <_free_r+0x150>
  402644:	6851      	ldr	r1, [r2, #4]
  402646:	f021 0103 	bic.w	r1, r1, #3
  40264a:	428b      	cmp	r3, r1
  40264c:	d202      	bcs.n	402654 <_free_r+0xc4>
  40264e:	6892      	ldr	r2, [r2, #8]
  402650:	4290      	cmp	r0, r2
  402652:	d1f7      	bne.n	402644 <_free_r+0xb4>
  402654:	68d0      	ldr	r0, [r2, #12]
  402656:	60e0      	str	r0, [r4, #12]
  402658:	60a2      	str	r2, [r4, #8]
  40265a:	6084      	str	r4, [r0, #8]
  40265c:	60d4      	str	r4, [r2, #12]
  40265e:	4640      	mov	r0, r8
  402660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402664:	f000 bb98 	b.w	402d98 <__malloc_unlock>
  402668:	6895      	ldr	r5, [r2, #8]
  40266a:	4f3a      	ldr	r7, [pc, #232]	; (402754 <_free_r+0x1c4>)
  40266c:	42bd      	cmp	r5, r7
  40266e:	4403      	add	r3, r0
  402670:	d03f      	beq.n	4026f2 <_free_r+0x162>
  402672:	68d0      	ldr	r0, [r2, #12]
  402674:	60e8      	str	r0, [r5, #12]
  402676:	f043 0201 	orr.w	r2, r3, #1
  40267a:	6085      	str	r5, [r0, #8]
  40267c:	6062      	str	r2, [r4, #4]
  40267e:	50e3      	str	r3, [r4, r3]
  402680:	e7b3      	b.n	4025ea <_free_r+0x5a>
  402682:	07ff      	lsls	r7, r7, #31
  402684:	4403      	add	r3, r0
  402686:	d407      	bmi.n	402698 <_free_r+0x108>
  402688:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40268c:	1aa4      	subs	r4, r4, r2
  40268e:	4413      	add	r3, r2
  402690:	68a0      	ldr	r0, [r4, #8]
  402692:	68e2      	ldr	r2, [r4, #12]
  402694:	60c2      	str	r2, [r0, #12]
  402696:	6090      	str	r0, [r2, #8]
  402698:	4a2f      	ldr	r2, [pc, #188]	; (402758 <_free_r+0x1c8>)
  40269a:	6812      	ldr	r2, [r2, #0]
  40269c:	f043 0001 	orr.w	r0, r3, #1
  4026a0:	4293      	cmp	r3, r2
  4026a2:	6060      	str	r0, [r4, #4]
  4026a4:	608c      	str	r4, [r1, #8]
  4026a6:	d3b6      	bcc.n	402616 <_free_r+0x86>
  4026a8:	4b2c      	ldr	r3, [pc, #176]	; (40275c <_free_r+0x1cc>)
  4026aa:	4640      	mov	r0, r8
  4026ac:	6819      	ldr	r1, [r3, #0]
  4026ae:	f7ff ff21 	bl	4024f4 <_malloc_trim_r>
  4026b2:	e7b0      	b.n	402616 <_free_r+0x86>
  4026b4:	1811      	adds	r1, r2, r0
  4026b6:	6849      	ldr	r1, [r1, #4]
  4026b8:	07c9      	lsls	r1, r1, #31
  4026ba:	d444      	bmi.n	402746 <_free_r+0x1b6>
  4026bc:	6891      	ldr	r1, [r2, #8]
  4026be:	68d2      	ldr	r2, [r2, #12]
  4026c0:	60ca      	str	r2, [r1, #12]
  4026c2:	4403      	add	r3, r0
  4026c4:	f043 0001 	orr.w	r0, r3, #1
  4026c8:	6091      	str	r1, [r2, #8]
  4026ca:	6060      	str	r0, [r4, #4]
  4026cc:	50e3      	str	r3, [r4, r3]
  4026ce:	e7a2      	b.n	402616 <_free_r+0x86>
  4026d0:	2a14      	cmp	r2, #20
  4026d2:	d817      	bhi.n	402704 <_free_r+0x174>
  4026d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4026d8:	007f      	lsls	r7, r7, #1
  4026da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4026de:	e7a9      	b.n	402634 <_free_r+0xa4>
  4026e0:	10aa      	asrs	r2, r5, #2
  4026e2:	684b      	ldr	r3, [r1, #4]
  4026e4:	2501      	movs	r5, #1
  4026e6:	fa05 f202 	lsl.w	r2, r5, r2
  4026ea:	4313      	orrs	r3, r2
  4026ec:	604b      	str	r3, [r1, #4]
  4026ee:	4602      	mov	r2, r0
  4026f0:	e7b1      	b.n	402656 <_free_r+0xc6>
  4026f2:	f043 0201 	orr.w	r2, r3, #1
  4026f6:	614c      	str	r4, [r1, #20]
  4026f8:	610c      	str	r4, [r1, #16]
  4026fa:	60e5      	str	r5, [r4, #12]
  4026fc:	60a5      	str	r5, [r4, #8]
  4026fe:	6062      	str	r2, [r4, #4]
  402700:	50e3      	str	r3, [r4, r3]
  402702:	e788      	b.n	402616 <_free_r+0x86>
  402704:	2a54      	cmp	r2, #84	; 0x54
  402706:	d806      	bhi.n	402716 <_free_r+0x186>
  402708:	0b1a      	lsrs	r2, r3, #12
  40270a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40270e:	007f      	lsls	r7, r7, #1
  402710:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402714:	e78e      	b.n	402634 <_free_r+0xa4>
  402716:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40271a:	d806      	bhi.n	40272a <_free_r+0x19a>
  40271c:	0bda      	lsrs	r2, r3, #15
  40271e:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402722:	007f      	lsls	r7, r7, #1
  402724:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402728:	e784      	b.n	402634 <_free_r+0xa4>
  40272a:	f240 5054 	movw	r0, #1364	; 0x554
  40272e:	4282      	cmp	r2, r0
  402730:	d806      	bhi.n	402740 <_free_r+0x1b0>
  402732:	0c9a      	lsrs	r2, r3, #18
  402734:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402738:	007f      	lsls	r7, r7, #1
  40273a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40273e:	e779      	b.n	402634 <_free_r+0xa4>
  402740:	27fe      	movs	r7, #254	; 0xfe
  402742:	257e      	movs	r5, #126	; 0x7e
  402744:	e776      	b.n	402634 <_free_r+0xa4>
  402746:	f043 0201 	orr.w	r2, r3, #1
  40274a:	6062      	str	r2, [r4, #4]
  40274c:	50e3      	str	r3, [r4, r3]
  40274e:	e762      	b.n	402616 <_free_r+0x86>
  402750:	2040043c 	.word	0x2040043c
  402754:	20400444 	.word	0x20400444
  402758:	20400844 	.word	0x20400844
  40275c:	204008f8 	.word	0x204008f8

00402760 <_fwalk_reent>:
  402760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402764:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402768:	d01f      	beq.n	4027aa <_fwalk_reent+0x4a>
  40276a:	4688      	mov	r8, r1
  40276c:	4606      	mov	r6, r0
  40276e:	f04f 0900 	mov.w	r9, #0
  402772:	687d      	ldr	r5, [r7, #4]
  402774:	68bc      	ldr	r4, [r7, #8]
  402776:	3d01      	subs	r5, #1
  402778:	d411      	bmi.n	40279e <_fwalk_reent+0x3e>
  40277a:	89a3      	ldrh	r3, [r4, #12]
  40277c:	2b01      	cmp	r3, #1
  40277e:	f105 35ff 	add.w	r5, r5, #4294967295
  402782:	d908      	bls.n	402796 <_fwalk_reent+0x36>
  402784:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402788:	3301      	adds	r3, #1
  40278a:	4621      	mov	r1, r4
  40278c:	4630      	mov	r0, r6
  40278e:	d002      	beq.n	402796 <_fwalk_reent+0x36>
  402790:	47c0      	blx	r8
  402792:	ea49 0900 	orr.w	r9, r9, r0
  402796:	1c6b      	adds	r3, r5, #1
  402798:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40279c:	d1ed      	bne.n	40277a <_fwalk_reent+0x1a>
  40279e:	683f      	ldr	r7, [r7, #0]
  4027a0:	2f00      	cmp	r7, #0
  4027a2:	d1e6      	bne.n	402772 <_fwalk_reent+0x12>
  4027a4:	4648      	mov	r0, r9
  4027a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4027aa:	46b9      	mov	r9, r7
  4027ac:	4648      	mov	r0, r9
  4027ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4027b2:	bf00      	nop

004027b4 <__swhatbuf_r>:
  4027b4:	b570      	push	{r4, r5, r6, lr}
  4027b6:	460d      	mov	r5, r1
  4027b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4027bc:	2900      	cmp	r1, #0
  4027be:	b090      	sub	sp, #64	; 0x40
  4027c0:	4614      	mov	r4, r2
  4027c2:	461e      	mov	r6, r3
  4027c4:	db14      	blt.n	4027f0 <__swhatbuf_r+0x3c>
  4027c6:	aa01      	add	r2, sp, #4
  4027c8:	f000 fbfa 	bl	402fc0 <_fstat_r>
  4027cc:	2800      	cmp	r0, #0
  4027ce:	db0f      	blt.n	4027f0 <__swhatbuf_r+0x3c>
  4027d0:	9a02      	ldr	r2, [sp, #8]
  4027d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4027d6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4027da:	fab2 f282 	clz	r2, r2
  4027de:	0952      	lsrs	r2, r2, #5
  4027e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4027e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4027e8:	6032      	str	r2, [r6, #0]
  4027ea:	6023      	str	r3, [r4, #0]
  4027ec:	b010      	add	sp, #64	; 0x40
  4027ee:	bd70      	pop	{r4, r5, r6, pc}
  4027f0:	89a8      	ldrh	r0, [r5, #12]
  4027f2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  4027f6:	b282      	uxth	r2, r0
  4027f8:	2000      	movs	r0, #0
  4027fa:	6030      	str	r0, [r6, #0]
  4027fc:	b11a      	cbz	r2, 402806 <__swhatbuf_r+0x52>
  4027fe:	2340      	movs	r3, #64	; 0x40
  402800:	6023      	str	r3, [r4, #0]
  402802:	b010      	add	sp, #64	; 0x40
  402804:	bd70      	pop	{r4, r5, r6, pc}
  402806:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40280a:	4610      	mov	r0, r2
  40280c:	6023      	str	r3, [r4, #0]
  40280e:	b010      	add	sp, #64	; 0x40
  402810:	bd70      	pop	{r4, r5, r6, pc}
  402812:	bf00      	nop

00402814 <malloc>:
  402814:	4b02      	ldr	r3, [pc, #8]	; (402820 <malloc+0xc>)
  402816:	4601      	mov	r1, r0
  402818:	6818      	ldr	r0, [r3, #0]
  40281a:	f000 b803 	b.w	402824 <_malloc_r>
  40281e:	bf00      	nop
  402820:	20400438 	.word	0x20400438

00402824 <_malloc_r>:
  402824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402828:	f101 050b 	add.w	r5, r1, #11
  40282c:	2d16      	cmp	r5, #22
  40282e:	b083      	sub	sp, #12
  402830:	4606      	mov	r6, r0
  402832:	f240 809f 	bls.w	402974 <_malloc_r+0x150>
  402836:	f035 0507 	bics.w	r5, r5, #7
  40283a:	f100 80bf 	bmi.w	4029bc <_malloc_r+0x198>
  40283e:	42a9      	cmp	r1, r5
  402840:	f200 80bc 	bhi.w	4029bc <_malloc_r+0x198>
  402844:	f000 faa6 	bl	402d94 <__malloc_lock>
  402848:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40284c:	f0c0 829c 	bcc.w	402d88 <_malloc_r+0x564>
  402850:	0a6b      	lsrs	r3, r5, #9
  402852:	f000 80ba 	beq.w	4029ca <_malloc_r+0x1a6>
  402856:	2b04      	cmp	r3, #4
  402858:	f200 8183 	bhi.w	402b62 <_malloc_r+0x33e>
  40285c:	09a8      	lsrs	r0, r5, #6
  40285e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402862:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402866:	3038      	adds	r0, #56	; 0x38
  402868:	4fc4      	ldr	r7, [pc, #784]	; (402b7c <_malloc_r+0x358>)
  40286a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40286e:	f1a3 0108 	sub.w	r1, r3, #8
  402872:	685c      	ldr	r4, [r3, #4]
  402874:	42a1      	cmp	r1, r4
  402876:	d107      	bne.n	402888 <_malloc_r+0x64>
  402878:	e0ac      	b.n	4029d4 <_malloc_r+0x1b0>
  40287a:	2a00      	cmp	r2, #0
  40287c:	f280 80ac 	bge.w	4029d8 <_malloc_r+0x1b4>
  402880:	68e4      	ldr	r4, [r4, #12]
  402882:	42a1      	cmp	r1, r4
  402884:	f000 80a6 	beq.w	4029d4 <_malloc_r+0x1b0>
  402888:	6863      	ldr	r3, [r4, #4]
  40288a:	f023 0303 	bic.w	r3, r3, #3
  40288e:	1b5a      	subs	r2, r3, r5
  402890:	2a0f      	cmp	r2, #15
  402892:	ddf2      	ble.n	40287a <_malloc_r+0x56>
  402894:	49b9      	ldr	r1, [pc, #740]	; (402b7c <_malloc_r+0x358>)
  402896:	693c      	ldr	r4, [r7, #16]
  402898:	f101 0e08 	add.w	lr, r1, #8
  40289c:	4574      	cmp	r4, lr
  40289e:	f000 81b3 	beq.w	402c08 <_malloc_r+0x3e4>
  4028a2:	6863      	ldr	r3, [r4, #4]
  4028a4:	f023 0303 	bic.w	r3, r3, #3
  4028a8:	1b5a      	subs	r2, r3, r5
  4028aa:	2a0f      	cmp	r2, #15
  4028ac:	f300 8199 	bgt.w	402be2 <_malloc_r+0x3be>
  4028b0:	2a00      	cmp	r2, #0
  4028b2:	f8c1 e014 	str.w	lr, [r1, #20]
  4028b6:	f8c1 e010 	str.w	lr, [r1, #16]
  4028ba:	f280 809e 	bge.w	4029fa <_malloc_r+0x1d6>
  4028be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4028c2:	f080 8167 	bcs.w	402b94 <_malloc_r+0x370>
  4028c6:	08db      	lsrs	r3, r3, #3
  4028c8:	f103 0c01 	add.w	ip, r3, #1
  4028cc:	2201      	movs	r2, #1
  4028ce:	109b      	asrs	r3, r3, #2
  4028d0:	fa02 f303 	lsl.w	r3, r2, r3
  4028d4:	684a      	ldr	r2, [r1, #4]
  4028d6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4028da:	f8c4 8008 	str.w	r8, [r4, #8]
  4028de:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4028e2:	431a      	orrs	r2, r3
  4028e4:	f1a9 0308 	sub.w	r3, r9, #8
  4028e8:	60e3      	str	r3, [r4, #12]
  4028ea:	604a      	str	r2, [r1, #4]
  4028ec:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4028f0:	f8c8 400c 	str.w	r4, [r8, #12]
  4028f4:	1083      	asrs	r3, r0, #2
  4028f6:	2401      	movs	r4, #1
  4028f8:	409c      	lsls	r4, r3
  4028fa:	4294      	cmp	r4, r2
  4028fc:	f200 808a 	bhi.w	402a14 <_malloc_r+0x1f0>
  402900:	4214      	tst	r4, r2
  402902:	d106      	bne.n	402912 <_malloc_r+0xee>
  402904:	f020 0003 	bic.w	r0, r0, #3
  402908:	0064      	lsls	r4, r4, #1
  40290a:	4214      	tst	r4, r2
  40290c:	f100 0004 	add.w	r0, r0, #4
  402910:	d0fa      	beq.n	402908 <_malloc_r+0xe4>
  402912:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402916:	46cc      	mov	ip, r9
  402918:	4680      	mov	r8, r0
  40291a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40291e:	458c      	cmp	ip, r1
  402920:	d107      	bne.n	402932 <_malloc_r+0x10e>
  402922:	e173      	b.n	402c0c <_malloc_r+0x3e8>
  402924:	2a00      	cmp	r2, #0
  402926:	f280 8181 	bge.w	402c2c <_malloc_r+0x408>
  40292a:	68c9      	ldr	r1, [r1, #12]
  40292c:	458c      	cmp	ip, r1
  40292e:	f000 816d 	beq.w	402c0c <_malloc_r+0x3e8>
  402932:	684b      	ldr	r3, [r1, #4]
  402934:	f023 0303 	bic.w	r3, r3, #3
  402938:	1b5a      	subs	r2, r3, r5
  40293a:	2a0f      	cmp	r2, #15
  40293c:	ddf2      	ble.n	402924 <_malloc_r+0x100>
  40293e:	460c      	mov	r4, r1
  402940:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402944:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402948:	194b      	adds	r3, r1, r5
  40294a:	f045 0501 	orr.w	r5, r5, #1
  40294e:	604d      	str	r5, [r1, #4]
  402950:	f042 0101 	orr.w	r1, r2, #1
  402954:	f8c8 c00c 	str.w	ip, [r8, #12]
  402958:	4630      	mov	r0, r6
  40295a:	f8cc 8008 	str.w	r8, [ip, #8]
  40295e:	617b      	str	r3, [r7, #20]
  402960:	613b      	str	r3, [r7, #16]
  402962:	f8c3 e00c 	str.w	lr, [r3, #12]
  402966:	f8c3 e008 	str.w	lr, [r3, #8]
  40296a:	6059      	str	r1, [r3, #4]
  40296c:	509a      	str	r2, [r3, r2]
  40296e:	f000 fa13 	bl	402d98 <__malloc_unlock>
  402972:	e01f      	b.n	4029b4 <_malloc_r+0x190>
  402974:	2910      	cmp	r1, #16
  402976:	d821      	bhi.n	4029bc <_malloc_r+0x198>
  402978:	f000 fa0c 	bl	402d94 <__malloc_lock>
  40297c:	2510      	movs	r5, #16
  40297e:	2306      	movs	r3, #6
  402980:	2002      	movs	r0, #2
  402982:	4f7e      	ldr	r7, [pc, #504]	; (402b7c <_malloc_r+0x358>)
  402984:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402988:	f1a3 0208 	sub.w	r2, r3, #8
  40298c:	685c      	ldr	r4, [r3, #4]
  40298e:	4294      	cmp	r4, r2
  402990:	f000 8145 	beq.w	402c1e <_malloc_r+0x3fa>
  402994:	6863      	ldr	r3, [r4, #4]
  402996:	68e1      	ldr	r1, [r4, #12]
  402998:	68a5      	ldr	r5, [r4, #8]
  40299a:	f023 0303 	bic.w	r3, r3, #3
  40299e:	4423      	add	r3, r4
  4029a0:	4630      	mov	r0, r6
  4029a2:	685a      	ldr	r2, [r3, #4]
  4029a4:	60e9      	str	r1, [r5, #12]
  4029a6:	f042 0201 	orr.w	r2, r2, #1
  4029aa:	608d      	str	r5, [r1, #8]
  4029ac:	605a      	str	r2, [r3, #4]
  4029ae:	f000 f9f3 	bl	402d98 <__malloc_unlock>
  4029b2:	3408      	adds	r4, #8
  4029b4:	4620      	mov	r0, r4
  4029b6:	b003      	add	sp, #12
  4029b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029bc:	2400      	movs	r4, #0
  4029be:	230c      	movs	r3, #12
  4029c0:	4620      	mov	r0, r4
  4029c2:	6033      	str	r3, [r6, #0]
  4029c4:	b003      	add	sp, #12
  4029c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029ca:	2380      	movs	r3, #128	; 0x80
  4029cc:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4029d0:	203f      	movs	r0, #63	; 0x3f
  4029d2:	e749      	b.n	402868 <_malloc_r+0x44>
  4029d4:	4670      	mov	r0, lr
  4029d6:	e75d      	b.n	402894 <_malloc_r+0x70>
  4029d8:	4423      	add	r3, r4
  4029da:	68e1      	ldr	r1, [r4, #12]
  4029dc:	685a      	ldr	r2, [r3, #4]
  4029de:	68a5      	ldr	r5, [r4, #8]
  4029e0:	f042 0201 	orr.w	r2, r2, #1
  4029e4:	60e9      	str	r1, [r5, #12]
  4029e6:	4630      	mov	r0, r6
  4029e8:	608d      	str	r5, [r1, #8]
  4029ea:	605a      	str	r2, [r3, #4]
  4029ec:	f000 f9d4 	bl	402d98 <__malloc_unlock>
  4029f0:	3408      	adds	r4, #8
  4029f2:	4620      	mov	r0, r4
  4029f4:	b003      	add	sp, #12
  4029f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029fa:	4423      	add	r3, r4
  4029fc:	4630      	mov	r0, r6
  4029fe:	685a      	ldr	r2, [r3, #4]
  402a00:	f042 0201 	orr.w	r2, r2, #1
  402a04:	605a      	str	r2, [r3, #4]
  402a06:	f000 f9c7 	bl	402d98 <__malloc_unlock>
  402a0a:	3408      	adds	r4, #8
  402a0c:	4620      	mov	r0, r4
  402a0e:	b003      	add	sp, #12
  402a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a14:	68bc      	ldr	r4, [r7, #8]
  402a16:	6863      	ldr	r3, [r4, #4]
  402a18:	f023 0803 	bic.w	r8, r3, #3
  402a1c:	45a8      	cmp	r8, r5
  402a1e:	d304      	bcc.n	402a2a <_malloc_r+0x206>
  402a20:	ebc5 0308 	rsb	r3, r5, r8
  402a24:	2b0f      	cmp	r3, #15
  402a26:	f300 808c 	bgt.w	402b42 <_malloc_r+0x31e>
  402a2a:	4b55      	ldr	r3, [pc, #340]	; (402b80 <_malloc_r+0x35c>)
  402a2c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 402b90 <_malloc_r+0x36c>
  402a30:	681a      	ldr	r2, [r3, #0]
  402a32:	f8d9 3000 	ldr.w	r3, [r9]
  402a36:	3301      	adds	r3, #1
  402a38:	442a      	add	r2, r5
  402a3a:	eb04 0a08 	add.w	sl, r4, r8
  402a3e:	f000 8160 	beq.w	402d02 <_malloc_r+0x4de>
  402a42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402a46:	320f      	adds	r2, #15
  402a48:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402a4c:	f022 020f 	bic.w	r2, r2, #15
  402a50:	4611      	mov	r1, r2
  402a52:	4630      	mov	r0, r6
  402a54:	9201      	str	r2, [sp, #4]
  402a56:	f000 f9a1 	bl	402d9c <_sbrk_r>
  402a5a:	f1b0 3fff 	cmp.w	r0, #4294967295
  402a5e:	4683      	mov	fp, r0
  402a60:	9a01      	ldr	r2, [sp, #4]
  402a62:	f000 8158 	beq.w	402d16 <_malloc_r+0x4f2>
  402a66:	4582      	cmp	sl, r0
  402a68:	f200 80fc 	bhi.w	402c64 <_malloc_r+0x440>
  402a6c:	4b45      	ldr	r3, [pc, #276]	; (402b84 <_malloc_r+0x360>)
  402a6e:	6819      	ldr	r1, [r3, #0]
  402a70:	45da      	cmp	sl, fp
  402a72:	4411      	add	r1, r2
  402a74:	6019      	str	r1, [r3, #0]
  402a76:	f000 8153 	beq.w	402d20 <_malloc_r+0x4fc>
  402a7a:	f8d9 0000 	ldr.w	r0, [r9]
  402a7e:	f8df e110 	ldr.w	lr, [pc, #272]	; 402b90 <_malloc_r+0x36c>
  402a82:	3001      	adds	r0, #1
  402a84:	bf1b      	ittet	ne
  402a86:	ebca 0a0b 	rsbne	sl, sl, fp
  402a8a:	4451      	addne	r1, sl
  402a8c:	f8ce b000 	streq.w	fp, [lr]
  402a90:	6019      	strne	r1, [r3, #0]
  402a92:	f01b 0107 	ands.w	r1, fp, #7
  402a96:	f000 8117 	beq.w	402cc8 <_malloc_r+0x4a4>
  402a9a:	f1c1 0008 	rsb	r0, r1, #8
  402a9e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402aa2:	4483      	add	fp, r0
  402aa4:	3108      	adds	r1, #8
  402aa6:	445a      	add	r2, fp
  402aa8:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402aac:	ebc2 0901 	rsb	r9, r2, r1
  402ab0:	4649      	mov	r1, r9
  402ab2:	4630      	mov	r0, r6
  402ab4:	9301      	str	r3, [sp, #4]
  402ab6:	f000 f971 	bl	402d9c <_sbrk_r>
  402aba:	1c43      	adds	r3, r0, #1
  402abc:	9b01      	ldr	r3, [sp, #4]
  402abe:	f000 813f 	beq.w	402d40 <_malloc_r+0x51c>
  402ac2:	ebcb 0200 	rsb	r2, fp, r0
  402ac6:	444a      	add	r2, r9
  402ac8:	f042 0201 	orr.w	r2, r2, #1
  402acc:	6819      	ldr	r1, [r3, #0]
  402ace:	f8c7 b008 	str.w	fp, [r7, #8]
  402ad2:	4449      	add	r1, r9
  402ad4:	42bc      	cmp	r4, r7
  402ad6:	f8cb 2004 	str.w	r2, [fp, #4]
  402ada:	6019      	str	r1, [r3, #0]
  402adc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 402b84 <_malloc_r+0x360>
  402ae0:	d016      	beq.n	402b10 <_malloc_r+0x2ec>
  402ae2:	f1b8 0f0f 	cmp.w	r8, #15
  402ae6:	f240 80fd 	bls.w	402ce4 <_malloc_r+0x4c0>
  402aea:	6862      	ldr	r2, [r4, #4]
  402aec:	f1a8 030c 	sub.w	r3, r8, #12
  402af0:	f023 0307 	bic.w	r3, r3, #7
  402af4:	18e0      	adds	r0, r4, r3
  402af6:	f002 0201 	and.w	r2, r2, #1
  402afa:	f04f 0e05 	mov.w	lr, #5
  402afe:	431a      	orrs	r2, r3
  402b00:	2b0f      	cmp	r3, #15
  402b02:	6062      	str	r2, [r4, #4]
  402b04:	f8c0 e004 	str.w	lr, [r0, #4]
  402b08:	f8c0 e008 	str.w	lr, [r0, #8]
  402b0c:	f200 811c 	bhi.w	402d48 <_malloc_r+0x524>
  402b10:	4b1d      	ldr	r3, [pc, #116]	; (402b88 <_malloc_r+0x364>)
  402b12:	68bc      	ldr	r4, [r7, #8]
  402b14:	681a      	ldr	r2, [r3, #0]
  402b16:	4291      	cmp	r1, r2
  402b18:	bf88      	it	hi
  402b1a:	6019      	strhi	r1, [r3, #0]
  402b1c:	4b1b      	ldr	r3, [pc, #108]	; (402b8c <_malloc_r+0x368>)
  402b1e:	681a      	ldr	r2, [r3, #0]
  402b20:	4291      	cmp	r1, r2
  402b22:	6862      	ldr	r2, [r4, #4]
  402b24:	bf88      	it	hi
  402b26:	6019      	strhi	r1, [r3, #0]
  402b28:	f022 0203 	bic.w	r2, r2, #3
  402b2c:	4295      	cmp	r5, r2
  402b2e:	eba2 0305 	sub.w	r3, r2, r5
  402b32:	d801      	bhi.n	402b38 <_malloc_r+0x314>
  402b34:	2b0f      	cmp	r3, #15
  402b36:	dc04      	bgt.n	402b42 <_malloc_r+0x31e>
  402b38:	4630      	mov	r0, r6
  402b3a:	f000 f92d 	bl	402d98 <__malloc_unlock>
  402b3e:	2400      	movs	r4, #0
  402b40:	e738      	b.n	4029b4 <_malloc_r+0x190>
  402b42:	1962      	adds	r2, r4, r5
  402b44:	f043 0301 	orr.w	r3, r3, #1
  402b48:	f045 0501 	orr.w	r5, r5, #1
  402b4c:	6065      	str	r5, [r4, #4]
  402b4e:	4630      	mov	r0, r6
  402b50:	60ba      	str	r2, [r7, #8]
  402b52:	6053      	str	r3, [r2, #4]
  402b54:	f000 f920 	bl	402d98 <__malloc_unlock>
  402b58:	3408      	adds	r4, #8
  402b5a:	4620      	mov	r0, r4
  402b5c:	b003      	add	sp, #12
  402b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b62:	2b14      	cmp	r3, #20
  402b64:	d971      	bls.n	402c4a <_malloc_r+0x426>
  402b66:	2b54      	cmp	r3, #84	; 0x54
  402b68:	f200 80a4 	bhi.w	402cb4 <_malloc_r+0x490>
  402b6c:	0b28      	lsrs	r0, r5, #12
  402b6e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  402b72:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402b76:	306e      	adds	r0, #110	; 0x6e
  402b78:	e676      	b.n	402868 <_malloc_r+0x44>
  402b7a:	bf00      	nop
  402b7c:	2040043c 	.word	0x2040043c
  402b80:	204008f8 	.word	0x204008f8
  402b84:	204008fc 	.word	0x204008fc
  402b88:	204008f4 	.word	0x204008f4
  402b8c:	204008f0 	.word	0x204008f0
  402b90:	20400848 	.word	0x20400848
  402b94:	0a5a      	lsrs	r2, r3, #9
  402b96:	2a04      	cmp	r2, #4
  402b98:	d95e      	bls.n	402c58 <_malloc_r+0x434>
  402b9a:	2a14      	cmp	r2, #20
  402b9c:	f200 80b3 	bhi.w	402d06 <_malloc_r+0x4e2>
  402ba0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402ba4:	0049      	lsls	r1, r1, #1
  402ba6:	325b      	adds	r2, #91	; 0x5b
  402ba8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  402bac:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  402bb0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 402d90 <_malloc_r+0x56c>
  402bb4:	f1ac 0c08 	sub.w	ip, ip, #8
  402bb8:	458c      	cmp	ip, r1
  402bba:	f000 8088 	beq.w	402cce <_malloc_r+0x4aa>
  402bbe:	684a      	ldr	r2, [r1, #4]
  402bc0:	f022 0203 	bic.w	r2, r2, #3
  402bc4:	4293      	cmp	r3, r2
  402bc6:	d202      	bcs.n	402bce <_malloc_r+0x3aa>
  402bc8:	6889      	ldr	r1, [r1, #8]
  402bca:	458c      	cmp	ip, r1
  402bcc:	d1f7      	bne.n	402bbe <_malloc_r+0x39a>
  402bce:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402bd2:	687a      	ldr	r2, [r7, #4]
  402bd4:	f8c4 c00c 	str.w	ip, [r4, #12]
  402bd8:	60a1      	str	r1, [r4, #8]
  402bda:	f8cc 4008 	str.w	r4, [ip, #8]
  402bde:	60cc      	str	r4, [r1, #12]
  402be0:	e688      	b.n	4028f4 <_malloc_r+0xd0>
  402be2:	1963      	adds	r3, r4, r5
  402be4:	f042 0701 	orr.w	r7, r2, #1
  402be8:	f045 0501 	orr.w	r5, r5, #1
  402bec:	6065      	str	r5, [r4, #4]
  402bee:	4630      	mov	r0, r6
  402bf0:	614b      	str	r3, [r1, #20]
  402bf2:	610b      	str	r3, [r1, #16]
  402bf4:	f8c3 e00c 	str.w	lr, [r3, #12]
  402bf8:	f8c3 e008 	str.w	lr, [r3, #8]
  402bfc:	605f      	str	r7, [r3, #4]
  402bfe:	509a      	str	r2, [r3, r2]
  402c00:	3408      	adds	r4, #8
  402c02:	f000 f8c9 	bl	402d98 <__malloc_unlock>
  402c06:	e6d5      	b.n	4029b4 <_malloc_r+0x190>
  402c08:	684a      	ldr	r2, [r1, #4]
  402c0a:	e673      	b.n	4028f4 <_malloc_r+0xd0>
  402c0c:	f108 0801 	add.w	r8, r8, #1
  402c10:	f018 0f03 	tst.w	r8, #3
  402c14:	f10c 0c08 	add.w	ip, ip, #8
  402c18:	f47f ae7f 	bne.w	40291a <_malloc_r+0xf6>
  402c1c:	e030      	b.n	402c80 <_malloc_r+0x45c>
  402c1e:	68dc      	ldr	r4, [r3, #12]
  402c20:	42a3      	cmp	r3, r4
  402c22:	bf08      	it	eq
  402c24:	3002      	addeq	r0, #2
  402c26:	f43f ae35 	beq.w	402894 <_malloc_r+0x70>
  402c2a:	e6b3      	b.n	402994 <_malloc_r+0x170>
  402c2c:	440b      	add	r3, r1
  402c2e:	460c      	mov	r4, r1
  402c30:	685a      	ldr	r2, [r3, #4]
  402c32:	68c9      	ldr	r1, [r1, #12]
  402c34:	f854 5f08 	ldr.w	r5, [r4, #8]!
  402c38:	f042 0201 	orr.w	r2, r2, #1
  402c3c:	605a      	str	r2, [r3, #4]
  402c3e:	4630      	mov	r0, r6
  402c40:	60e9      	str	r1, [r5, #12]
  402c42:	608d      	str	r5, [r1, #8]
  402c44:	f000 f8a8 	bl	402d98 <__malloc_unlock>
  402c48:	e6b4      	b.n	4029b4 <_malloc_r+0x190>
  402c4a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  402c4e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  402c52:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402c56:	e607      	b.n	402868 <_malloc_r+0x44>
  402c58:	099a      	lsrs	r2, r3, #6
  402c5a:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402c5e:	0049      	lsls	r1, r1, #1
  402c60:	3238      	adds	r2, #56	; 0x38
  402c62:	e7a1      	b.n	402ba8 <_malloc_r+0x384>
  402c64:	42bc      	cmp	r4, r7
  402c66:	4b4a      	ldr	r3, [pc, #296]	; (402d90 <_malloc_r+0x56c>)
  402c68:	f43f af00 	beq.w	402a6c <_malloc_r+0x248>
  402c6c:	689c      	ldr	r4, [r3, #8]
  402c6e:	6862      	ldr	r2, [r4, #4]
  402c70:	f022 0203 	bic.w	r2, r2, #3
  402c74:	e75a      	b.n	402b2c <_malloc_r+0x308>
  402c76:	f859 3908 	ldr.w	r3, [r9], #-8
  402c7a:	4599      	cmp	r9, r3
  402c7c:	f040 8082 	bne.w	402d84 <_malloc_r+0x560>
  402c80:	f010 0f03 	tst.w	r0, #3
  402c84:	f100 30ff 	add.w	r0, r0, #4294967295
  402c88:	d1f5      	bne.n	402c76 <_malloc_r+0x452>
  402c8a:	687b      	ldr	r3, [r7, #4]
  402c8c:	ea23 0304 	bic.w	r3, r3, r4
  402c90:	607b      	str	r3, [r7, #4]
  402c92:	0064      	lsls	r4, r4, #1
  402c94:	429c      	cmp	r4, r3
  402c96:	f63f aebd 	bhi.w	402a14 <_malloc_r+0x1f0>
  402c9a:	2c00      	cmp	r4, #0
  402c9c:	f43f aeba 	beq.w	402a14 <_malloc_r+0x1f0>
  402ca0:	421c      	tst	r4, r3
  402ca2:	4640      	mov	r0, r8
  402ca4:	f47f ae35 	bne.w	402912 <_malloc_r+0xee>
  402ca8:	0064      	lsls	r4, r4, #1
  402caa:	421c      	tst	r4, r3
  402cac:	f100 0004 	add.w	r0, r0, #4
  402cb0:	d0fa      	beq.n	402ca8 <_malloc_r+0x484>
  402cb2:	e62e      	b.n	402912 <_malloc_r+0xee>
  402cb4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402cb8:	d818      	bhi.n	402cec <_malloc_r+0x4c8>
  402cba:	0be8      	lsrs	r0, r5, #15
  402cbc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  402cc0:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402cc4:	3077      	adds	r0, #119	; 0x77
  402cc6:	e5cf      	b.n	402868 <_malloc_r+0x44>
  402cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402ccc:	e6eb      	b.n	402aa6 <_malloc_r+0x282>
  402cce:	2101      	movs	r1, #1
  402cd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402cd4:	1092      	asrs	r2, r2, #2
  402cd6:	fa01 f202 	lsl.w	r2, r1, r2
  402cda:	431a      	orrs	r2, r3
  402cdc:	f8c8 2004 	str.w	r2, [r8, #4]
  402ce0:	4661      	mov	r1, ip
  402ce2:	e777      	b.n	402bd4 <_malloc_r+0x3b0>
  402ce4:	2301      	movs	r3, #1
  402ce6:	f8cb 3004 	str.w	r3, [fp, #4]
  402cea:	e725      	b.n	402b38 <_malloc_r+0x314>
  402cec:	f240 5254 	movw	r2, #1364	; 0x554
  402cf0:	4293      	cmp	r3, r2
  402cf2:	d820      	bhi.n	402d36 <_malloc_r+0x512>
  402cf4:	0ca8      	lsrs	r0, r5, #18
  402cf6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  402cfa:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402cfe:	307c      	adds	r0, #124	; 0x7c
  402d00:	e5b2      	b.n	402868 <_malloc_r+0x44>
  402d02:	3210      	adds	r2, #16
  402d04:	e6a4      	b.n	402a50 <_malloc_r+0x22c>
  402d06:	2a54      	cmp	r2, #84	; 0x54
  402d08:	d826      	bhi.n	402d58 <_malloc_r+0x534>
  402d0a:	0b1a      	lsrs	r2, r3, #12
  402d0c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402d10:	0049      	lsls	r1, r1, #1
  402d12:	326e      	adds	r2, #110	; 0x6e
  402d14:	e748      	b.n	402ba8 <_malloc_r+0x384>
  402d16:	68bc      	ldr	r4, [r7, #8]
  402d18:	6862      	ldr	r2, [r4, #4]
  402d1a:	f022 0203 	bic.w	r2, r2, #3
  402d1e:	e705      	b.n	402b2c <_malloc_r+0x308>
  402d20:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402d24:	2800      	cmp	r0, #0
  402d26:	f47f aea8 	bne.w	402a7a <_malloc_r+0x256>
  402d2a:	4442      	add	r2, r8
  402d2c:	68bb      	ldr	r3, [r7, #8]
  402d2e:	f042 0201 	orr.w	r2, r2, #1
  402d32:	605a      	str	r2, [r3, #4]
  402d34:	e6ec      	b.n	402b10 <_malloc_r+0x2ec>
  402d36:	23fe      	movs	r3, #254	; 0xfe
  402d38:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  402d3c:	207e      	movs	r0, #126	; 0x7e
  402d3e:	e593      	b.n	402868 <_malloc_r+0x44>
  402d40:	2201      	movs	r2, #1
  402d42:	f04f 0900 	mov.w	r9, #0
  402d46:	e6c1      	b.n	402acc <_malloc_r+0x2a8>
  402d48:	f104 0108 	add.w	r1, r4, #8
  402d4c:	4630      	mov	r0, r6
  402d4e:	f7ff fc1f 	bl	402590 <_free_r>
  402d52:	f8d9 1000 	ldr.w	r1, [r9]
  402d56:	e6db      	b.n	402b10 <_malloc_r+0x2ec>
  402d58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402d5c:	d805      	bhi.n	402d6a <_malloc_r+0x546>
  402d5e:	0bda      	lsrs	r2, r3, #15
  402d60:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402d64:	0049      	lsls	r1, r1, #1
  402d66:	3277      	adds	r2, #119	; 0x77
  402d68:	e71e      	b.n	402ba8 <_malloc_r+0x384>
  402d6a:	f240 5154 	movw	r1, #1364	; 0x554
  402d6e:	428a      	cmp	r2, r1
  402d70:	d805      	bhi.n	402d7e <_malloc_r+0x55a>
  402d72:	0c9a      	lsrs	r2, r3, #18
  402d74:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402d78:	0049      	lsls	r1, r1, #1
  402d7a:	327c      	adds	r2, #124	; 0x7c
  402d7c:	e714      	b.n	402ba8 <_malloc_r+0x384>
  402d7e:	21fe      	movs	r1, #254	; 0xfe
  402d80:	227e      	movs	r2, #126	; 0x7e
  402d82:	e711      	b.n	402ba8 <_malloc_r+0x384>
  402d84:	687b      	ldr	r3, [r7, #4]
  402d86:	e784      	b.n	402c92 <_malloc_r+0x46e>
  402d88:	08e8      	lsrs	r0, r5, #3
  402d8a:	1c43      	adds	r3, r0, #1
  402d8c:	005b      	lsls	r3, r3, #1
  402d8e:	e5f8      	b.n	402982 <_malloc_r+0x15e>
  402d90:	2040043c 	.word	0x2040043c

00402d94 <__malloc_lock>:
  402d94:	4770      	bx	lr
  402d96:	bf00      	nop

00402d98 <__malloc_unlock>:
  402d98:	4770      	bx	lr
  402d9a:	bf00      	nop

00402d9c <_sbrk_r>:
  402d9c:	b538      	push	{r3, r4, r5, lr}
  402d9e:	4c07      	ldr	r4, [pc, #28]	; (402dbc <_sbrk_r+0x20>)
  402da0:	2300      	movs	r3, #0
  402da2:	4605      	mov	r5, r0
  402da4:	4608      	mov	r0, r1
  402da6:	6023      	str	r3, [r4, #0]
  402da8:	f7fe fc44 	bl	401634 <_sbrk>
  402dac:	1c43      	adds	r3, r0, #1
  402dae:	d000      	beq.n	402db2 <_sbrk_r+0x16>
  402db0:	bd38      	pop	{r3, r4, r5, pc}
  402db2:	6823      	ldr	r3, [r4, #0]
  402db4:	2b00      	cmp	r3, #0
  402db6:	d0fb      	beq.n	402db0 <_sbrk_r+0x14>
  402db8:	602b      	str	r3, [r5, #0]
  402dba:	bd38      	pop	{r3, r4, r5, pc}
  402dbc:	20400938 	.word	0x20400938

00402dc0 <__sread>:
  402dc0:	b510      	push	{r4, lr}
  402dc2:	460c      	mov	r4, r1
  402dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402dc8:	f000 f924 	bl	403014 <_read_r>
  402dcc:	2800      	cmp	r0, #0
  402dce:	db03      	blt.n	402dd8 <__sread+0x18>
  402dd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402dd2:	4403      	add	r3, r0
  402dd4:	6523      	str	r3, [r4, #80]	; 0x50
  402dd6:	bd10      	pop	{r4, pc}
  402dd8:	89a3      	ldrh	r3, [r4, #12]
  402dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402dde:	81a3      	strh	r3, [r4, #12]
  402de0:	bd10      	pop	{r4, pc}
  402de2:	bf00      	nop

00402de4 <__swrite>:
  402de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402de8:	4616      	mov	r6, r2
  402dea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402dee:	461f      	mov	r7, r3
  402df0:	05d3      	lsls	r3, r2, #23
  402df2:	460c      	mov	r4, r1
  402df4:	4605      	mov	r5, r0
  402df6:	d507      	bpl.n	402e08 <__swrite+0x24>
  402df8:	2200      	movs	r2, #0
  402dfa:	2302      	movs	r3, #2
  402dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402e00:	f000 f8f2 	bl	402fe8 <_lseek_r>
  402e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402e0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402e10:	81a2      	strh	r2, [r4, #12]
  402e12:	463b      	mov	r3, r7
  402e14:	4632      	mov	r2, r6
  402e16:	4628      	mov	r0, r5
  402e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402e1c:	f000 b814 	b.w	402e48 <_write_r>

00402e20 <__sseek>:
  402e20:	b510      	push	{r4, lr}
  402e22:	460c      	mov	r4, r1
  402e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402e28:	f000 f8de 	bl	402fe8 <_lseek_r>
  402e2c:	89a3      	ldrh	r3, [r4, #12]
  402e2e:	1c42      	adds	r2, r0, #1
  402e30:	bf0e      	itee	eq
  402e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402e3a:	6520      	strne	r0, [r4, #80]	; 0x50
  402e3c:	81a3      	strh	r3, [r4, #12]
  402e3e:	bd10      	pop	{r4, pc}

00402e40 <__sclose>:
  402e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402e44:	f000 b868 	b.w	402f18 <_close_r>

00402e48 <_write_r>:
  402e48:	b570      	push	{r4, r5, r6, lr}
  402e4a:	460d      	mov	r5, r1
  402e4c:	4c08      	ldr	r4, [pc, #32]	; (402e70 <_write_r+0x28>)
  402e4e:	4611      	mov	r1, r2
  402e50:	4606      	mov	r6, r0
  402e52:	461a      	mov	r2, r3
  402e54:	4628      	mov	r0, r5
  402e56:	2300      	movs	r3, #0
  402e58:	6023      	str	r3, [r4, #0]
  402e5a:	f7fd fa99 	bl	400390 <_write>
  402e5e:	1c43      	adds	r3, r0, #1
  402e60:	d000      	beq.n	402e64 <_write_r+0x1c>
  402e62:	bd70      	pop	{r4, r5, r6, pc}
  402e64:	6823      	ldr	r3, [r4, #0]
  402e66:	2b00      	cmp	r3, #0
  402e68:	d0fb      	beq.n	402e62 <_write_r+0x1a>
  402e6a:	6033      	str	r3, [r6, #0]
  402e6c:	bd70      	pop	{r4, r5, r6, pc}
  402e6e:	bf00      	nop
  402e70:	20400938 	.word	0x20400938

00402e74 <__register_exitproc>:
  402e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402e78:	4c25      	ldr	r4, [pc, #148]	; (402f10 <__register_exitproc+0x9c>)
  402e7a:	6825      	ldr	r5, [r4, #0]
  402e7c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402e80:	4606      	mov	r6, r0
  402e82:	4688      	mov	r8, r1
  402e84:	4692      	mov	sl, r2
  402e86:	4699      	mov	r9, r3
  402e88:	b3c4      	cbz	r4, 402efc <__register_exitproc+0x88>
  402e8a:	6860      	ldr	r0, [r4, #4]
  402e8c:	281f      	cmp	r0, #31
  402e8e:	dc17      	bgt.n	402ec0 <__register_exitproc+0x4c>
  402e90:	1c43      	adds	r3, r0, #1
  402e92:	b176      	cbz	r6, 402eb2 <__register_exitproc+0x3e>
  402e94:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402e98:	2201      	movs	r2, #1
  402e9a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402e9e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402ea2:	4082      	lsls	r2, r0
  402ea4:	4311      	orrs	r1, r2
  402ea6:	2e02      	cmp	r6, #2
  402ea8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402eac:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402eb0:	d01e      	beq.n	402ef0 <__register_exitproc+0x7c>
  402eb2:	3002      	adds	r0, #2
  402eb4:	6063      	str	r3, [r4, #4]
  402eb6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402eba:	2000      	movs	r0, #0
  402ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ec0:	4b14      	ldr	r3, [pc, #80]	; (402f14 <__register_exitproc+0xa0>)
  402ec2:	b303      	cbz	r3, 402f06 <__register_exitproc+0x92>
  402ec4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402ec8:	f7ff fca4 	bl	402814 <malloc>
  402ecc:	4604      	mov	r4, r0
  402ece:	b1d0      	cbz	r0, 402f06 <__register_exitproc+0x92>
  402ed0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402ed4:	2700      	movs	r7, #0
  402ed6:	e880 0088 	stmia.w	r0, {r3, r7}
  402eda:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402ede:	4638      	mov	r0, r7
  402ee0:	2301      	movs	r3, #1
  402ee2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402ee6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402eea:	2e00      	cmp	r6, #0
  402eec:	d0e1      	beq.n	402eb2 <__register_exitproc+0x3e>
  402eee:	e7d1      	b.n	402e94 <__register_exitproc+0x20>
  402ef0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402ef4:	430a      	orrs	r2, r1
  402ef6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402efa:	e7da      	b.n	402eb2 <__register_exitproc+0x3e>
  402efc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402f00:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402f04:	e7c1      	b.n	402e8a <__register_exitproc+0x16>
  402f06:	f04f 30ff 	mov.w	r0, #4294967295
  402f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f0e:	bf00      	nop
  402f10:	00403044 	.word	0x00403044
  402f14:	00402815 	.word	0x00402815

00402f18 <_close_r>:
  402f18:	b538      	push	{r3, r4, r5, lr}
  402f1a:	4c07      	ldr	r4, [pc, #28]	; (402f38 <_close_r+0x20>)
  402f1c:	2300      	movs	r3, #0
  402f1e:	4605      	mov	r5, r0
  402f20:	4608      	mov	r0, r1
  402f22:	6023      	str	r3, [r4, #0]
  402f24:	f7fe fbb2 	bl	40168c <_close>
  402f28:	1c43      	adds	r3, r0, #1
  402f2a:	d000      	beq.n	402f2e <_close_r+0x16>
  402f2c:	bd38      	pop	{r3, r4, r5, pc}
  402f2e:	6823      	ldr	r3, [r4, #0]
  402f30:	2b00      	cmp	r3, #0
  402f32:	d0fb      	beq.n	402f2c <_close_r+0x14>
  402f34:	602b      	str	r3, [r5, #0]
  402f36:	bd38      	pop	{r3, r4, r5, pc}
  402f38:	20400938 	.word	0x20400938

00402f3c <_fclose_r>:
  402f3c:	2900      	cmp	r1, #0
  402f3e:	d03d      	beq.n	402fbc <_fclose_r+0x80>
  402f40:	b570      	push	{r4, r5, r6, lr}
  402f42:	4605      	mov	r5, r0
  402f44:	460c      	mov	r4, r1
  402f46:	b108      	cbz	r0, 402f4c <_fclose_r+0x10>
  402f48:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402f4a:	b37b      	cbz	r3, 402fac <_fclose_r+0x70>
  402f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f50:	b90b      	cbnz	r3, 402f56 <_fclose_r+0x1a>
  402f52:	2000      	movs	r0, #0
  402f54:	bd70      	pop	{r4, r5, r6, pc}
  402f56:	4621      	mov	r1, r4
  402f58:	4628      	mov	r0, r5
  402f5a:	f7ff f975 	bl	402248 <__sflush_r>
  402f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402f60:	4606      	mov	r6, r0
  402f62:	b133      	cbz	r3, 402f72 <_fclose_r+0x36>
  402f64:	69e1      	ldr	r1, [r4, #28]
  402f66:	4628      	mov	r0, r5
  402f68:	4798      	blx	r3
  402f6a:	2800      	cmp	r0, #0
  402f6c:	bfb8      	it	lt
  402f6e:	f04f 36ff 	movlt.w	r6, #4294967295
  402f72:	89a3      	ldrh	r3, [r4, #12]
  402f74:	061b      	lsls	r3, r3, #24
  402f76:	d41c      	bmi.n	402fb2 <_fclose_r+0x76>
  402f78:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402f7a:	b141      	cbz	r1, 402f8e <_fclose_r+0x52>
  402f7c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402f80:	4299      	cmp	r1, r3
  402f82:	d002      	beq.n	402f8a <_fclose_r+0x4e>
  402f84:	4628      	mov	r0, r5
  402f86:	f7ff fb03 	bl	402590 <_free_r>
  402f8a:	2300      	movs	r3, #0
  402f8c:	6323      	str	r3, [r4, #48]	; 0x30
  402f8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402f90:	b121      	cbz	r1, 402f9c <_fclose_r+0x60>
  402f92:	4628      	mov	r0, r5
  402f94:	f7ff fafc 	bl	402590 <_free_r>
  402f98:	2300      	movs	r3, #0
  402f9a:	6463      	str	r3, [r4, #68]	; 0x44
  402f9c:	f7ff fa92 	bl	4024c4 <__sfp_lock_acquire>
  402fa0:	2300      	movs	r3, #0
  402fa2:	81a3      	strh	r3, [r4, #12]
  402fa4:	f7ff fa90 	bl	4024c8 <__sfp_lock_release>
  402fa8:	4630      	mov	r0, r6
  402faa:	bd70      	pop	{r4, r5, r6, pc}
  402fac:	f7ff fa84 	bl	4024b8 <__sinit>
  402fb0:	e7cc      	b.n	402f4c <_fclose_r+0x10>
  402fb2:	6921      	ldr	r1, [r4, #16]
  402fb4:	4628      	mov	r0, r5
  402fb6:	f7ff faeb 	bl	402590 <_free_r>
  402fba:	e7dd      	b.n	402f78 <_fclose_r+0x3c>
  402fbc:	2000      	movs	r0, #0
  402fbe:	4770      	bx	lr

00402fc0 <_fstat_r>:
  402fc0:	b538      	push	{r3, r4, r5, lr}
  402fc2:	460b      	mov	r3, r1
  402fc4:	4c07      	ldr	r4, [pc, #28]	; (402fe4 <_fstat_r+0x24>)
  402fc6:	4605      	mov	r5, r0
  402fc8:	4611      	mov	r1, r2
  402fca:	4618      	mov	r0, r3
  402fcc:	2300      	movs	r3, #0
  402fce:	6023      	str	r3, [r4, #0]
  402fd0:	f7fe fb68 	bl	4016a4 <_fstat>
  402fd4:	1c43      	adds	r3, r0, #1
  402fd6:	d000      	beq.n	402fda <_fstat_r+0x1a>
  402fd8:	bd38      	pop	{r3, r4, r5, pc}
  402fda:	6823      	ldr	r3, [r4, #0]
  402fdc:	2b00      	cmp	r3, #0
  402fde:	d0fb      	beq.n	402fd8 <_fstat_r+0x18>
  402fe0:	602b      	str	r3, [r5, #0]
  402fe2:	bd38      	pop	{r3, r4, r5, pc}
  402fe4:	20400938 	.word	0x20400938

00402fe8 <_lseek_r>:
  402fe8:	b570      	push	{r4, r5, r6, lr}
  402fea:	460d      	mov	r5, r1
  402fec:	4c08      	ldr	r4, [pc, #32]	; (403010 <_lseek_r+0x28>)
  402fee:	4611      	mov	r1, r2
  402ff0:	4606      	mov	r6, r0
  402ff2:	461a      	mov	r2, r3
  402ff4:	4628      	mov	r0, r5
  402ff6:	2300      	movs	r3, #0
  402ff8:	6023      	str	r3, [r4, #0]
  402ffa:	f7fe fb63 	bl	4016c4 <_lseek>
  402ffe:	1c43      	adds	r3, r0, #1
  403000:	d000      	beq.n	403004 <_lseek_r+0x1c>
  403002:	bd70      	pop	{r4, r5, r6, pc}
  403004:	6823      	ldr	r3, [r4, #0]
  403006:	2b00      	cmp	r3, #0
  403008:	d0fb      	beq.n	403002 <_lseek_r+0x1a>
  40300a:	6033      	str	r3, [r6, #0]
  40300c:	bd70      	pop	{r4, r5, r6, pc}
  40300e:	bf00      	nop
  403010:	20400938 	.word	0x20400938

00403014 <_read_r>:
  403014:	b570      	push	{r4, r5, r6, lr}
  403016:	460d      	mov	r5, r1
  403018:	4c08      	ldr	r4, [pc, #32]	; (40303c <_read_r+0x28>)
  40301a:	4611      	mov	r1, r2
  40301c:	4606      	mov	r6, r0
  40301e:	461a      	mov	r2, r3
  403020:	4628      	mov	r0, r5
  403022:	2300      	movs	r3, #0
  403024:	6023      	str	r3, [r4, #0]
  403026:	f7fd f989 	bl	40033c <_read>
  40302a:	1c43      	adds	r3, r0, #1
  40302c:	d000      	beq.n	403030 <_read_r+0x1c>
  40302e:	bd70      	pop	{r4, r5, r6, pc}
  403030:	6823      	ldr	r3, [r4, #0]
  403032:	2b00      	cmp	r3, #0
  403034:	d0fb      	beq.n	40302e <_read_r+0x1a>
  403036:	6033      	str	r3, [r6, #0]
  403038:	bd70      	pop	{r4, r5, r6, pc}
  40303a:	bf00      	nop
  40303c:	20400938 	.word	0x20400938
  403040:	00000043 	.word	0x00000043

00403044 <_global_impure_ptr>:
  403044:	20400010                                ..@ 

00403048 <_init>:
  403048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40304a:	bf00      	nop
  40304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40304e:	bc08      	pop	{r3}
  403050:	469e      	mov	lr, r3
  403052:	4770      	bx	lr

00403054 <__init_array_start>:
  403054:	00402229 	.word	0x00402229

00403058 <__frame_dummy_init_array_entry>:
  403058:	00400165                                e.@.

0040305c <_fini>:
  40305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40305e:	bf00      	nop
  403060:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403062:	bc08      	pop	{r3}
  403064:	469e      	mov	lr, r3
  403066:	4770      	bx	lr

00403068 <__fini_array_start>:
  403068:	00400141 	.word	0x00400141
