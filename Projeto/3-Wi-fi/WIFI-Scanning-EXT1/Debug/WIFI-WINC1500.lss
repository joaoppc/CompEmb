
WIFI-WINC1500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000077b4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004077b4  004077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000884  20400000  004077bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000011c  20400884  00408040  00020884  2**2
                  ALLOC
  4 .stack        00002000  204009a0  0040815c  00020884  2**0
                  ALLOC
  5 .heap         00000200  204029a0  0040a15c  00020884  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208b2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00019094  00000000  00000000  0002090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003aa9  00000000  00000000  0003999f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b6ff  00000000  00000000  0003d448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f88  00000000  00000000  00048b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f98  00000000  00000000  00049acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002394d  00000000  00000000  0004aa67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001429f  00000000  00000000  0006e3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000905d6  00000000  00000000  00082653  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003344  00000000  00000000  00112c2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204029a0 	.word	0x204029a0
  400004:	0040308d 	.word	0x0040308d
  400008:	00403089 	.word	0x00403089
  40000c:	00403089 	.word	0x00403089
  400010:	00403089 	.word	0x00403089
  400014:	00403089 	.word	0x00403089
  400018:	00403089 	.word	0x00403089
	...
  40002c:	00403089 	.word	0x00403089
  400030:	00403089 	.word	0x00403089
  400034:	00000000 	.word	0x00000000
  400038:	00403089 	.word	0x00403089
  40003c:	00403089 	.word	0x00403089
  400040:	00403089 	.word	0x00403089
  400044:	00403089 	.word	0x00403089
  400048:	00403089 	.word	0x00403089
  40004c:	00403089 	.word	0x00403089
  400050:	00403089 	.word	0x00403089
  400054:	00403089 	.word	0x00403089
  400058:	00403089 	.word	0x00403089
  40005c:	00403089 	.word	0x00403089
  400060:	00403089 	.word	0x00403089
  400064:	00000000 	.word	0x00000000
  400068:	00402b79 	.word	0x00402b79
  40006c:	00402b8d 	.word	0x00402b8d
  400070:	00402ba1 	.word	0x00402ba1
  400074:	00403089 	.word	0x00403089
  400078:	00403089 	.word	0x00403089
  40007c:	00403089 	.word	0x00403089
  400080:	00402bb5 	.word	0x00402bb5
  400084:	00402bc9 	.word	0x00402bc9
  400088:	00403089 	.word	0x00403089
  40008c:	00403089 	.word	0x00403089
  400090:	00403089 	.word	0x00403089
  400094:	00403089 	.word	0x00403089
  400098:	00403089 	.word	0x00403089
  40009c:	00403089 	.word	0x00403089
  4000a0:	00403089 	.word	0x00403089
  4000a4:	00403089 	.word	0x00403089
  4000a8:	00403089 	.word	0x00403089
  4000ac:	00403089 	.word	0x00403089
  4000b0:	00403089 	.word	0x00403089
  4000b4:	00403089 	.word	0x00403089
  4000b8:	00403089 	.word	0x00403089
  4000bc:	00403089 	.word	0x00403089
  4000c0:	00403089 	.word	0x00403089
  4000c4:	00403089 	.word	0x00403089
  4000c8:	00403089 	.word	0x00403089
  4000cc:	00403089 	.word	0x00403089
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00403089 	.word	0x00403089
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00403089 	.word	0x00403089
  4000e0:	00403089 	.word	0x00403089
  4000e4:	00403089 	.word	0x00403089
  4000e8:	00403089 	.word	0x00403089
  4000ec:	00403089 	.word	0x00403089
  4000f0:	00403089 	.word	0x00403089
  4000f4:	00403089 	.word	0x00403089
  4000f8:	00403089 	.word	0x00403089
  4000fc:	00403089 	.word	0x00403089
  400100:	00403089 	.word	0x00403089
  400104:	00403089 	.word	0x00403089
  400108:	00403089 	.word	0x00403089
  40010c:	00403089 	.word	0x00403089
  400110:	00403089 	.word	0x00403089
	...
  400120:	00403089 	.word	0x00403089
  400124:	00403089 	.word	0x00403089
  400128:	00403089 	.word	0x00403089
  40012c:	00403089 	.word	0x00403089
  400130:	00403089 	.word	0x00403089
  400134:	00000000 	.word	0x00000000
  400138:	00403089 	.word	0x00403089
  40013c:	00403089 	.word	0x00403089

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400884 	.word	0x20400884
  40015c:	00000000 	.word	0x00000000
  400160:	004077bc 	.word	0x004077bc

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400888 	.word	0x20400888
  400190:	004077bc 	.word	0x004077bc
  400194:	004077bc 	.word	0x004077bc
  400198:	00000000 	.word	0x00000000

0040019c <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40019c:	2810      	cmp	r0, #16
  40019e:	d108      	bne.n	4001b2 <chip_isr+0x16>
  4001a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4001a4:	d105      	bne.n	4001b2 <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  4001a6:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  4001a8:	4b02      	ldr	r3, [pc, #8]	; (4001b4 <chip_isr+0x18>)
  4001aa:	681b      	ldr	r3, [r3, #0]
  4001ac:	b103      	cbz	r3, 4001b0 <chip_isr+0x14>
			gpfIsr();
  4001ae:	4798      	blx	r3
  4001b0:	bd08      	pop	{r3, pc}
  4001b2:	4770      	bx	lr
  4001b4:	204008a0 	.word	0x204008a0

004001b8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001b8:	b140      	cbz	r0, 4001cc <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  4001ba:	b570      	push	{r4, r5, r6, lr}
  4001bc:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  4001be:	4e04      	ldr	r6, [pc, #16]	; (4001d0 <nm_bsp_sleep+0x18>)
  4001c0:	4d04      	ldr	r5, [pc, #16]	; (4001d4 <nm_bsp_sleep+0x1c>)
  4001c2:	4630      	mov	r0, r6
  4001c4:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001c6:	3c01      	subs	r4, #1
  4001c8:	d1fb      	bne.n	4001c2 <nm_bsp_sleep+0xa>
  4001ca:	bd70      	pop	{r4, r5, r6, pc}
  4001cc:	4770      	bx	lr
  4001ce:	bf00      	nop
  4001d0:	00031635 	.word	0x00031635
  4001d4:	20400001 	.word	0x20400001

004001d8 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  4001d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001dc:	4f09      	ldr	r7, [pc, #36]	; (400204 <nm_bsp_reset+0x2c>)
  4001de:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4001e2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4001e6:	4d08      	ldr	r5, [pc, #32]	; (400208 <nm_bsp_reset+0x30>)
  4001e8:	2608      	movs	r6, #8
  4001ea:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  4001ec:	2064      	movs	r0, #100	; 0x64
  4001ee:	4c07      	ldr	r4, [pc, #28]	; (40020c <nm_bsp_reset+0x34>)
  4001f0:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001f2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001f6:	2064      	movs	r0, #100	; 0x64
  4001f8:	47a0      	blx	r4
  4001fa:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001fc:	2064      	movs	r0, #100	; 0x64
  4001fe:	47a0      	blx	r4
  400200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400204:	400e1200 	.word	0x400e1200
  400208:	400e1000 	.word	0x400e1000
  40020c:	004001b9 	.word	0x004001b9

00400210 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  400210:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  400212:	2200      	movs	r2, #0
  400214:	4b14      	ldr	r3, [pc, #80]	; (400268 <nm_bsp_init+0x58>)
  400216:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400218:	200a      	movs	r0, #10
  40021a:	4c14      	ldr	r4, [pc, #80]	; (40026c <nm_bsp_init+0x5c>)
  40021c:	47a0      	blx	r4
  40021e:	200b      	movs	r0, #11
  400220:	47a0      	blx	r4
  400222:	200c      	movs	r0, #12
  400224:	47a0      	blx	r4
  400226:	2010      	movs	r0, #16
  400228:	47a0      	blx	r4
  40022a:	2011      	movs	r0, #17
  40022c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40022e:	4b10      	ldr	r3, [pc, #64]	; (400270 <nm_bsp_init+0x60>)
  400230:	2208      	movs	r2, #8
  400232:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400234:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400238:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40023a:	4a0e      	ldr	r2, [pc, #56]	; (400274 <nm_bsp_init+0x64>)
  40023c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400240:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400242:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400246:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400248:	2204      	movs	r2, #4
  40024a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40024c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400250:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400252:	4b09      	ldr	r3, [pc, #36]	; (400278 <nm_bsp_init+0x68>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	f013 0f01 	tst.w	r3, #1
  40025a:	d001      	beq.n	400260 <nm_bsp_init+0x50>
  40025c:	4b06      	ldr	r3, [pc, #24]	; (400278 <nm_bsp_init+0x68>)
  40025e:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  400260:	4b06      	ldr	r3, [pc, #24]	; (40027c <nm_bsp_init+0x6c>)
  400262:	4798      	blx	r3

	return 0;
}
  400264:	2000      	movs	r0, #0
  400266:	bd10      	pop	{r4, pc}
  400268:	204008a0 	.word	0x204008a0
  40026c:	00402d89 	.word	0x00402d89
  400270:	400e1000 	.word	0x400e1000
  400274:	400e1200 	.word	0x400e1200
  400278:	e000e010 	.word	0xe000e010
  40027c:	004001d9 	.word	0x004001d9

00400280 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400280:	b530      	push	{r4, r5, lr}
  400282:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400284:	4b14      	ldr	r3, [pc, #80]	; (4002d8 <nm_bsp_register_isr+0x58>)
  400286:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  400288:	2010      	movs	r0, #16
  40028a:	4b14      	ldr	r3, [pc, #80]	; (4002dc <nm_bsp_register_isr+0x5c>)
  40028c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40028e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400292:	207c      	movs	r0, #124	; 0x7c
  400294:	4b12      	ldr	r3, [pc, #72]	; (4002e0 <nm_bsp_register_isr+0x60>)
  400296:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  400298:	4c12      	ldr	r4, [pc, #72]	; (4002e4 <nm_bsp_register_isr+0x64>)
  40029a:	2201      	movs	r2, #1
  40029c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002a0:	4620      	mov	r0, r4
  4002a2:	4b11      	ldr	r3, [pc, #68]	; (4002e8 <nm_bsp_register_isr+0x68>)
  4002a4:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4002a6:	4b11      	ldr	r3, [pc, #68]	; (4002ec <nm_bsp_register_isr+0x6c>)
  4002a8:	9300      	str	r3, [sp, #0]
  4002aa:	2351      	movs	r3, #81	; 0x51
  4002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b0:	2110      	movs	r1, #16
  4002b2:	4620      	mov	r0, r4
  4002b4:	4d0e      	ldr	r5, [pc, #56]	; (4002f0 <nm_bsp_register_isr+0x70>)
  4002b6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4002b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002bc:	4620      	mov	r0, r4
  4002be:	4b0d      	ldr	r3, [pc, #52]	; (4002f4 <nm_bsp_register_isr+0x74>)
  4002c0:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002c6:	4b0c      	ldr	r3, [pc, #48]	; (4002f8 <nm_bsp_register_isr+0x78>)
  4002c8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4002ca:	2200      	movs	r2, #0
  4002cc:	2110      	movs	r1, #16
  4002ce:	4620      	mov	r0, r4
  4002d0:	4b0a      	ldr	r3, [pc, #40]	; (4002fc <nm_bsp_register_isr+0x7c>)
  4002d2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4002d4:	b003      	add	sp, #12
  4002d6:	bd30      	pop	{r4, r5, pc}
  4002d8:	204008a0 	.word	0x204008a0
  4002dc:	00402d89 	.word	0x00402d89
  4002e0:	00402989 	.word	0x00402989
  4002e4:	400e1400 	.word	0x400e1400
  4002e8:	00402845 	.word	0x00402845
  4002ec:	0040019d 	.word	0x0040019d
  4002f0:	00402b0d 	.word	0x00402b0d
  4002f4:	00402979 	.word	0x00402979
  4002f8:	e000e100 	.word	0xe000e100
  4002fc:	00402bdd 	.word	0x00402bdd

00400300 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400300:	b508      	push	{r3, lr}
	if (u8Enable) {
  400302:	b128      	cbz	r0, 400310 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400304:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400308:	4804      	ldr	r0, [pc, #16]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  40030a:	4b05      	ldr	r3, [pc, #20]	; (400320 <nm_bsp_interrupt_ctrl+0x20>)
  40030c:	4798      	blx	r3
  40030e:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400310:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400314:	4801      	ldr	r0, [pc, #4]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  400316:	4b03      	ldr	r3, [pc, #12]	; (400324 <nm_bsp_interrupt_ctrl+0x24>)
  400318:	4798      	blx	r3
  40031a:	bd08      	pop	{r3, pc}
  40031c:	400e1400 	.word	0x400e1400
  400320:	00402979 	.word	0x00402979
  400324:	0040297d 	.word	0x0040297d

00400328 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  400328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40032a:	4c39      	ldr	r4, [pc, #228]	; (400410 <nm_bus_init+0xe8>)
  40032c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400330:	6621      	str	r1, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400332:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400336:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400338:	6261      	str	r1, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40033e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400340:	430b      	orrs	r3, r1
  400342:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400344:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400346:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40034a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40034c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400350:	6622      	str	r2, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400352:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400356:	6562      	str	r2, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400358:	6262      	str	r2, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40035a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40035e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400360:	4313      	orrs	r3, r2
  400362:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400364:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40036a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40036c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400370:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400372:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400376:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400378:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40037a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40037e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400380:	4318      	orrs	r0, r3
  400382:	6720      	str	r0, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400384:	6f60      	ldr	r0, [r4, #116]	; 0x74
  400386:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40038a:	6760      	str	r0, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40038c:	6061      	str	r1, [r4, #4]
  40038e:	6062      	str	r2, [r4, #4]
  400390:	6063      	str	r3, [r4, #4]
  400392:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  400396:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  400398:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40039a:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  40039c:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40039e:	4d1d      	ldr	r5, [pc, #116]	; (400414 <nm_bus_init+0xec>)
  4003a0:	4628      	mov	r0, r5
  4003a2:	4b1d      	ldr	r3, [pc, #116]	; (400418 <nm_bus_init+0xf0>)
  4003a4:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4003a6:	2302      	movs	r3, #2
  4003a8:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4003aa:	2380      	movs	r3, #128	; 0x80
  4003ac:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4003ae:	686b      	ldr	r3, [r5, #4]
  4003b0:	f043 0301 	orr.w	r3, r3, #1
  4003b4:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4003b6:	686b      	ldr	r3, [r5, #4]
  4003b8:	f043 0310 	orr.w	r3, r3, #16
  4003bc:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4003be:	2101      	movs	r1, #1
  4003c0:	4628      	mov	r0, r5
  4003c2:	4b16      	ldr	r3, [pc, #88]	; (40041c <nm_bus_init+0xf4>)
  4003c4:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4003c6:	2200      	movs	r2, #0
  4003c8:	2101      	movs	r1, #1
  4003ca:	4628      	mov	r0, r5
  4003cc:	4b14      	ldr	r3, [pc, #80]	; (400420 <nm_bus_init+0xf8>)
  4003ce:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4003d0:	2201      	movs	r2, #1
  4003d2:	4611      	mov	r1, r2
  4003d4:	4628      	mov	r0, r5
  4003d6:	4b13      	ldr	r3, [pc, #76]	; (400424 <nm_bus_init+0xfc>)
  4003d8:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4003da:	2200      	movs	r2, #0
  4003dc:	2101      	movs	r1, #1
  4003de:	4628      	mov	r0, r5
  4003e0:	4b11      	ldr	r3, [pc, #68]	; (400428 <nm_bus_init+0x100>)
  4003e2:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4003e4:	4911      	ldr	r1, [pc, #68]	; (40042c <nm_bus_init+0x104>)
  4003e6:	4812      	ldr	r0, [pc, #72]	; (400430 <nm_bus_init+0x108>)
  4003e8:	4b12      	ldr	r3, [pc, #72]	; (400434 <nm_bus_init+0x10c>)
  4003ea:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4003ec:	b2c2      	uxtb	r2, r0
  4003ee:	2101      	movs	r1, #1
  4003f0:	4628      	mov	r0, r5
  4003f2:	4b11      	ldr	r3, [pc, #68]	; (400438 <nm_bus_init+0x110>)
  4003f4:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4003f6:	2300      	movs	r3, #0
  4003f8:	461a      	mov	r2, r3
  4003fa:	2101      	movs	r1, #1
  4003fc:	4628      	mov	r0, r5
  4003fe:	4f0f      	ldr	r7, [pc, #60]	; (40043c <nm_bus_init+0x114>)
  400400:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400402:	2301      	movs	r3, #1
  400404:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  400406:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  400408:	4b0d      	ldr	r3, [pc, #52]	; (400440 <nm_bus_init+0x118>)
  40040a:	4798      	blx	r3
#endif
	return result;
}
  40040c:	2000      	movs	r0, #0
  40040e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400410:	400e1400 	.word	0x400e1400
  400414:	40008000 	.word	0x40008000
  400418:	00402ddd 	.word	0x00402ddd
  40041c:	00402e09 	.word	0x00402e09
  400420:	00402e8d 	.word	0x00402e8d
  400424:	00402ead 	.word	0x00402ead
  400428:	00402ecd 	.word	0x00402ecd
  40042c:	11e1a300 	.word	0x11e1a300
  400430:	02dc6c00 	.word	0x02dc6c00
  400434:	00402ee1 	.word	0x00402ee1
  400438:	00402ef9 	.word	0x00402ef9
  40043c:	00402f25 	.word	0x00402f25
  400440:	004001d9 	.word	0x004001d9

00400444 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400448:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40044a:	2803      	cmp	r0, #3
  40044c:	d141      	bne.n	4004d2 <nm_bus_ioctl+0x8e>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40044e:	680e      	ldr	r6, [r1, #0]
  400450:	684d      	ldr	r5, [r1, #4]
  400452:	890c      	ldrh	r4, [r1, #8]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  400454:	2300      	movs	r3, #0
  400456:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  40045a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  40045e:	b136      	cbz	r6, 40046e <nm_bus_ioctl+0x2a>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  400460:	2d00      	cmp	r5, #0
  400462:	d133      	bne.n	4004cc <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  400464:	f04f 0801 	mov.w	r8, #1
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400468:	4699      	mov	r9, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  40046a:	ad01      	add	r5, sp, #4
  40046c:	e004      	b.n	400478 <nm_bus_ioctl+0x34>
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40046e:	f04f 0800 	mov.w	r8, #0
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  400472:	f04f 0901 	mov.w	r9, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  400476:	ae01      	add	r6, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
  400478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40047c:	4b1c      	ldr	r3, [pc, #112]	; (4004f0 <nm_bus_ioctl+0xac>)
  40047e:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400480:	b1f4      	cbz	r4, 4004c0 <nm_bus_ioctl+0x7c>
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  400482:	4f1c      	ldr	r7, [pc, #112]	; (4004f4 <nm_bus_ioctl+0xb0>)
  400484:	f8df b084 	ldr.w	fp, [pc, #132]	; 40050c <nm_bus_ioctl+0xc8>
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400488:	f8df a084 	ldr.w	sl, [pc, #132]	; 400510 <nm_bus_ioctl+0xcc>
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40048c:	2300      	movs	r3, #0
  40048e:	461a      	mov	r2, r3
  400490:	7831      	ldrb	r1, [r6, #0]
  400492:	4638      	mov	r0, r7
  400494:	47d8      	blx	fp
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400496:	f10d 0205 	add.w	r2, sp, #5
  40049a:	f10d 0106 	add.w	r1, sp, #6
  40049e:	4638      	mov	r0, r7
  4004a0:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4004a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4004a6:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  4004a8:	3c01      	subs	r4, #1
  4004aa:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4004ac:	f1b8 0f00 	cmp.w	r8, #0
  4004b0:	d100      	bne.n	4004b4 <nm_bus_ioctl+0x70>
			pu8Miso++;
  4004b2:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4004b4:	f1b9 0f00 	cmp.w	r9, #0
  4004b8:	d100      	bne.n	4004bc <nm_bus_ioctl+0x78>
			pu8Mosi++;
  4004ba:	3601      	adds	r6, #1
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  4004bc:	2c00      	cmp	r4, #0
  4004be:	d1e5      	bne.n	40048c <nm_bus_ioctl+0x48>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  4004c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4004c4:	4b0a      	ldr	r3, [pc, #40]	; (4004f0 <nm_bus_ioctl+0xac>)
  4004c6:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  4004c8:	2000      	movs	r0, #0
  4004ca:	e00e      	b.n	4004ea <nm_bus_ioctl+0xa6>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  4004cc:	f06f 0005 	mvn.w	r0, #5
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  4004d0:	e00b      	b.n	4004ea <nm_bus_ioctl+0xa6>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  4004d2:	f240 121f 	movw	r2, #287	; 0x11f
  4004d6:	4908      	ldr	r1, [pc, #32]	; (4004f8 <nm_bus_ioctl+0xb4>)
  4004d8:	4808      	ldr	r0, [pc, #32]	; (4004fc <nm_bus_ioctl+0xb8>)
  4004da:	4c09      	ldr	r4, [pc, #36]	; (400500 <nm_bus_ioctl+0xbc>)
  4004dc:	47a0      	blx	r4
  4004de:	4809      	ldr	r0, [pc, #36]	; (400504 <nm_bus_ioctl+0xc0>)
  4004e0:	47a0      	blx	r4
  4004e2:	4809      	ldr	r0, [pc, #36]	; (400508 <nm_bus_ioctl+0xc4>)
  4004e4:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  4004e6:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4004ea:	b003      	add	sp, #12
  4004ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004f0:	400e1400 	.word	0x400e1400
  4004f4:	40008000 	.word	0x40008000
  4004f8:	00406800 	.word	0x00406800
  4004fc:	004067d0 	.word	0x004067d0
  400500:	00403775 	.word	0x00403775
  400504:	004067e4 	.word	0x004067e4
  400508:	004067fc 	.word	0x004067fc
  40050c:	00402e55 	.word	0x00402e55
  400510:	00402e21 	.word	0x00402e21

00400514 <nm_bus_deinit>:
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400514:	2202      	movs	r2, #2
  400516:	4b0e      	ldr	r3, [pc, #56]	; (400550 <nm_bus_deinit+0x3c>)
  400518:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40051a:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  40051e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400526:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400528:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40052c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400530:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400532:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400536:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40053a:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40053c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400544:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400546:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40054a:	2000      	movs	r0, #0
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	40008000 	.word	0x40008000

00400554 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  400554:	b13a      	cbz	r2, 400566 <m2m_memcpy+0x12>
  400556:	3901      	subs	r1, #1
  400558:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40055a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40055e:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  400562:	4290      	cmp	r0, r2
  400564:	d1f9      	bne.n	40055a <m2m_memcpy+0x6>
  400566:	4770      	bx	lr

00400568 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400568:	b122      	cbz	r2, 400574 <m2m_memset+0xc>
  40056a:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  40056c:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400570:	4290      	cmp	r0, r2
  400572:	d1fb      	bne.n	40056c <m2m_memset+0x4>
  400574:	4770      	bx	lr
  400576:	bf00      	nop

00400578 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  400578:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  40057a:	7802      	ldrb	r2, [r0, #0]
  40057c:	b13a      	cbz	r2, 40058e <m2m_strlen+0x16>
  40057e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  400580:	3001      	adds	r0, #1
  400582:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  400584:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400588:	2a00      	cmp	r2, #0
  40058a:	d1f9      	bne.n	400580 <m2m_strlen+0x8>
  40058c:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  40058e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  400590:	4770      	bx	lr
  400592:	bf00      	nop

00400594 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  400594:	4a02      	ldr	r2, [pc, #8]	; (4005a0 <isr+0xc>)
  400596:	7813      	ldrb	r3, [r2, #0]
  400598:	3301      	adds	r3, #1
  40059a:	b2db      	uxtb	r3, r3
  40059c:	7013      	strb	r3, [r2, #0]
  40059e:	4770      	bx	lr
  4005a0:	204008ac 	.word	0x204008ac

004005a4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4005a4:	4770      	bx	lr
  4005a6:	bf00      	nop

004005a8 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  4005a8:	b500      	push	{lr}
  4005aa:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  4005ac:	2001      	movs	r0, #1
  4005ae:	4b0b      	ldr	r3, [pc, #44]	; (4005dc <hif_set_rx_done+0x34>)
  4005b0:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4005b2:	a901      	add	r1, sp, #4
  4005b4:	f241 0070 	movw	r0, #4208	; 0x1070
  4005b8:	4b09      	ldr	r3, [pc, #36]	; (4005e0 <hif_set_rx_done+0x38>)
  4005ba:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4005bc:	4603      	mov	r3, r0
  4005be:	b940      	cbnz	r0, 4005d2 <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  4005c0:	9901      	ldr	r1, [sp, #4]
  4005c2:	f041 0102 	orr.w	r1, r1, #2
  4005c6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4005c8:	f241 0070 	movw	r0, #4208	; 0x1070
  4005cc:	4b05      	ldr	r3, [pc, #20]	; (4005e4 <hif_set_rx_done+0x3c>)
  4005ce:	4798      	blx	r3
  4005d0:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  4005d2:	4618      	mov	r0, r3
  4005d4:	b003      	add	sp, #12
  4005d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4005da:	bf00      	nop
  4005dc:	00400301 	.word	0x00400301
  4005e0:	004018f9 	.word	0x004018f9
  4005e4:	00401905 	.word	0x00401905

004005e8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4005e8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4005ea:	4b11      	ldr	r3, [pc, #68]	; (400630 <hif_chip_wake+0x48>)
  4005ec:	781b      	ldrb	r3, [r3, #0]
  4005ee:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005f2:	d115      	bne.n	400620 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4005f4:	4b0f      	ldr	r3, [pc, #60]	; (400634 <hif_chip_wake+0x4c>)
  4005f6:	781b      	ldrb	r3, [r3, #0]
  4005f8:	b2db      	uxtb	r3, r3
  4005fa:	2b03      	cmp	r3, #3
  4005fc:	d004      	beq.n	400608 <hif_chip_wake+0x20>
  4005fe:	4b0d      	ldr	r3, [pc, #52]	; (400634 <hif_chip_wake+0x4c>)
  400600:	781b      	ldrb	r3, [r3, #0]
  400602:	b2db      	uxtb	r3, r3
  400604:	2b04      	cmp	r3, #4
  400606:	d10b      	bne.n	400620 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  400608:	4b0b      	ldr	r3, [pc, #44]	; (400638 <hif_chip_wake+0x50>)
  40060a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40060c:	4603      	mov	r3, r0
  40060e:	b968      	cbnz	r0, 40062c <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400610:	f245 6178 	movw	r1, #22136	; 0x5678
  400614:	f241 0074 	movw	r0, #4212	; 0x1074
  400618:	4b08      	ldr	r3, [pc, #32]	; (40063c <hif_chip_wake+0x54>)
  40061a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40061c:	4603      	mov	r3, r0
  40061e:	b928      	cbnz	r0, 40062c <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400620:	4a03      	ldr	r2, [pc, #12]	; (400630 <hif_chip_wake+0x48>)
  400622:	7813      	ldrb	r3, [r2, #0]
  400624:	3301      	adds	r3, #1
  400626:	b2db      	uxtb	r3, r3
  400628:	7013      	strb	r3, [r2, #0]
  40062a:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  40062c:	4618      	mov	r0, r3
  40062e:	bd08      	pop	{r3, pc}
  400630:	204008c8 	.word	0x204008c8
  400634:	204008b8 	.word	0x204008b8
  400638:	00401469 	.word	0x00401469
  40063c:	00401905 	.word	0x00401905

00400640 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  400640:	b500      	push	{lr}
  400642:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  400644:	4b1d      	ldr	r3, [pc, #116]	; (4006bc <hif_chip_sleep+0x7c>)
  400646:	781b      	ldrb	r3, [r3, #0]
  400648:	f013 0fff 	tst.w	r3, #255	; 0xff
  40064c:	d004      	beq.n	400658 <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  40064e:	4a1b      	ldr	r2, [pc, #108]	; (4006bc <hif_chip_sleep+0x7c>)
  400650:	7813      	ldrb	r3, [r2, #0]
  400652:	3b01      	subs	r3, #1
  400654:	b2db      	uxtb	r3, r3
  400656:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  400658:	4b18      	ldr	r3, [pc, #96]	; (4006bc <hif_chip_sleep+0x7c>)
  40065a:	781b      	ldrb	r3, [r3, #0]
  40065c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400660:	d125      	bne.n	4006ae <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400662:	4b17      	ldr	r3, [pc, #92]	; (4006c0 <hif_chip_sleep+0x80>)
  400664:	781b      	ldrb	r3, [r3, #0]
  400666:	b2db      	uxtb	r3, r3
  400668:	2b03      	cmp	r3, #3
  40066a:	d004      	beq.n	400676 <hif_chip_sleep+0x36>
  40066c:	4b14      	ldr	r3, [pc, #80]	; (4006c0 <hif_chip_sleep+0x80>)
  40066e:	781b      	ldrb	r3, [r3, #0]
  400670:	b2db      	uxtb	r3, r3
  400672:	2b04      	cmp	r3, #4
  400674:	d11d      	bne.n	4006b2 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  400676:	2300      	movs	r3, #0
  400678:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40067a:	f244 3121 	movw	r1, #17185	; 0x4321
  40067e:	f241 0074 	movw	r0, #4212	; 0x1074
  400682:	4b10      	ldr	r3, [pc, #64]	; (4006c4 <hif_chip_sleep+0x84>)
  400684:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400686:	4603      	mov	r3, r0
  400688:	b9a0      	cbnz	r0, 4006b4 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  40068a:	a901      	add	r1, sp, #4
  40068c:	2001      	movs	r0, #1
  40068e:	4b0e      	ldr	r3, [pc, #56]	; (4006c8 <hif_chip_sleep+0x88>)
  400690:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400692:	4603      	mov	r3, r0
  400694:	b970      	cbnz	r0, 4006b4 <hif_chip_sleep+0x74>
			if(reg&0x2)
  400696:	9901      	ldr	r1, [sp, #4]
  400698:	f011 0f02 	tst.w	r1, #2
  40069c:	d00a      	beq.n	4006b4 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  40069e:	f021 0102 	bic.w	r1, r1, #2
  4006a2:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4006a4:	2001      	movs	r0, #1
  4006a6:	4b07      	ldr	r3, [pc, #28]	; (4006c4 <hif_chip_sleep+0x84>)
  4006a8:	4798      	blx	r3
  4006aa:	4603      	mov	r3, r0
  4006ac:	e002      	b.n	4006b4 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  4006ae:	2300      	movs	r3, #0
  4006b0:	e000      	b.n	4006b4 <hif_chip_sleep+0x74>
  4006b2:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  4006b4:	4618      	mov	r0, r3
  4006b6:	b003      	add	sp, #12
  4006b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4006bc:	204008c8 	.word	0x204008c8
  4006c0:	204008b8 	.word	0x204008b8
  4006c4:	00401905 	.word	0x00401905
  4006c8:	004018f9 	.word	0x004018f9

004006cc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4006cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006d0:	b087      	sub	sp, #28
  4006d2:	4680      	mov	r8, r0
  4006d4:	460f      	mov	r7, r1
  4006d6:	4692      	mov	sl, r2
  4006d8:	4699      	mov	r9, r3
  4006da:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4006dc:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4006e0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4006e4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4006e8:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4006ec:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4006f0:	2308      	movs	r3, #8
  4006f2:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4006f6:	b144      	cbz	r4, 40070a <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4006f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4006fc:	fa16 f383 	uxtah	r3, r6, r3
  400700:	442b      	add	r3, r5
  400702:	b29b      	uxth	r3, r3
  400704:	f8ad 3016 	strh.w	r3, [sp, #22]
  400708:	e006      	b.n	400718 <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  40070a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40070e:	fa19 f383 	uxtah	r3, r9, r3
  400712:	b29b      	uxth	r3, r3
  400714:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  400718:	4b57      	ldr	r3, [pc, #348]	; (400878 <hif_send+0x1ac>)
  40071a:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  40071c:	4683      	mov	fp, r0
  40071e:	2800      	cmp	r0, #0
  400720:	f040 8095 	bne.w	40084e <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  400724:	2300      	movs	r3, #0
  400726:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  400728:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  40072c:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  40072e:	9b02      	ldr	r3, [sp, #8]
  400730:	ea48 0303 	orr.w	r3, r8, r3
  400734:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  400736:	9b02      	ldr	r3, [sp, #8]
  400738:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  40073c:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  40073e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400742:	9b02      	ldr	r3, [sp, #8]
  400744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400748:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40074a:	9902      	ldr	r1, [sp, #8]
  40074c:	f241 008c 	movw	r0, #4236	; 0x108c
  400750:	4b4a      	ldr	r3, [pc, #296]	; (40087c <hif_send+0x1b0>)
  400752:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400754:	4683      	mov	fp, r0
  400756:	2800      	cmp	r0, #0
  400758:	f040 808a 	bne.w	400870 <hif_send+0x1a4>


		reg = 0;
  40075c:	2300      	movs	r3, #0
  40075e:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  400760:	9b02      	ldr	r3, [sp, #8]
  400762:	f043 0302 	orr.w	r3, r3, #2
  400766:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400768:	9902      	ldr	r1, [sp, #8]
  40076a:	f241 0078 	movw	r0, #4216	; 0x1078
  40076e:	4b43      	ldr	r3, [pc, #268]	; (40087c <hif_send+0x1b0>)
  400770:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400772:	4683      	mov	fp, r0
  400774:	2800      	cmp	r0, #0
  400776:	d17b      	bne.n	400870 <hif_send+0x1a4>
		dma_addr = 0;
  400778:	2300      	movs	r3, #0
  40077a:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  40077c:	f8ad 3006 	strh.w	r3, [sp, #6]
  400780:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400784:	b29b      	uxth	r3, r3
  400786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40078a:	d21e      	bcs.n	4007ca <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  40078c:	f241 0878 	movw	r8, #4216	; 0x1078
  400790:	4f3b      	ldr	r7, [pc, #236]	; (400880 <hif_send+0x1b4>)
  400792:	a902      	add	r1, sp, #8
  400794:	4640      	mov	r0, r8
  400796:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  400798:	b9b8      	cbnz	r0, 4007ca <hif_send+0xfe>
			if (!(reg & 0x2))
  40079a:	9b02      	ldr	r3, [sp, #8]
  40079c:	f013 0f02 	tst.w	r3, #2
  4007a0:	d107      	bne.n	4007b2 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  4007a2:	a903      	add	r1, sp, #12
  4007a4:	4837      	ldr	r0, [pc, #220]	; (400884 <hif_send+0x1b8>)
  4007a6:	4b36      	ldr	r3, [pc, #216]	; (400880 <hif_send+0x1b4>)
  4007a8:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4007aa:	b170      	cbz	r0, 4007ca <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  4007ac:	2300      	movs	r3, #0
  4007ae:	9303      	str	r3, [sp, #12]
  4007b0:	e00b      	b.n	4007ca <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  4007b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007b6:	3301      	adds	r3, #1
  4007b8:	b29b      	uxth	r3, r3
  4007ba:	f8ad 3006 	strh.w	r3, [sp, #6]
  4007be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007c2:	b29b      	uxth	r3, r3
  4007c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4007c8:	d3e3      	bcc.n	400792 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4007ca:	9b03      	ldr	r3, [sp, #12]
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d04d      	beq.n	40086c <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4007d0:	9b03      	ldr	r3, [sp, #12]
  4007d2:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4007d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4007d8:	b29b      	uxth	r3, r3
  4007da:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4007de:	9804      	ldr	r0, [sp, #16]
  4007e0:	2208      	movs	r2, #8
  4007e2:	a905      	add	r1, sp, #20
  4007e4:	4b28      	ldr	r3, [pc, #160]	; (400888 <hif_send+0x1bc>)
  4007e6:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4007e8:	4683      	mov	fp, r0
  4007ea:	2800      	cmp	r0, #0
  4007ec:	d140      	bne.n	400870 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4007ee:	9b04      	ldr	r3, [sp, #16]
  4007f0:	3308      	adds	r3, #8
  4007f2:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4007f4:	f1ba 0f00 	cmp.w	sl, #0
  4007f8:	d00a      	beq.n	400810 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4007fa:	9804      	ldr	r0, [sp, #16]
  4007fc:	464a      	mov	r2, r9
  4007fe:	4651      	mov	r1, sl
  400800:	4b21      	ldr	r3, [pc, #132]	; (400888 <hif_send+0x1bc>)
  400802:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400804:	4683      	mov	fp, r0
  400806:	2800      	cmp	r0, #0
  400808:	d132      	bne.n	400870 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  40080a:	9b04      	ldr	r3, [sp, #16]
  40080c:	444b      	add	r3, r9
  40080e:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  400810:	b174      	cbz	r4, 400830 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  400812:	9b04      	ldr	r3, [sp, #16]
  400814:	ebc9 0505 	rsb	r5, r9, r5
  400818:	441d      	add	r5, r3
  40081a:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  40081c:	9804      	ldr	r0, [sp, #16]
  40081e:	4632      	mov	r2, r6
  400820:	4621      	mov	r1, r4
  400822:	4b19      	ldr	r3, [pc, #100]	; (400888 <hif_send+0x1bc>)
  400824:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400826:	4683      	mov	fp, r0
  400828:	bb10      	cbnz	r0, 400870 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  40082a:	9b04      	ldr	r3, [sp, #16]
  40082c:	441e      	add	r6, r3
  40082e:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  400830:	9b03      	ldr	r3, [sp, #12]
  400832:	009b      	lsls	r3, r3, #2
  400834:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  400836:	9b02      	ldr	r3, [sp, #8]
  400838:	f043 0302 	orr.w	r3, r3, #2
  40083c:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  40083e:	9902      	ldr	r1, [sp, #8]
  400840:	f241 006c 	movw	r0, #4204	; 0x106c
  400844:	4b0d      	ldr	r3, [pc, #52]	; (40087c <hif_send+0x1b0>)
  400846:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  400848:	4683      	mov	fp, r0
  40084a:	b988      	cbnz	r0, 400870 <hif_send+0x1a4>
  40084c:	e00a      	b.n	400864 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  40084e:	f240 129f 	movw	r2, #415	; 0x19f
  400852:	490e      	ldr	r1, [pc, #56]	; (40088c <hif_send+0x1c0>)
  400854:	480e      	ldr	r0, [pc, #56]	; (400890 <hif_send+0x1c4>)
  400856:	4c0f      	ldr	r4, [pc, #60]	; (400894 <hif_send+0x1c8>)
  400858:	47a0      	blx	r4
  40085a:	480f      	ldr	r0, [pc, #60]	; (400898 <hif_send+0x1cc>)
  40085c:	47a0      	blx	r4
  40085e:	480f      	ldr	r0, [pc, #60]	; (40089c <hif_send+0x1d0>)
  400860:	47a0      	blx	r4
		goto ERR1;
  400862:	e005      	b.n	400870 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  400864:	4b0e      	ldr	r3, [pc, #56]	; (4008a0 <hif_send+0x1d4>)
  400866:	4798      	blx	r3
  400868:	4683      	mov	fp, r0
  40086a:	e001      	b.n	400870 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  40086c:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  400870:	4658      	mov	r0, fp
  400872:	b007      	add	sp, #28
  400874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400878:	004005e9 	.word	0x004005e9
  40087c:	00401905 	.word	0x00401905
  400880:	004018f9 	.word	0x004018f9
  400884:	00150400 	.word	0x00150400
  400888:	00401971 	.word	0x00401971
  40088c:	00406a68 	.word	0x00406a68
  400890:	004067d0 	.word	0x004067d0
  400894:	00403775 	.word	0x00403775
  400898:	00406824 	.word	0x00406824
  40089c:	004067fc 	.word	0x004067fc
  4008a0:	00400641 	.word	0x00400641

004008a4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4008a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4008a8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008aa:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 400ba8 <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4008ae:	4fa3      	ldr	r7, [pc, #652]	; (400b3c <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4008b0:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 400bac <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4008b4:	4ea2      	ldr	r6, [pc, #648]	; (400b40 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008b6:	e17b      	b.n	400bb0 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  4008b8:	f899 3000 	ldrb.w	r3, [r9]
  4008bc:	3b01      	subs	r3, #1
  4008be:	b2db      	uxtb	r3, r3
  4008c0:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4008c4:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  4008c6:	4604      	mov	r4, r0
  4008c8:	2800      	cmp	r0, #0
  4008ca:	f040 811a 	bne.w	400b02 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  4008ce:	a903      	add	r1, sp, #12
  4008d0:	f241 0070 	movw	r0, #4208	; 0x1070
  4008d4:	4b9b      	ldr	r3, [pc, #620]	; (400b44 <hif_handle_isr+0x2a0>)
  4008d6:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  4008d8:	4604      	mov	r4, r0
  4008da:	2800      	cmp	r0, #0
  4008dc:	f040 8106 	bne.w	400aec <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  4008e0:	9b03      	ldr	r3, [sp, #12]
  4008e2:	f013 0f01 	tst.w	r3, #1
  4008e6:	f000 80f5 	beq.w	400ad4 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  4008ea:	4b97      	ldr	r3, [pc, #604]	; (400b48 <hif_handle_isr+0x2a4>)
  4008ec:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  4008ee:	9903      	ldr	r1, [sp, #12]
  4008f0:	f021 0101 	bic.w	r1, r1, #1
  4008f4:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4008f6:	f241 0070 	movw	r0, #4208	; 0x1070
  4008fa:	4b94      	ldr	r3, [pc, #592]	; (400b4c <hif_handle_isr+0x2a8>)
  4008fc:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  4008fe:	4604      	mov	r4, r0
  400900:	2800      	cmp	r0, #0
  400902:	f040 810e 	bne.w	400b22 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  400906:	2200      	movs	r2, #0
  400908:	4b91      	ldr	r3, [pc, #580]	; (400b50 <hif_handle_isr+0x2ac>)
  40090a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  40090c:	9d03      	ldr	r5, [sp, #12]
  40090e:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  400912:	2d00      	cmp	r5, #0
  400914:	f000 80d1 	beq.w	400aba <hif_handle_isr+0x216>
					uint32 address = 0;
  400918:	a906      	add	r1, sp, #24
  40091a:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  40091e:	f241 0084 	movw	r0, #4228	; 0x1084
  400922:	4b88      	ldr	r3, [pc, #544]	; (400b44 <hif_handle_isr+0x2a0>)
  400924:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  400926:	4604      	mov	r4, r0
  400928:	b168      	cbz	r0, 400946 <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  40092a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  40092e:	4641      	mov	r1, r8
  400930:	4630      	mov	r0, r6
  400932:	4d88      	ldr	r5, [pc, #544]	; (400b54 <hif_handle_isr+0x2b0>)
  400934:	47a8      	blx	r5
  400936:	4888      	ldr	r0, [pc, #544]	; (400b58 <hif_handle_isr+0x2b4>)
  400938:	47a8      	blx	r5
  40093a:	4888      	ldr	r0, [pc, #544]	; (400b5c <hif_handle_isr+0x2b8>)
  40093c:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  40093e:	2001      	movs	r0, #1
  400940:	4b81      	ldr	r3, [pc, #516]	; (400b48 <hif_handle_isr+0x2a4>)
  400942:	4798      	blx	r3
  400944:	e0eb      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  400946:	2204      	movs	r2, #4
  400948:	a904      	add	r1, sp, #16
  40094a:	9805      	ldr	r0, [sp, #20]
  40094c:	4b84      	ldr	r3, [pc, #528]	; (400b60 <hif_handle_isr+0x2bc>)
  40094e:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  400950:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400954:	b29b      	uxth	r3, r3
  400956:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  40095a:	4604      	mov	r4, r0
  40095c:	b168      	cbz	r0, 40097a <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  40095e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  400962:	4641      	mov	r1, r8
  400964:	4630      	mov	r0, r6
  400966:	4d7b      	ldr	r5, [pc, #492]	; (400b54 <hif_handle_isr+0x2b0>)
  400968:	47a8      	blx	r5
  40096a:	487e      	ldr	r0, [pc, #504]	; (400b64 <hif_handle_isr+0x2c0>)
  40096c:	47a8      	blx	r5
  40096e:	487b      	ldr	r0, [pc, #492]	; (400b5c <hif_handle_isr+0x2b8>)
  400970:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400972:	2001      	movs	r0, #1
  400974:	4b74      	ldr	r3, [pc, #464]	; (400b48 <hif_handle_isr+0x2a4>)
  400976:	4798      	blx	r3
  400978:	e0d1      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  40097a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40097e:	b29b      	uxth	r3, r3
  400980:	429d      	cmp	r5, r3
  400982:	d01e      	beq.n	4009c2 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  400984:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400988:	b29b      	uxth	r3, r3
  40098a:	1aeb      	subs	r3, r5, r3
  40098c:	2b04      	cmp	r3, #4
  40098e:	dd18      	ble.n	4009c2 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  400990:	f240 12df 	movw	r2, #479	; 0x1df
  400994:	4641      	mov	r1, r8
  400996:	4630      	mov	r0, r6
  400998:	4c6e      	ldr	r4, [pc, #440]	; (400b54 <hif_handle_isr+0x2b0>)
  40099a:	47a0      	blx	r4
  40099c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4009a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009a4:	f89d 1011 	ldrb.w	r1, [sp, #17]
  4009a8:	9100      	str	r1, [sp, #0]
  4009aa:	b292      	uxth	r2, r2
  4009ac:	4629      	mov	r1, r5
  4009ae:	486e      	ldr	r0, [pc, #440]	; (400b68 <hif_handle_isr+0x2c4>)
  4009b0:	47a0      	blx	r4
  4009b2:	486a      	ldr	r0, [pc, #424]	; (400b5c <hif_handle_isr+0x2b8>)
  4009b4:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  4009b6:	2001      	movs	r0, #1
  4009b8:	4b63      	ldr	r3, [pc, #396]	; (400b48 <hif_handle_isr+0x2a4>)
  4009ba:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  4009bc:	f06f 0405 	mvn.w	r4, #5
  4009c0:	e0ad      	b.n	400b1e <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4009c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009c6:	b2db      	uxtb	r3, r3
  4009c8:	2b01      	cmp	r3, #1
  4009ca:	d10d      	bne.n	4009e8 <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  4009cc:	4b67      	ldr	r3, [pc, #412]	; (400b6c <hif_handle_isr+0x2c8>)
  4009ce:	681b      	ldr	r3, [r3, #0]
  4009d0:	2b00      	cmp	r3, #0
  4009d2:	d060      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009d4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009d8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4009dc:	3908      	subs	r1, #8
  4009de:	9a05      	ldr	r2, [sp, #20]
  4009e0:	3208      	adds	r2, #8
  4009e2:	b289      	uxth	r1, r1
  4009e4:	4798      	blx	r3
  4009e6:	e056      	b.n	400a96 <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4009e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009ec:	b2db      	uxtb	r3, r3
  4009ee:	2b02      	cmp	r3, #2
  4009f0:	d10d      	bne.n	400a0e <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  4009f2:	4b5f      	ldr	r3, [pc, #380]	; (400b70 <hif_handle_isr+0x2cc>)
  4009f4:	681b      	ldr	r3, [r3, #0]
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d04d      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009fa:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009fe:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a02:	3908      	subs	r1, #8
  400a04:	9a05      	ldr	r2, [sp, #20]
  400a06:	3208      	adds	r2, #8
  400a08:	b289      	uxth	r1, r1
  400a0a:	4798      	blx	r3
  400a0c:	e043      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  400a0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a12:	b2db      	uxtb	r3, r3
  400a14:	2b04      	cmp	r3, #4
  400a16:	d10d      	bne.n	400a34 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  400a18:	4b56      	ldr	r3, [pc, #344]	; (400b74 <hif_handle_isr+0x2d0>)
  400a1a:	681b      	ldr	r3, [r3, #0]
  400a1c:	2b00      	cmp	r3, #0
  400a1e:	d03a      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a20:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a24:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a28:	3908      	subs	r1, #8
  400a2a:	9a05      	ldr	r2, [sp, #20]
  400a2c:	3208      	adds	r2, #8
  400a2e:	b289      	uxth	r1, r1
  400a30:	4798      	blx	r3
  400a32:	e030      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  400a34:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a38:	b2db      	uxtb	r3, r3
  400a3a:	2b06      	cmp	r3, #6
  400a3c:	d10c      	bne.n	400a58 <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  400a3e:	4b4e      	ldr	r3, [pc, #312]	; (400b78 <hif_handle_isr+0x2d4>)
  400a40:	681b      	ldr	r3, [r3, #0]
  400a42:	b343      	cbz	r3, 400a96 <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a44:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a48:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a4c:	3908      	subs	r1, #8
  400a4e:	9a05      	ldr	r2, [sp, #20]
  400a50:	3208      	adds	r2, #8
  400a52:	b289      	uxth	r1, r1
  400a54:	4798      	blx	r3
  400a56:	e01e      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  400a58:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a5c:	b2db      	uxtb	r3, r3
  400a5e:	2b07      	cmp	r3, #7
  400a60:	d10c      	bne.n	400a7c <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  400a62:	4b46      	ldr	r3, [pc, #280]	; (400b7c <hif_handle_isr+0x2d8>)
  400a64:	681b      	ldr	r3, [r3, #0]
  400a66:	b1b3      	cbz	r3, 400a96 <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a68:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a6c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a70:	3908      	subs	r1, #8
  400a72:	9a05      	ldr	r2, [sp, #20]
  400a74:	3208      	adds	r2, #8
  400a76:	b289      	uxth	r1, r1
  400a78:	4798      	blx	r3
  400a7a:	e00c      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  400a7c:	f240 2202 	movw	r2, #514	; 0x202
  400a80:	4641      	mov	r1, r8
  400a82:	4630      	mov	r0, r6
  400a84:	4c33      	ldr	r4, [pc, #204]	; (400b54 <hif_handle_isr+0x2b0>)
  400a86:	47a0      	blx	r4
  400a88:	483d      	ldr	r0, [pc, #244]	; (400b80 <hif_handle_isr+0x2dc>)
  400a8a:	47a0      	blx	r4
  400a8c:	4833      	ldr	r0, [pc, #204]	; (400b5c <hif_handle_isr+0x2b8>)
  400a8e:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  400a90:	f06f 0405 	mvn.w	r4, #5
  400a94:	e043      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  400a96:	4b2e      	ldr	r3, [pc, #184]	; (400b50 <hif_handle_isr+0x2ac>)
  400a98:	781b      	ldrb	r3, [r3, #0]
  400a9a:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a9e:	d13b      	bne.n	400b18 <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  400aa0:	f240 2209 	movw	r2, #521	; 0x209
  400aa4:	4641      	mov	r1, r8
  400aa6:	4630      	mov	r0, r6
  400aa8:	4c2a      	ldr	r4, [pc, #168]	; (400b54 <hif_handle_isr+0x2b0>)
  400aaa:	47a0      	blx	r4
  400aac:	4835      	ldr	r0, [pc, #212]	; (400b84 <hif_handle_isr+0x2e0>)
  400aae:	47a0      	blx	r4
  400ab0:	482a      	ldr	r0, [pc, #168]	; (400b5c <hif_handle_isr+0x2b8>)
  400ab2:	47a0      	blx	r4
						ret = hif_set_rx_done();
  400ab4:	4b34      	ldr	r3, [pc, #208]	; (400b88 <hif_handle_isr+0x2e4>)
  400ab6:	4798      	blx	r3
  400ab8:	e02e      	b.n	400b18 <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  400aba:	f240 2211 	movw	r2, #529	; 0x211
  400abe:	4641      	mov	r1, r8
  400ac0:	4630      	mov	r0, r6
  400ac2:	4c24      	ldr	r4, [pc, #144]	; (400b54 <hif_handle_isr+0x2b0>)
  400ac4:	47a0      	blx	r4
  400ac6:	4831      	ldr	r0, [pc, #196]	; (400b8c <hif_handle_isr+0x2e8>)
  400ac8:	47a0      	blx	r4
  400aca:	4824      	ldr	r0, [pc, #144]	; (400b5c <hif_handle_isr+0x2b8>)
  400acc:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  400ace:	f06f 0401 	mvn.w	r4, #1
  400ad2:	e026      	b.n	400b22 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  400ad4:	f44f 7206 	mov.w	r2, #536	; 0x218
  400ad8:	4641      	mov	r1, r8
  400ada:	4630      	mov	r0, r6
  400adc:	4c1d      	ldr	r4, [pc, #116]	; (400b54 <hif_handle_isr+0x2b0>)
  400ade:	47a0      	blx	r4
  400ae0:	9903      	ldr	r1, [sp, #12]
  400ae2:	482b      	ldr	r0, [pc, #172]	; (400b90 <hif_handle_isr+0x2ec>)
  400ae4:	47a0      	blx	r4
  400ae6:	481d      	ldr	r0, [pc, #116]	; (400b5c <hif_handle_isr+0x2b8>)
  400ae8:	47a0      	blx	r4
  400aea:	e015      	b.n	400b18 <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400aec:	f240 221e 	movw	r2, #542	; 0x21e
  400af0:	4641      	mov	r1, r8
  400af2:	4630      	mov	r0, r6
  400af4:	4d17      	ldr	r5, [pc, #92]	; (400b54 <hif_handle_isr+0x2b0>)
  400af6:	47a8      	blx	r5
  400af8:	4826      	ldr	r0, [pc, #152]	; (400b94 <hif_handle_isr+0x2f0>)
  400afa:	47a8      	blx	r5
  400afc:	4817      	ldr	r0, [pc, #92]	; (400b5c <hif_handle_isr+0x2b8>)
  400afe:	47a8      	blx	r5
  400b00:	e00f      	b.n	400b22 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400b02:	f44f 7209 	mov.w	r2, #548	; 0x224
  400b06:	4641      	mov	r1, r8
  400b08:	4630      	mov	r0, r6
  400b0a:	4d12      	ldr	r5, [pc, #72]	; (400b54 <hif_handle_isr+0x2b0>)
  400b0c:	47a8      	blx	r5
  400b0e:	4822      	ldr	r0, [pc, #136]	; (400b98 <hif_handle_isr+0x2f4>)
  400b10:	47a8      	blx	r5
  400b12:	4812      	ldr	r0, [pc, #72]	; (400b5c <hif_handle_isr+0x2b8>)
  400b14:	47a8      	blx	r5
  400b16:	e004      	b.n	400b22 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  400b18:	4b20      	ldr	r3, [pc, #128]	; (400b9c <hif_handle_isr+0x2f8>)
  400b1a:	4798      	blx	r3
  400b1c:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  400b1e:	2c00      	cmp	r4, #0
  400b20:	d046      	beq.n	400bb0 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400b22:	f240 2243 	movw	r2, #579	; 0x243
  400b26:	491e      	ldr	r1, [pc, #120]	; (400ba0 <hif_handle_isr+0x2fc>)
  400b28:	4630      	mov	r0, r6
  400b2a:	4d0a      	ldr	r5, [pc, #40]	; (400b54 <hif_handle_isr+0x2b0>)
  400b2c:	47a8      	blx	r5
  400b2e:	4621      	mov	r1, r4
  400b30:	481c      	ldr	r0, [pc, #112]	; (400ba4 <hif_handle_isr+0x300>)
  400b32:	47a8      	blx	r5
  400b34:	4809      	ldr	r0, [pc, #36]	; (400b5c <hif_handle_isr+0x2b8>)
  400b36:	47a8      	blx	r5
			}
		}
  400b38:	e6c4      	b.n	4008c4 <hif_handle_isr+0x20>
  400b3a:	bf00      	nop
  400b3c:	004005e9 	.word	0x004005e9
  400b40:	004067d0 	.word	0x004067d0
  400b44:	004018f9 	.word	0x004018f9
  400b48:	00400301 	.word	0x00400301
  400b4c:	00401905 	.word	0x00401905
  400b50:	204008c0 	.word	0x204008c0
  400b54:	00403775 	.word	0x00403775
  400b58:	00406844 	.word	0x00406844
  400b5c:	004067fc 	.word	0x004067fc
  400b60:	00401911 	.word	0x00401911
  400b64:	0040686c 	.word	0x0040686c
  400b68:	00406884 	.word	0x00406884
  400b6c:	204008a8 	.word	0x204008a8
  400b70:	204008bc 	.word	0x204008bc
  400b74:	204008c4 	.word	0x204008c4
  400b78:	204008a4 	.word	0x204008a4
  400b7c:	204008b4 	.word	0x204008b4
  400b80:	004068c4 	.word	0x004068c4
  400b84:	004068dc 	.word	0x004068dc
  400b88:	004005a9 	.word	0x004005a9
  400b8c:	00406900 	.word	0x00406900
  400b90:	00406914 	.word	0x00406914
  400b94:	00406930 	.word	0x00406930
  400b98:	00406954 	.word	0x00406954
  400b9c:	00400641 	.word	0x00400641
  400ba0:	00406a74 	.word	0x00406a74
  400ba4:	00406974 	.word	0x00406974
  400ba8:	204008ac 	.word	0x204008ac
  400bac:	00406810 	.word	0x00406810

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  400bb0:	f899 3000 	ldrb.w	r3, [r9]
  400bb4:	f013 0fff 	tst.w	r3, #255	; 0xff
  400bb8:	f47f ae7e 	bne.w	4008b8 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  400bbc:	2000      	movs	r0, #0
  400bbe:	b007      	add	sp, #28
  400bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00400bc4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  400bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bc8:	b083      	sub	sp, #12
  400bca:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  400bcc:	2a00      	cmp	r2, #0
  400bce:	bf18      	it	ne
  400bd0:	2900      	cmpne	r1, #0
  400bd2:	d003      	beq.n	400bdc <hif_receive+0x18>
  400bd4:	4605      	mov	r5, r0
  400bd6:	460f      	mov	r7, r1
  400bd8:	4616      	mov	r6, r2
  400bda:	b9a0      	cbnz	r0, 400c06 <hif_receive+0x42>
	{
		if(isDone)
  400bdc:	b134      	cbz	r4, 400bec <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  400bde:	2201      	movs	r2, #1
  400be0:	4b31      	ldr	r3, [pc, #196]	; (400ca8 <hif_receive+0xe4>)
  400be2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  400be4:	4b31      	ldr	r3, [pc, #196]	; (400cac <hif_receive+0xe8>)
  400be6:	4798      	blx	r3
  400be8:	4603      	mov	r3, r0
  400bea:	e058      	b.n	400c9e <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  400bec:	f240 2269 	movw	r2, #617	; 0x269
  400bf0:	492f      	ldr	r1, [pc, #188]	; (400cb0 <hif_receive+0xec>)
  400bf2:	4830      	ldr	r0, [pc, #192]	; (400cb4 <hif_receive+0xf0>)
  400bf4:	4c30      	ldr	r4, [pc, #192]	; (400cb8 <hif_receive+0xf4>)
  400bf6:	47a0      	blx	r4
  400bf8:	4830      	ldr	r0, [pc, #192]	; (400cbc <hif_receive+0xf8>)
  400bfa:	47a0      	blx	r4
  400bfc:	4830      	ldr	r0, [pc, #192]	; (400cc0 <hif_receive+0xfc>)
  400bfe:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  400c00:	f06f 030b 	mvn.w	r3, #11
  400c04:	e04b      	b.n	400c9e <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400c06:	4669      	mov	r1, sp
  400c08:	f241 0070 	movw	r0, #4208	; 0x1070
  400c0c:	4b2d      	ldr	r3, [pc, #180]	; (400cc4 <hif_receive+0x100>)
  400c0e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c10:	4603      	mov	r3, r0
  400c12:	2800      	cmp	r0, #0
  400c14:	d143      	bne.n	400c9e <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  400c16:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  400c1a:	a901      	add	r1, sp, #4
  400c1c:	f241 0084 	movw	r0, #4228	; 0x1084
  400c20:	4b28      	ldr	r3, [pc, #160]	; (400cc4 <hif_receive+0x100>)
  400c22:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c24:	4603      	mov	r3, r0
  400c26:	2800      	cmp	r0, #0
  400c28:	d139      	bne.n	400c9e <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  400c2a:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  400c2e:	4546      	cmp	r6, r8
  400c30:	d90e      	bls.n	400c50 <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  400c32:	f240 227a 	movw	r2, #634	; 0x27a
  400c36:	491e      	ldr	r1, [pc, #120]	; (400cb0 <hif_receive+0xec>)
  400c38:	481e      	ldr	r0, [pc, #120]	; (400cb4 <hif_receive+0xf0>)
  400c3a:	4c1f      	ldr	r4, [pc, #124]	; (400cb8 <hif_receive+0xf4>)
  400c3c:	47a0      	blx	r4
  400c3e:	4642      	mov	r2, r8
  400c40:	4631      	mov	r1, r6
  400c42:	4821      	ldr	r0, [pc, #132]	; (400cc8 <hif_receive+0x104>)
  400c44:	47a0      	blx	r4
  400c46:	481e      	ldr	r0, [pc, #120]	; (400cc0 <hif_receive+0xfc>)
  400c48:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  400c4a:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  400c4e:	e026      	b.n	400c9e <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  400c50:	9b01      	ldr	r3, [sp, #4]
  400c52:	429d      	cmp	r5, r3
  400c54:	d304      	bcc.n	400c60 <hif_receive+0x9c>
  400c56:	eb05 0906 	add.w	r9, r5, r6
  400c5a:	4443      	add	r3, r8
  400c5c:	4599      	cmp	r9, r3
  400c5e:	d90c      	bls.n	400c7a <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  400c60:	f44f 7220 	mov.w	r2, #640	; 0x280
  400c64:	4912      	ldr	r1, [pc, #72]	; (400cb0 <hif_receive+0xec>)
  400c66:	4813      	ldr	r0, [pc, #76]	; (400cb4 <hif_receive+0xf0>)
  400c68:	4c13      	ldr	r4, [pc, #76]	; (400cb8 <hif_receive+0xf4>)
  400c6a:	47a0      	blx	r4
  400c6c:	4817      	ldr	r0, [pc, #92]	; (400ccc <hif_receive+0x108>)
  400c6e:	47a0      	blx	r4
  400c70:	4813      	ldr	r0, [pc, #76]	; (400cc0 <hif_receive+0xfc>)
  400c72:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  400c74:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  400c78:	e011      	b.n	400c9e <hif_receive+0xda>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  400c7a:	4632      	mov	r2, r6
  400c7c:	4639      	mov	r1, r7
  400c7e:	4628      	mov	r0, r5
  400c80:	4b13      	ldr	r3, [pc, #76]	; (400cd0 <hif_receive+0x10c>)
  400c82:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c84:	4603      	mov	r3, r0
  400c86:	b950      	cbnz	r0, 400c9e <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  400c88:	9a01      	ldr	r2, [sp, #4]
  400c8a:	4442      	add	r2, r8
  400c8c:	454a      	cmp	r2, r9
  400c8e:	d000      	beq.n	400c92 <hif_receive+0xce>
  400c90:	b12c      	cbz	r4, 400c9e <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  400c92:	2201      	movs	r2, #1
  400c94:	4b04      	ldr	r3, [pc, #16]	; (400ca8 <hif_receive+0xe4>)
  400c96:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  400c98:	4b04      	ldr	r3, [pc, #16]	; (400cac <hif_receive+0xe8>)
  400c9a:	4798      	blx	r3
  400c9c:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  400c9e:	4618      	mov	r0, r3
  400ca0:	b003      	add	sp, #12
  400ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400ca6:	bf00      	nop
  400ca8:	204008c0 	.word	0x204008c0
  400cac:	004005a9 	.word	0x004005a9
  400cb0:	00406818 	.word	0x00406818
  400cb4:	004067d0 	.word	0x004067d0
  400cb8:	00403775 	.word	0x00403775
  400cbc:	004069a4 	.word	0x004069a4
  400cc0:	004067fc 	.word	0x004067fc
  400cc4:	004018f9 	.word	0x004018f9
  400cc8:	004069c4 	.word	0x004069c4
  400ccc:	00406a08 	.word	0x00406a08
  400cd0:	00401911 	.word	0x00401911

00400cd4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  400cd4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  400cd6:	1e43      	subs	r3, r0, #1
  400cd8:	2b06      	cmp	r3, #6
  400cda:	d81d      	bhi.n	400d18 <hif_register_cb+0x44>
  400cdc:	e8df f003 	tbb	[pc, r3]
  400ce0:	0c100408 	.word	0x0c100408
  400ce4:	141c      	.short	0x141c
  400ce6:	18          	.byte	0x18
  400ce7:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  400ce8:	4b13      	ldr	r3, [pc, #76]	; (400d38 <hif_register_cb+0x64>)
  400cea:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cec:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  400cee:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  400cf0:	4b12      	ldr	r3, [pc, #72]	; (400d3c <hif_register_cb+0x68>)
  400cf2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cf4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  400cf6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  400cf8:	4b11      	ldr	r3, [pc, #68]	; (400d40 <hif_register_cb+0x6c>)
  400cfa:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cfc:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  400cfe:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  400d00:	4b10      	ldr	r3, [pc, #64]	; (400d44 <hif_register_cb+0x70>)
  400d02:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d04:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  400d06:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  400d08:	4b0f      	ldr	r3, [pc, #60]	; (400d48 <hif_register_cb+0x74>)
  400d0a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d0c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  400d0e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  400d10:	4b0e      	ldr	r3, [pc, #56]	; (400d4c <hif_register_cb+0x78>)
  400d12:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d14:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  400d16:	bd38      	pop	{r3, r4, r5, pc}
  400d18:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  400d1a:	f240 22b9 	movw	r2, #697	; 0x2b9
  400d1e:	490c      	ldr	r1, [pc, #48]	; (400d50 <hif_register_cb+0x7c>)
  400d20:	480c      	ldr	r0, [pc, #48]	; (400d54 <hif_register_cb+0x80>)
  400d22:	4d0d      	ldr	r5, [pc, #52]	; (400d58 <hif_register_cb+0x84>)
  400d24:	47a8      	blx	r5
  400d26:	4621      	mov	r1, r4
  400d28:	480c      	ldr	r0, [pc, #48]	; (400d5c <hif_register_cb+0x88>)
  400d2a:	47a8      	blx	r5
  400d2c:	480c      	ldr	r0, [pc, #48]	; (400d60 <hif_register_cb+0x8c>)
  400d2e:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  400d30:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  400d34:	bd38      	pop	{r3, r4, r5, pc}
  400d36:	bf00      	nop
  400d38:	204008bc 	.word	0x204008bc
  400d3c:	204008a8 	.word	0x204008a8
  400d40:	204008c4 	.word	0x204008c4
  400d44:	204008b0 	.word	0x204008b0
  400d48:	204008a4 	.word	0x204008a4
  400d4c:	204008b4 	.word	0x204008b4
  400d50:	00406a58 	.word	0x00406a58
  400d54:	004067d0 	.word	0x004067d0
  400d58:	00403775 	.word	0x00403775
  400d5c:	00406a4c 	.word	0x00406a4c
  400d60:	004067fc 	.word	0x004067fc

00400d64 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  400d64:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  400d66:	2400      	movs	r4, #0
  400d68:	4b09      	ldr	r3, [pc, #36]	; (400d90 <hif_init+0x2c>)
  400d6a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  400d6c:	4b09      	ldr	r3, [pc, #36]	; (400d94 <hif_init+0x30>)
  400d6e:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  400d70:	4b09      	ldr	r3, [pc, #36]	; (400d98 <hif_init+0x34>)
  400d72:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  400d74:	4b09      	ldr	r3, [pc, #36]	; (400d9c <hif_init+0x38>)
  400d76:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  400d78:	4b09      	ldr	r3, [pc, #36]	; (400da0 <hif_init+0x3c>)
  400d7a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  400d7c:	4809      	ldr	r0, [pc, #36]	; (400da4 <hif_init+0x40>)
  400d7e:	4b0a      	ldr	r3, [pc, #40]	; (400da8 <hif_init+0x44>)
  400d80:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400d82:	490a      	ldr	r1, [pc, #40]	; (400dac <hif_init+0x48>)
  400d84:	2003      	movs	r0, #3
  400d86:	4b0a      	ldr	r3, [pc, #40]	; (400db0 <hif_init+0x4c>)
  400d88:	4798      	blx	r3

	return M2M_SUCCESS;
}
  400d8a:	4620      	mov	r0, r4
  400d8c:	bd10      	pop	{r4, pc}
  400d8e:	bf00      	nop
  400d90:	204008a8 	.word	0x204008a8
  400d94:	204008bc 	.word	0x204008bc
  400d98:	204008c8 	.word	0x204008c8
  400d9c:	204008b8 	.word	0x204008b8
  400da0:	204008ac 	.word	0x204008ac
  400da4:	00400595 	.word	0x00400595
  400da8:	00400281 	.word	0x00400281
  400dac:	004005a5 	.word	0x004005a5
  400db0:	00400cd5 	.word	0x00400cd5

00400db4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400db4:	b530      	push	{r4, r5, lr}
  400db6:	b09f      	sub	sp, #124	; 0x7c
  400db8:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  400dba:	282c      	cmp	r0, #44	; 0x2c
  400dbc:	d111      	bne.n	400de2 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  400dbe:	2300      	movs	r3, #0
  400dc0:	2204      	movs	r2, #4
  400dc2:	a903      	add	r1, sp, #12
  400dc4:	4628      	mov	r0, r5
  400dc6:	4c90      	ldr	r4, [pc, #576]	; (401008 <m2m_wifi_cb+0x254>)
  400dc8:	47a0      	blx	r4
  400dca:	2800      	cmp	r0, #0
  400dcc:	f040 8119 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dd0:	4b8e      	ldr	r3, [pc, #568]	; (40100c <m2m_wifi_cb+0x258>)
  400dd2:	681b      	ldr	r3, [r3, #0]
  400dd4:	2b00      	cmp	r3, #0
  400dd6:	f000 8114 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  400dda:	a903      	add	r1, sp, #12
  400ddc:	202c      	movs	r0, #44	; 0x2c
  400dde:	4798      	blx	r3
  400de0:	e10f      	b.n	401002 <m2m_wifi_cb+0x24e>
  400de2:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  400de4:	281b      	cmp	r0, #27
  400de6:	d111      	bne.n	400e0c <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  400de8:	2300      	movs	r3, #0
  400dea:	2208      	movs	r2, #8
  400dec:	a903      	add	r1, sp, #12
  400dee:	4628      	mov	r0, r5
  400df0:	4c85      	ldr	r4, [pc, #532]	; (401008 <m2m_wifi_cb+0x254>)
  400df2:	47a0      	blx	r4
  400df4:	2800      	cmp	r0, #0
  400df6:	f040 8104 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dfa:	4b84      	ldr	r3, [pc, #528]	; (40100c <m2m_wifi_cb+0x258>)
  400dfc:	681b      	ldr	r3, [r3, #0]
  400dfe:	2b00      	cmp	r3, #0
  400e00:	f000 80ff 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  400e04:	a903      	add	r1, sp, #12
  400e06:	201b      	movs	r0, #27
  400e08:	4798      	blx	r3
  400e0a:	e0fa      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  400e0c:	2806      	cmp	r0, #6
  400e0e:	d111      	bne.n	400e34 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  400e10:	2301      	movs	r3, #1
  400e12:	2230      	movs	r2, #48	; 0x30
  400e14:	a903      	add	r1, sp, #12
  400e16:	4628      	mov	r0, r5
  400e18:	4c7b      	ldr	r4, [pc, #492]	; (401008 <m2m_wifi_cb+0x254>)
  400e1a:	47a0      	blx	r4
  400e1c:	2800      	cmp	r0, #0
  400e1e:	f040 80f0 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400e22:	4b7a      	ldr	r3, [pc, #488]	; (40100c <m2m_wifi_cb+0x258>)
  400e24:	681b      	ldr	r3, [r3, #0]
  400e26:	2b00      	cmp	r3, #0
  400e28:	f000 80eb 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  400e2c:	a903      	add	r1, sp, #12
  400e2e:	2006      	movs	r0, #6
  400e30:	4798      	blx	r3
  400e32:	e0e6      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  400e34:	280e      	cmp	r0, #14
  400e36:	f000 80e4 	beq.w	401002 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  400e3a:	2832      	cmp	r0, #50	; 0x32
  400e3c:	d111      	bne.n	400e62 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  400e3e:	2300      	movs	r3, #0
  400e40:	2210      	movs	r2, #16
  400e42:	a903      	add	r1, sp, #12
  400e44:	4628      	mov	r0, r5
  400e46:	4c70      	ldr	r4, [pc, #448]	; (401008 <m2m_wifi_cb+0x254>)
  400e48:	47a0      	blx	r4
  400e4a:	2800      	cmp	r0, #0
  400e4c:	f040 80d9 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e50:	4b6e      	ldr	r3, [pc, #440]	; (40100c <m2m_wifi_cb+0x258>)
  400e52:	681b      	ldr	r3, [r3, #0]
  400e54:	2b00      	cmp	r3, #0
  400e56:	f000 80d4 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  400e5a:	a903      	add	r1, sp, #12
  400e5c:	2032      	movs	r0, #50	; 0x32
  400e5e:	4798      	blx	r3
  400e60:	e0cf      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  400e62:	282f      	cmp	r0, #47	; 0x2f
  400e64:	d116      	bne.n	400e94 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  400e66:	2264      	movs	r2, #100	; 0x64
  400e68:	2100      	movs	r1, #0
  400e6a:	a803      	add	r0, sp, #12
  400e6c:	4b68      	ldr	r3, [pc, #416]	; (401010 <m2m_wifi_cb+0x25c>)
  400e6e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  400e70:	2300      	movs	r3, #0
  400e72:	2264      	movs	r2, #100	; 0x64
  400e74:	a903      	add	r1, sp, #12
  400e76:	4628      	mov	r0, r5
  400e78:	4c63      	ldr	r4, [pc, #396]	; (401008 <m2m_wifi_cb+0x254>)
  400e7a:	47a0      	blx	r4
  400e7c:	2800      	cmp	r0, #0
  400e7e:	f040 80c0 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e82:	4b62      	ldr	r3, [pc, #392]	; (40100c <m2m_wifi_cb+0x258>)
  400e84:	681b      	ldr	r3, [r3, #0]
  400e86:	2b00      	cmp	r3, #0
  400e88:	f000 80bb 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  400e8c:	a903      	add	r1, sp, #12
  400e8e:	202f      	movs	r0, #47	; 0x2f
  400e90:	4798      	blx	r3
  400e92:	e0b6      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  400e94:	2834      	cmp	r0, #52	; 0x34
  400e96:	d120      	bne.n	400eda <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  400e98:	2300      	movs	r3, #0
  400e9a:	2204      	movs	r2, #4
  400e9c:	a903      	add	r1, sp, #12
  400e9e:	4628      	mov	r0, r5
  400ea0:	4c59      	ldr	r4, [pc, #356]	; (401008 <m2m_wifi_cb+0x254>)
  400ea2:	47a0      	blx	r4
  400ea4:	2800      	cmp	r0, #0
  400ea6:	f040 80ac 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  400eaa:	485a      	ldr	r0, [pc, #360]	; (401014 <m2m_wifi_cb+0x260>)
  400eac:	4c5a      	ldr	r4, [pc, #360]	; (401018 <m2m_wifi_cb+0x264>)
  400eae:	47a0      	blx	r4
  400eb0:	9903      	ldr	r1, [sp, #12]
  400eb2:	0e0b      	lsrs	r3, r1, #24
  400eb4:	9300      	str	r3, [sp, #0]
  400eb6:	f3c1 4307 	ubfx	r3, r1, #16, #8
  400eba:	f3c1 2207 	ubfx	r2, r1, #8, #8
  400ebe:	b2c9      	uxtb	r1, r1
  400ec0:	4856      	ldr	r0, [pc, #344]	; (40101c <m2m_wifi_cb+0x268>)
  400ec2:	47a0      	blx	r4
  400ec4:	4856      	ldr	r0, [pc, #344]	; (401020 <m2m_wifi_cb+0x26c>)
  400ec6:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  400ec8:	4b50      	ldr	r3, [pc, #320]	; (40100c <m2m_wifi_cb+0x258>)
  400eca:	681b      	ldr	r3, [r3, #0]
  400ecc:	2b00      	cmp	r3, #0
  400ece:	f000 8098 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  400ed2:	2100      	movs	r1, #0
  400ed4:	2034      	movs	r0, #52	; 0x34
  400ed6:	4798      	blx	r3
  400ed8:	e093      	b.n	401002 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  400eda:	2811      	cmp	r0, #17
  400edc:	d116      	bne.n	400f0c <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  400ede:	2300      	movs	r3, #0
  400ee0:	4a50      	ldr	r2, [pc, #320]	; (401024 <m2m_wifi_cb+0x270>)
  400ee2:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  400ee4:	2204      	movs	r2, #4
  400ee6:	a903      	add	r1, sp, #12
  400ee8:	4628      	mov	r0, r5
  400eea:	4c47      	ldr	r4, [pc, #284]	; (401008 <m2m_wifi_cb+0x254>)
  400eec:	47a0      	blx	r4
  400eee:	2800      	cmp	r0, #0
  400ef0:	f040 8087 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  400ef4:	f89d 200c 	ldrb.w	r2, [sp, #12]
  400ef8:	4b4b      	ldr	r3, [pc, #300]	; (401028 <m2m_wifi_cb+0x274>)
  400efa:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  400efc:	4b43      	ldr	r3, [pc, #268]	; (40100c <m2m_wifi_cb+0x258>)
  400efe:	681b      	ldr	r3, [r3, #0]
  400f00:	2b00      	cmp	r3, #0
  400f02:	d07e      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  400f04:	a903      	add	r1, sp, #12
  400f06:	2011      	movs	r0, #17
  400f08:	4798      	blx	r3
  400f0a:	e07a      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  400f0c:	2813      	cmp	r0, #19
  400f0e:	d10f      	bne.n	400f30 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  400f10:	2300      	movs	r3, #0
  400f12:	222c      	movs	r2, #44	; 0x2c
  400f14:	a903      	add	r1, sp, #12
  400f16:	4628      	mov	r0, r5
  400f18:	4c3b      	ldr	r4, [pc, #236]	; (401008 <m2m_wifi_cb+0x254>)
  400f1a:	47a0      	blx	r4
  400f1c:	2800      	cmp	r0, #0
  400f1e:	d170      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f20:	4b3a      	ldr	r3, [pc, #232]	; (40100c <m2m_wifi_cb+0x258>)
  400f22:	681b      	ldr	r3, [r3, #0]
  400f24:	2b00      	cmp	r3, #0
  400f26:	d06c      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  400f28:	a903      	add	r1, sp, #12
  400f2a:	2013      	movs	r0, #19
  400f2c:	4798      	blx	r3
  400f2e:	e068      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  400f30:	2804      	cmp	r0, #4
  400f32:	d10f      	bne.n	400f54 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f34:	2300      	movs	r3, #0
  400f36:	2204      	movs	r2, #4
  400f38:	a91c      	add	r1, sp, #112	; 0x70
  400f3a:	4628      	mov	r0, r5
  400f3c:	4c32      	ldr	r4, [pc, #200]	; (401008 <m2m_wifi_cb+0x254>)
  400f3e:	47a0      	blx	r4
  400f40:	2800      	cmp	r0, #0
  400f42:	d15e      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f44:	4b31      	ldr	r3, [pc, #196]	; (40100c <m2m_wifi_cb+0x258>)
  400f46:	681b      	ldr	r3, [r3, #0]
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d05a      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  400f4c:	a91c      	add	r1, sp, #112	; 0x70
  400f4e:	2004      	movs	r0, #4
  400f50:	4798      	blx	r3
  400f52:	e056      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  400f54:	2865      	cmp	r0, #101	; 0x65
  400f56:	d10f      	bne.n	400f78 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f58:	2300      	movs	r3, #0
  400f5a:	2204      	movs	r2, #4
  400f5c:	a91c      	add	r1, sp, #112	; 0x70
  400f5e:	4628      	mov	r0, r5
  400f60:	4c29      	ldr	r4, [pc, #164]	; (401008 <m2m_wifi_cb+0x254>)
  400f62:	47a0      	blx	r4
  400f64:	2800      	cmp	r0, #0
  400f66:	d14c      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f68:	4b28      	ldr	r3, [pc, #160]	; (40100c <m2m_wifi_cb+0x258>)
  400f6a:	681b      	ldr	r3, [r3, #0]
  400f6c:	2b00      	cmp	r3, #0
  400f6e:	d048      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  400f70:	a91c      	add	r1, sp, #112	; 0x70
  400f72:	2065      	movs	r0, #101	; 0x65
  400f74:	4798      	blx	r3
  400f76:	e044      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  400f78:	2809      	cmp	r0, #9
  400f7a:	d10f      	bne.n	400f9c <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  400f7c:	2301      	movs	r3, #1
  400f7e:	2264      	movs	r2, #100	; 0x64
  400f80:	a903      	add	r1, sp, #12
  400f82:	4628      	mov	r0, r5
  400f84:	4c20      	ldr	r4, [pc, #128]	; (401008 <m2m_wifi_cb+0x254>)
  400f86:	47a0      	blx	r4
  400f88:	2800      	cmp	r0, #0
  400f8a:	d13a      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400f8c:	4b1f      	ldr	r3, [pc, #124]	; (40100c <m2m_wifi_cb+0x258>)
  400f8e:	681b      	ldr	r3, [r3, #0]
  400f90:	2b00      	cmp	r3, #0
  400f92:	d036      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  400f94:	a903      	add	r1, sp, #12
  400f96:	2009      	movs	r0, #9
  400f98:	4798      	blx	r3
  400f9a:	e032      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  400f9c:	282a      	cmp	r0, #42	; 0x2a
  400f9e:	d10d      	bne.n	400fbc <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  400fa0:	2301      	movs	r3, #1
  400fa2:	2204      	movs	r2, #4
  400fa4:	a903      	add	r1, sp, #12
  400fa6:	4628      	mov	r0, r5
  400fa8:	4c17      	ldr	r4, [pc, #92]	; (401008 <m2m_wifi_cb+0x254>)
  400faa:	47a0      	blx	r4
  400fac:	bb48      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400fae:	4b17      	ldr	r3, [pc, #92]	; (40100c <m2m_wifi_cb+0x258>)
  400fb0:	681b      	ldr	r3, [r3, #0]
  400fb2:	b333      	cbz	r3, 401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  400fb4:	a903      	add	r1, sp, #12
  400fb6:	202a      	movs	r0, #42	; 0x2a
  400fb8:	4798      	blx	r3
  400fba:	e022      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  400fbc:	2820      	cmp	r0, #32
  400fbe:	d115      	bne.n	400fec <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  400fc0:	2300      	movs	r3, #0
  400fc2:	2208      	movs	r2, #8
  400fc4:	a903      	add	r1, sp, #12
  400fc6:	4628      	mov	r0, r5
  400fc8:	4c0f      	ldr	r4, [pc, #60]	; (401008 <m2m_wifi_cb+0x254>)
  400fca:	47a0      	blx	r4
  400fcc:	b9c8      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  400fce:	2301      	movs	r3, #1
  400fd0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400fd4:	9903      	ldr	r1, [sp, #12]
  400fd6:	f105 0008 	add.w	r0, r5, #8
  400fda:	47a0      	blx	r4
  400fdc:	b988      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  400fde:	4b0b      	ldr	r3, [pc, #44]	; (40100c <m2m_wifi_cb+0x258>)
  400fe0:	681b      	ldr	r3, [r3, #0]
  400fe2:	b173      	cbz	r3, 401002 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  400fe4:	a903      	add	r1, sp, #12
  400fe6:	2020      	movs	r0, #32
  400fe8:	4798      	blx	r3
  400fea:	e00a      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  400fec:	f44f 7295 	mov.w	r2, #298	; 0x12a
  400ff0:	490e      	ldr	r1, [pc, #56]	; (40102c <m2m_wifi_cb+0x278>)
  400ff2:	480f      	ldr	r0, [pc, #60]	; (401030 <m2m_wifi_cb+0x27c>)
  400ff4:	4d08      	ldr	r5, [pc, #32]	; (401018 <m2m_wifi_cb+0x264>)
  400ff6:	47a8      	blx	r5
  400ff8:	4621      	mov	r1, r4
  400ffa:	480e      	ldr	r0, [pc, #56]	; (401034 <m2m_wifi_cb+0x280>)
  400ffc:	47a8      	blx	r5
  400ffe:	4808      	ldr	r0, [pc, #32]	; (401020 <m2m_wifi_cb+0x26c>)
  401000:	47a8      	blx	r5
	}
}
  401002:	b01f      	add	sp, #124	; 0x7c
  401004:	bd30      	pop	{r4, r5, pc}
  401006:	bf00      	nop
  401008:	00400bc5 	.word	0x00400bc5
  40100c:	204008cc 	.word	0x204008cc
  401010:	00400569 	.word	0x00400569
  401014:	00406aa4 	.word	0x00406aa4
  401018:	00403775 	.word	0x00403775
  40101c:	00406ab0 	.word	0x00406ab0
  401020:	004067fc 	.word	0x004067fc
  401024:	204008d0 	.word	0x204008d0
  401028:	204008d1 	.word	0x204008d1
  40102c:	00406a98 	.word	0x00406a98
  401030:	004067d0 	.word	0x004067d0
  401034:	00406ad0 	.word	0x00406ad0

00401038 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401038:	b5f0      	push	{r4, r5, r6, r7, lr}
  40103a:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  40103c:	2301      	movs	r3, #1
  40103e:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  401042:	2800      	cmp	r0, #0
  401044:	d04e      	beq.n	4010e4 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401046:	6802      	ldr	r2, [r0, #0]
  401048:	4b29      	ldr	r3, [pc, #164]	; (4010f0 <m2m_wifi_init+0xb8>)
  40104a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  40104c:	2200      	movs	r2, #0
  40104e:	4b29      	ldr	r3, [pc, #164]	; (4010f4 <m2m_wifi_init+0xbc>)
  401050:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  401052:	f10d 0007 	add.w	r0, sp, #7
  401056:	4b28      	ldr	r3, [pc, #160]	; (4010f8 <m2m_wifi_init+0xc0>)
  401058:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  40105a:	4604      	mov	r4, r0
  40105c:	2800      	cmp	r0, #0
  40105e:	d143      	bne.n	4010e8 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  401060:	4b26      	ldr	r3, [pc, #152]	; (4010fc <m2m_wifi_init+0xc4>)
  401062:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401064:	4604      	mov	r4, r0
  401066:	2800      	cmp	r0, #0
  401068:	d138      	bne.n	4010dc <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40106a:	4925      	ldr	r1, [pc, #148]	; (401100 <m2m_wifi_init+0xc8>)
  40106c:	2001      	movs	r0, #1
  40106e:	4b25      	ldr	r3, [pc, #148]	; (401104 <m2m_wifi_init+0xcc>)
  401070:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  401072:	a802      	add	r0, sp, #8
  401074:	4b24      	ldr	r3, [pc, #144]	; (401108 <m2m_wifi_init+0xd0>)
  401076:	4798      	blx	r3
  401078:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40107a:	4f24      	ldr	r7, [pc, #144]	; (40110c <m2m_wifi_init+0xd4>)
  40107c:	4638      	mov	r0, r7
  40107e:	4d24      	ldr	r5, [pc, #144]	; (401110 <m2m_wifi_init+0xd8>)
  401080:	47a8      	blx	r5
  401082:	f89d 300e 	ldrb.w	r3, [sp, #14]
  401086:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40108a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40108e:	4821      	ldr	r0, [pc, #132]	; (401114 <m2m_wifi_init+0xdc>)
  401090:	47a8      	blx	r5
  401092:	4e21      	ldr	r6, [pc, #132]	; (401118 <m2m_wifi_init+0xe0>)
  401094:	4630      	mov	r0, r6
  401096:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  401098:	4638      	mov	r0, r7
  40109a:	47a8      	blx	r5
  40109c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4010a0:	f89d 2010 	ldrb.w	r2, [sp, #16]
  4010a4:	f89d 100f 	ldrb.w	r1, [sp, #15]
  4010a8:	481c      	ldr	r0, [pc, #112]	; (40111c <m2m_wifi_init+0xe4>)
  4010aa:	47a8      	blx	r5
  4010ac:	4630      	mov	r0, r6
  4010ae:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4010b0:	4638      	mov	r0, r7
  4010b2:	47a8      	blx	r5
  4010b4:	2300      	movs	r3, #0
  4010b6:	2203      	movs	r2, #3
  4010b8:	2113      	movs	r1, #19
  4010ba:	4819      	ldr	r0, [pc, #100]	; (401120 <m2m_wifi_init+0xe8>)
  4010bc:	47a8      	blx	r5
  4010be:	4630      	mov	r0, r6
  4010c0:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4010c2:	f114 0f0d 	cmn.w	r4, #13
  4010c6:	d10f      	bne.n	4010e8 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  4010c8:	f240 12d5 	movw	r2, #469	; 0x1d5
  4010cc:	4915      	ldr	r1, [pc, #84]	; (401124 <m2m_wifi_init+0xec>)
  4010ce:	4816      	ldr	r0, [pc, #88]	; (401128 <m2m_wifi_init+0xf0>)
  4010d0:	47a8      	blx	r5
  4010d2:	4816      	ldr	r0, [pc, #88]	; (40112c <m2m_wifi_init+0xf4>)
  4010d4:	47a8      	blx	r5
  4010d6:	4630      	mov	r0, r6
  4010d8:	47a8      	blx	r5
  4010da:	e005      	b.n	4010e8 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  4010dc:	2000      	movs	r0, #0
  4010de:	4b14      	ldr	r3, [pc, #80]	; (401130 <m2m_wifi_init+0xf8>)
  4010e0:	4798      	blx	r3
  4010e2:	e001      	b.n	4010e8 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  4010e4:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  4010e8:	4620      	mov	r0, r4
  4010ea:	b00b      	add	sp, #44	; 0x2c
  4010ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4010ee:	bf00      	nop
  4010f0:	204008cc 	.word	0x204008cc
  4010f4:	204008d0 	.word	0x204008d0
  4010f8:	00401a7d 	.word	0x00401a7d
  4010fc:	00400d65 	.word	0x00400d65
  401100:	00400db5 	.word	0x00400db5
  401104:	00400cd5 	.word	0x00400cd5
  401108:	004019d1 	.word	0x004019d1
  40110c:	00406aa4 	.word	0x00406aa4
  401110:	00403775 	.word	0x00403775
  401114:	00406b88 	.word	0x00406b88
  401118:	004067fc 	.word	0x004067fc
  40111c:	00406ba4 	.word	0x00406ba4
  401120:	00406bc0 	.word	0x00406bc0
  401124:	00406dcc 	.word	0x00406dcc
  401128:	004067d0 	.word	0x004067d0
  40112c:	00406bdc 	.word	0x00406bdc
  401130:	00401b45 	.word	0x00401b45

00401134 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401134:	b508      	push	{r3, lr}
	return hif_handle_isr();
  401136:	4b01      	ldr	r3, [pc, #4]	; (40113c <m2m_wifi_handle_events+0x8>)
  401138:	4798      	blx	r3
}
  40113a:	bd08      	pop	{r3, pc}
  40113c:	004008a5 	.word	0x004008a5

00401140 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  401140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401144:	b0a0      	sub	sp, #128	; 0x80
  401146:	4680      	mov	r8, r0
  401148:	460d      	mov	r5, r1
  40114a:	4614      	mov	r4, r2
  40114c:	461e      	mov	r6, r3
  40114e:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  401152:	2a01      	cmp	r2, #1
  401154:	d045      	beq.n	4011e2 <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  401156:	b963      	cbnz	r3, 401172 <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  401158:	f240 2203 	movw	r2, #515	; 0x203
  40115c:	497a      	ldr	r1, [pc, #488]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40115e:	487b      	ldr	r0, [pc, #492]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  401160:	4c7b      	ldr	r4, [pc, #492]	; (401350 <m2m_wifi_connect_sc+0x210>)
  401162:	47a0      	blx	r4
  401164:	487b      	ldr	r0, [pc, #492]	; (401354 <m2m_wifi_connect_sc+0x214>)
  401166:	47a0      	blx	r4
  401168:	487b      	ldr	r0, [pc, #492]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40116a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40116c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401170:	e0e7      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401172:	2a02      	cmp	r2, #2
  401174:	d135      	bne.n	4011e2 <m2m_wifi_connect_sc+0xa2>
  401176:	4618      	mov	r0, r3
  401178:	4b78      	ldr	r3, [pc, #480]	; (40135c <m2m_wifi_connect_sc+0x21c>)
  40117a:	4798      	blx	r3
  40117c:	2840      	cmp	r0, #64	; 0x40
  40117e:	d130      	bne.n	4011e2 <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  401180:	7833      	ldrb	r3, [r6, #0]
  401182:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401186:	b2d2      	uxtb	r2, r2
  401188:	2a36      	cmp	r2, #54	; 0x36
  40118a:	d81b      	bhi.n	4011c4 <m2m_wifi_connect_sc+0x84>
  40118c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401190:	b2d2      	uxtb	r2, r2
  401192:	2a06      	cmp	r2, #6
  401194:	d916      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  401196:	3b47      	subs	r3, #71	; 0x47
  401198:	b2db      	uxtb	r3, r3
  40119a:	2b19      	cmp	r3, #25
  40119c:	d912      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  40119e:	4631      	mov	r1, r6
  4011a0:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  4011a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4011a8:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4011ac:	b2d2      	uxtb	r2, r2
  4011ae:	2a06      	cmp	r2, #6
  4011b0:	d908      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  4011b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4011b6:	b2d2      	uxtb	r2, r2
  4011b8:	2a36      	cmp	r2, #54	; 0x36
  4011ba:	d803      	bhi.n	4011c4 <m2m_wifi_connect_sc+0x84>
  4011bc:	3b47      	subs	r3, #71	; 0x47
  4011be:	b2db      	uxtb	r3, r3
  4011c0:	2b19      	cmp	r3, #25
  4011c2:	d80c      	bhi.n	4011de <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  4011c4:	f240 220f 	movw	r2, #527	; 0x20f
  4011c8:	495f      	ldr	r1, [pc, #380]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4011ca:	4860      	ldr	r0, [pc, #384]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4011cc:	4c60      	ldr	r4, [pc, #384]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4011ce:	47a0      	blx	r4
  4011d0:	4863      	ldr	r0, [pc, #396]	; (401360 <m2m_wifi_connect_sc+0x220>)
  4011d2:	47a0      	blx	r4
  4011d4:	4860      	ldr	r0, [pc, #384]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4011d6:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  4011d8:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  4011dc:	e0b1      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  4011de:	4288      	cmp	r0, r1
  4011e0:	d1e0      	bne.n	4011a4 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  4011e2:	1e6b      	subs	r3, r5, #1
  4011e4:	b2db      	uxtb	r3, r3
  4011e6:	2b1f      	cmp	r3, #31
  4011e8:	d90c      	bls.n	401204 <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  4011ea:	f240 2219 	movw	r2, #537	; 0x219
  4011ee:	4956      	ldr	r1, [pc, #344]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4011f0:	4856      	ldr	r0, [pc, #344]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4011f2:	4c57      	ldr	r4, [pc, #348]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4011f4:	47a0      	blx	r4
  4011f6:	485b      	ldr	r0, [pc, #364]	; (401364 <m2m_wifi_connect_sc+0x224>)
  4011f8:	47a0      	blx	r4
  4011fa:	4857      	ldr	r0, [pc, #348]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4011fc:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4011fe:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401202:	e09e      	b.n	401342 <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401204:	2fff      	cmp	r7, #255	; 0xff
  401206:	d00e      	beq.n	401226 <m2m_wifi_connect_sc+0xe6>
  401208:	2f0d      	cmp	r7, #13
  40120a:	d90c      	bls.n	401226 <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  40120c:	f240 2222 	movw	r2, #546	; 0x222
  401210:	494d      	ldr	r1, [pc, #308]	; (401348 <m2m_wifi_connect_sc+0x208>)
  401212:	484e      	ldr	r0, [pc, #312]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  401214:	4c4e      	ldr	r4, [pc, #312]	; (401350 <m2m_wifi_connect_sc+0x210>)
  401216:	47a0      	blx	r4
  401218:	4853      	ldr	r0, [pc, #332]	; (401368 <m2m_wifi_connect_sc+0x228>)
  40121a:	47a0      	blx	r4
  40121c:	484e      	ldr	r0, [pc, #312]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40121e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401220:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401224:	e08d      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  401226:	462a      	mov	r2, r5
  401228:	4641      	mov	r1, r8
  40122a:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  40122e:	4b4f      	ldr	r3, [pc, #316]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  401230:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  401232:	ab20      	add	r3, sp, #128	; 0x80
  401234:	441d      	add	r5, r3
  401236:	2300      	movs	r3, #0
  401238:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  40123c:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  401240:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  401244:	3300      	adds	r3, #0
  401246:	bf18      	it	ne
  401248:	2301      	movne	r3, #1
  40124a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  40124e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  401252:	2c03      	cmp	r4, #3
  401254:	d138      	bne.n	4012c8 <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  401256:	7833      	ldrb	r3, [r6, #0]
  401258:	3b01      	subs	r3, #1
  40125a:	b2db      	uxtb	r3, r3
  40125c:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  401260:	2b03      	cmp	r3, #3
  401262:	d90e      	bls.n	401282 <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  401264:	f240 2239 	movw	r2, #569	; 0x239
  401268:	4937      	ldr	r1, [pc, #220]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40126a:	4838      	ldr	r0, [pc, #224]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40126c:	4c38      	ldr	r4, [pc, #224]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40126e:	47a0      	blx	r4
  401270:	f89d 1014 	ldrb.w	r1, [sp, #20]
  401274:	483e      	ldr	r0, [pc, #248]	; (401370 <m2m_wifi_connect_sc+0x230>)
  401276:	47a0      	blx	r4
  401278:	4837      	ldr	r0, [pc, #220]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40127a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40127c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401280:	e05f      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  401282:	7872      	ldrb	r2, [r6, #1]
  401284:	1e53      	subs	r3, r2, #1
  401286:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40128a:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40128e:	2b0b      	cmp	r3, #11
  401290:	d00e      	beq.n	4012b0 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  401292:	f44f 7210 	mov.w	r2, #576	; 0x240
  401296:	492c      	ldr	r1, [pc, #176]	; (401348 <m2m_wifi_connect_sc+0x208>)
  401298:	482c      	ldr	r0, [pc, #176]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40129a:	4c2d      	ldr	r4, [pc, #180]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40129c:	47a0      	blx	r4
  40129e:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4012a2:	4834      	ldr	r0, [pc, #208]	; (401374 <m2m_wifi_connect_sc+0x234>)
  4012a4:	47a0      	blx	r4
  4012a6:	482c      	ldr	r0, [pc, #176]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4012a8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012aa:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012ae:	e048      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4012b0:	1cb1      	adds	r1, r6, #2
  4012b2:	f10d 0016 	add.w	r0, sp, #22
  4012b6:	4b2d      	ldr	r3, [pc, #180]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  4012b8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  4012ba:	7873      	ldrb	r3, [r6, #1]
  4012bc:	aa20      	add	r2, sp, #128	; 0x80
  4012be:	4413      	add	r3, r2
  4012c0:	2200      	movs	r2, #0
  4012c2:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4012c6:	e032      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4012c8:	2c02      	cmp	r4, #2
  4012ca:	d119      	bne.n	401300 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4012cc:	4630      	mov	r0, r6
  4012ce:	4b23      	ldr	r3, [pc, #140]	; (40135c <m2m_wifi_connect_sc+0x21c>)
  4012d0:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  4012d2:	1e43      	subs	r3, r0, #1
  4012d4:	b29b      	uxth	r3, r3
  4012d6:	2b3f      	cmp	r3, #63	; 0x3f
  4012d8:	d90c      	bls.n	4012f4 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  4012da:	f240 224f 	movw	r2, #591	; 0x24f
  4012de:	491a      	ldr	r1, [pc, #104]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4012e0:	481a      	ldr	r0, [pc, #104]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4012e2:	4c1b      	ldr	r4, [pc, #108]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4012e4:	47a0      	blx	r4
  4012e6:	4824      	ldr	r0, [pc, #144]	; (401378 <m2m_wifi_connect_sc+0x238>)
  4012e8:	47a0      	blx	r4
  4012ea:	481b      	ldr	r0, [pc, #108]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4012ec:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012ee:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012f2:	e026      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4012f4:	1c42      	adds	r2, r0, #1
  4012f6:	4631      	mov	r1, r6
  4012f8:	a805      	add	r0, sp, #20
  4012fa:	4b1c      	ldr	r3, [pc, #112]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  4012fc:	4798      	blx	r3
  4012fe:	e016      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  401300:	2c04      	cmp	r4, #4
  401302:	d105      	bne.n	401310 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  401304:	223e      	movs	r2, #62	; 0x3e
  401306:	4631      	mov	r1, r6
  401308:	a805      	add	r0, sp, #20
  40130a:	4b18      	ldr	r3, [pc, #96]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  40130c:	4798      	blx	r3
  40130e:	e00e      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  401310:	2c01      	cmp	r4, #1
  401312:	d00c      	beq.n	40132e <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  401314:	f240 225f 	movw	r2, #607	; 0x25f
  401318:	490b      	ldr	r1, [pc, #44]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40131a:	480c      	ldr	r0, [pc, #48]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40131c:	4c0c      	ldr	r4, [pc, #48]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40131e:	47a0      	blx	r4
  401320:	4816      	ldr	r0, [pc, #88]	; (40137c <m2m_wifi_connect_sc+0x23c>)
  401322:	47a0      	blx	r4
  401324:	480c      	ldr	r0, [pc, #48]	; (401358 <m2m_wifi_connect_sc+0x218>)
  401326:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401328:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40132c:	e009      	b.n	401342 <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  40132e:	2300      	movs	r3, #0
  401330:	9302      	str	r3, [sp, #8]
  401332:	9301      	str	r3, [sp, #4]
  401334:	9300      	str	r3, [sp, #0]
  401336:	236c      	movs	r3, #108	; 0x6c
  401338:	aa05      	add	r2, sp, #20
  40133a:	2128      	movs	r1, #40	; 0x28
  40133c:	2001      	movs	r0, #1
  40133e:	4c10      	ldr	r4, [pc, #64]	; (401380 <m2m_wifi_connect_sc+0x240>)
  401340:	47a0      	blx	r4

ERR1:
	return ret;
}
  401342:	b020      	add	sp, #128	; 0x80
  401344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401348:	00406a84 	.word	0x00406a84
  40134c:	004067d0 	.word	0x004067d0
  401350:	00403775 	.word	0x00403775
  401354:	00406bf8 	.word	0x00406bf8
  401358:	004067fc 	.word	0x004067fc
  40135c:	00400579 	.word	0x00400579
  401360:	00406c0c 	.word	0x00406c0c
  401364:	00406c1c 	.word	0x00406c1c
  401368:	00406c30 	.word	0x00406c30
  40136c:	00400555 	.word	0x00400555
  401370:	00406c3c 	.word	0x00406c3c
  401374:	00406c58 	.word	0x00406c58
  401378:	00406c74 	.word	0x00406c74
  40137c:	00406c90 	.word	0x00406c90
  401380:	004006cd 	.word	0x004006cd

00401384 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  401384:	b510      	push	{r4, lr}
  401386:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  401388:	2400      	movs	r4, #0
  40138a:	9401      	str	r4, [sp, #4]
  40138c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  401390:	9400      	str	r4, [sp, #0]
  401392:	4c02      	ldr	r4, [pc, #8]	; (40139c <m2m_wifi_connect+0x18>)
  401394:	47a0      	blx	r4
}
  401396:	b002      	add	sp, #8
  401398:	bd10      	pop	{r4, pc}
  40139a:	bf00      	nop
  40139c:	00401141 	.word	0x00401141

004013a0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4013a0:	2000      	movs	r0, #0
  4013a2:	4770      	bx	lr

004013a4 <m2m_wifi_request_scan>:
}
sint8 m2m_wifi_request_scan(uint8 ch)
{
	sint8	s8Ret = M2M_SUCCESS;

	if(!gu8scanInProgress)
  4013a4:	4b13      	ldr	r3, [pc, #76]	; (4013f4 <m2m_wifi_request_scan+0x50>)
  4013a6:	781b      	ldrb	r3, [r3, #0]
  4013a8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4013ac:	d118      	bne.n	4013e0 <m2m_wifi_request_scan+0x3c>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
  4013ae:	f1a0 030e 	sub.w	r3, r0, #14
  4013b2:	b2db      	uxtb	r3, r3
  4013b4:	2bf0      	cmp	r3, #240	; 0xf0
  4013b6:	d916      	bls.n	4013e6 <m2m_wifi_request_scan+0x42>
	strScanRegion.u16ScanRegion = ScanRegion;
	s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_REGION, (uint8*)&strScanRegion, sizeof(tstrM2MScanRegion),NULL, 0,0);
	return s8Ret;
}
sint8 m2m_wifi_request_scan(uint8 ch)
{
  4013b8:	b510      	push	{r4, lr}
  4013ba:	b086      	sub	sp, #24
	if(!gu8scanInProgress)
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
  4013bc:	aa06      	add	r2, sp, #24
  4013be:	f802 0d04 	strb.w	r0, [r2, #-4]!
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
  4013c2:	2300      	movs	r3, #0
  4013c4:	9302      	str	r3, [sp, #8]
  4013c6:	9301      	str	r3, [sp, #4]
  4013c8:	9300      	str	r3, [sp, #0]
  4013ca:	2304      	movs	r3, #4
  4013cc:	2110      	movs	r1, #16
  4013ce:	2001      	movs	r0, #1
  4013d0:	4c09      	ldr	r4, [pc, #36]	; (4013f8 <m2m_wifi_request_scan+0x54>)
  4013d2:	47a0      	blx	r4
			if(s8Ret == M2M_SUCCESS)
  4013d4:	4603      	mov	r3, r0
  4013d6:	b950      	cbnz	r0, 4013ee <m2m_wifi_request_scan+0x4a>
			{
				gu8scanInProgress = 1;
  4013d8:	2101      	movs	r1, #1
  4013da:	4a06      	ldr	r2, [pc, #24]	; (4013f4 <m2m_wifi_request_scan+0x50>)
  4013dc:	7011      	strb	r1, [r2, #0]
  4013de:	e006      	b.n	4013ee <m2m_wifi_request_scan+0x4a>
			s8Ret = M2M_ERR_INVALID_ARG;
		}
	}
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
  4013e0:	f06f 030d 	mvn.w	r3, #13
  4013e4:	e001      	b.n	4013ea <m2m_wifi_request_scan+0x46>
				gu8scanInProgress = 1;
			}
		}
		else
		{
			s8Ret = M2M_ERR_INVALID_ARG;
  4013e6:	f06f 030e 	mvn.w	r3, #14
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
	}
	return s8Ret;
}
  4013ea:	4618      	mov	r0, r3
  4013ec:	4770      	bx	lr
  4013ee:	4618      	mov	r0, r3
  4013f0:	b006      	add	sp, #24
  4013f2:	bd10      	pop	{r4, pc}
  4013f4:	204008d0 	.word	0x204008d0
  4013f8:	004006cd 	.word	0x004006cd

004013fc <m2m_wifi_req_scan_result>:
			 which mean if large delay occur between the scan request and the scan result request, 
			 the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
  4013fc:	b510      	push	{r4, lr}
  4013fe:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;
	tstrM2mReqScanResult strReqScanRlt;
	strReqScanRlt.u8Index = index;
  401400:	aa06      	add	r2, sp, #24
  401402:	f802 0d04 	strb.w	r0, [r2, #-4]!
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
  401406:	2300      	movs	r3, #0
  401408:	9302      	str	r3, [sp, #8]
  40140a:	9301      	str	r3, [sp, #4]
  40140c:	9300      	str	r3, [sp, #0]
  40140e:	2304      	movs	r3, #4
  401410:	2112      	movs	r1, #18
  401412:	2001      	movs	r0, #1
  401414:	4c01      	ldr	r4, [pc, #4]	; (40141c <m2m_wifi_req_scan_result+0x20>)
  401416:	47a0      	blx	r4
	return ret;
}
  401418:	b006      	add	sp, #24
  40141a:	bd10      	pop	{r4, pc}
  40141c:	004006cd 	.word	0x004006cd

00401420 <m2m_wifi_get_num_ap_found>:
			 calling that function in any other place will return undefined/undated numbers.
			 Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
	return gu8ChNum;
  401420:	4b01      	ldr	r3, [pc, #4]	; (401428 <m2m_wifi_get_num_ap_found+0x8>)
  401422:	7818      	ldrb	r0, [r3, #0]
}
  401424:	4770      	bx	lr
  401426:	bf00      	nop
  401428:	204008d1 	.word	0x204008d1

0040142c <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  40142c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40142e:	b083      	sub	sp, #12
  401430:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  401432:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  401436:	4e0a      	ldr	r6, [pc, #40]	; (401460 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401438:	4f0a      	ldr	r7, [pc, #40]	; (401464 <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40143a:	4621      	mov	r1, r4
  40143c:	4628      	mov	r0, r5
  40143e:	47b0      	blx	r6
		if(val32 != 0) {		
  401440:	b154      	cbz	r4, 401458 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  401442:	a902      	add	r1, sp, #8
  401444:	2300      	movs	r3, #0
  401446:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  40144a:	4628      	mov	r0, r5
  40144c:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  40144e:	2800      	cmp	r0, #0
  401450:	d1f3      	bne.n	40143a <chip_apply_conf+0xe>
				if(reg == val32)
  401452:	9b01      	ldr	r3, [sp, #4]
  401454:	429c      	cmp	r4, r3
  401456:	d1f0      	bne.n	40143a <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  401458:	2000      	movs	r0, #0
  40145a:	b003      	add	sp, #12
  40145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40145e:	bf00      	nop
  401460:	00401905 	.word	0x00401905
  401464:	004018f9 	.word	0x004018f9

00401468 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  401468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40146c:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40146e:	2001      	movs	r0, #1
  401470:	4b3d      	ldr	r3, [pc, #244]	; (401568 <nm_clkless_wake+0x100>)
  401472:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  401474:	a901      	add	r1, sp, #4
  401476:	2001      	movs	r0, #1
  401478:	4b3c      	ldr	r3, [pc, #240]	; (40156c <nm_clkless_wake+0x104>)
  40147a:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  40147c:	4682      	mov	sl, r0
  40147e:	b148      	cbz	r0, 401494 <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  401480:	2272      	movs	r2, #114	; 0x72
  401482:	493b      	ldr	r1, [pc, #236]	; (401570 <nm_clkless_wake+0x108>)
  401484:	483b      	ldr	r0, [pc, #236]	; (401574 <nm_clkless_wake+0x10c>)
  401486:	4c3c      	ldr	r4, [pc, #240]	; (401578 <nm_clkless_wake+0x110>)
  401488:	47a0      	blx	r4
  40148a:	483c      	ldr	r0, [pc, #240]	; (40157c <nm_clkless_wake+0x114>)
  40148c:	47a0      	blx	r4
  40148e:	483c      	ldr	r0, [pc, #240]	; (401580 <nm_clkless_wake+0x118>)
  401490:	47a0      	blx	r4
		goto _WAKE_EXIT;
  401492:	e064      	b.n	40155e <nm_clkless_wake+0xf6>
  401494:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  401496:	f04f 0801 	mov.w	r8, #1
  40149a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 401594 <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  40149e:	4d32      	ldr	r5, [pc, #200]	; (401568 <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4014a0:	4f38      	ldr	r7, [pc, #224]	; (401584 <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4014a2:	9901      	ldr	r1, [sp, #4]
  4014a4:	f041 0102 	orr.w	r1, r1, #2
  4014a8:	4640      	mov	r0, r8
  4014aa:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4014ac:	4640      	mov	r0, r8
  4014ae:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014b0:	4669      	mov	r1, sp
  4014b2:	4b35      	ldr	r3, [pc, #212]	; (401588 <nm_clkless_wake+0x120>)
  4014b4:	6818      	ldr	r0, [r3, #0]
  4014b6:	4b2d      	ldr	r3, [pc, #180]	; (40156c <nm_clkless_wake+0x104>)
  4014b8:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4014ba:	b918      	cbnz	r0, 4014c4 <nm_clkless_wake+0x5c>
  4014bc:	9b00      	ldr	r3, [sp, #0]
  4014be:	b10b      	cbz	r3, 4014c4 <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014c0:	4e31      	ldr	r6, [pc, #196]	; (401588 <nm_clkless_wake+0x120>)
  4014c2:	e037      	b.n	401534 <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  4014c4:	4e30      	ldr	r6, [pc, #192]	; (401588 <nm_clkless_wake+0x120>)
  4014c6:	230e      	movs	r3, #14
  4014c8:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  4014ca:	4640      	mov	r0, r8
  4014cc:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014ce:	4669      	mov	r1, sp
  4014d0:	6830      	ldr	r0, [r6, #0]
  4014d2:	4b26      	ldr	r3, [pc, #152]	; (40156c <nm_clkless_wake+0x104>)
  4014d4:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4014d6:	b910      	cbnz	r0, 4014de <nm_clkless_wake+0x76>
  4014d8:	9b00      	ldr	r3, [sp, #0]
  4014da:	2b00      	cmp	r3, #0
  4014dc:	d1f0      	bne.n	4014c0 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  4014de:	4e2a      	ldr	r6, [pc, #168]	; (401588 <nm_clkless_wake+0x120>)
  4014e0:	2313      	movs	r3, #19
  4014e2:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  4014e4:	4640      	mov	r0, r8
  4014e6:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014e8:	4669      	mov	r1, sp
  4014ea:	6830      	ldr	r0, [r6, #0]
  4014ec:	4b1f      	ldr	r3, [pc, #124]	; (40156c <nm_clkless_wake+0x104>)
  4014ee:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  4014f0:	4606      	mov	r6, r0
  4014f2:	2800      	cmp	r0, #0
  4014f4:	d0e4      	beq.n	4014c0 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4014f6:	2296      	movs	r2, #150	; 0x96
  4014f8:	491d      	ldr	r1, [pc, #116]	; (401570 <nm_clkless_wake+0x108>)
  4014fa:	481e      	ldr	r0, [pc, #120]	; (401574 <nm_clkless_wake+0x10c>)
  4014fc:	4c1e      	ldr	r4, [pc, #120]	; (401578 <nm_clkless_wake+0x110>)
  4014fe:	47a0      	blx	r4
  401500:	4822      	ldr	r0, [pc, #136]	; (40158c <nm_clkless_wake+0x124>)
  401502:	47a0      	blx	r4
  401504:	481e      	ldr	r0, [pc, #120]	; (401580 <nm_clkless_wake+0x118>)
  401506:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401508:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  40150a:	e028      	b.n	40155e <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  40150c:	2002      	movs	r0, #2
  40150e:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401510:	4669      	mov	r1, sp
  401512:	6830      	ldr	r0, [r6, #0]
  401514:	4b15      	ldr	r3, [pc, #84]	; (40156c <nm_clkless_wake+0x104>)
  401516:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  401518:	9b00      	ldr	r3, [sp, #0]
  40151a:	f013 0f04 	tst.w	r3, #4
  40151e:	d109      	bne.n	401534 <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  401520:	22aa      	movs	r2, #170	; 0xaa
  401522:	4913      	ldr	r1, [pc, #76]	; (401570 <nm_clkless_wake+0x108>)
  401524:	4813      	ldr	r0, [pc, #76]	; (401574 <nm_clkless_wake+0x10c>)
  401526:	f8df b050 	ldr.w	fp, [pc, #80]	; 401578 <nm_clkless_wake+0x110>
  40152a:	47d8      	blx	fp
  40152c:	4818      	ldr	r0, [pc, #96]	; (401590 <nm_clkless_wake+0x128>)
  40152e:	47d8      	blx	fp
  401530:	4813      	ldr	r0, [pc, #76]	; (401580 <nm_clkless_wake+0x118>)
  401532:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  401534:	9b00      	ldr	r3, [sp, #0]
  401536:	f013 0f04 	tst.w	r3, #4
  40153a:	d110      	bne.n	40155e <nm_clkless_wake+0xf6>
  40153c:	3401      	adds	r4, #1
  40153e:	fba7 2304 	umull	r2, r3, r7, r4
  401542:	085b      	lsrs	r3, r3, #1
  401544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401548:	429c      	cmp	r4, r3
  40154a:	d0df      	beq.n	40150c <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  40154c:	9901      	ldr	r1, [sp, #4]
  40154e:	f041 0102 	orr.w	r1, r1, #2
  401552:	4640      	mov	r0, r8
  401554:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  401556:	9b00      	ldr	r3, [sp, #0]
  401558:	f013 0f04 	tst.w	r3, #4
  40155c:	d0a1      	beq.n	4014a2 <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  40155e:	4650      	mov	r0, sl
  401560:	b003      	add	sp, #12
  401562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401566:	bf00      	nop
  401568:	004001b9 	.word	0x004001b9
  40156c:	004018f9 	.word	0x004018f9
  401570:	00406de8 	.word	0x00406de8
  401574:	004067d0 	.word	0x004067d0
  401578:	00403775 	.word	0x00403775
  40157c:	00406df8 	.word	0x00406df8
  401580:	004067fc 	.word	0x004067fc
  401584:	aaaaaaab 	.word	0xaaaaaaab
  401588:	20400010 	.word	0x20400010
  40158c:	00406e18 	.word	0x00406e18
  401590:	00406e38 	.word	0x00406e38
  401594:	00401905 	.word	0x00401905

00401598 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  401598:	b500      	push	{lr}
  40159a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  40159c:	a901      	add	r1, sp, #4
  40159e:	f241 4008 	movw	r0, #5128	; 0x1408
  4015a2:	4b15      	ldr	r3, [pc, #84]	; (4015f8 <enable_interrupts+0x60>)
  4015a4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4015a6:	b9e0      	cbnz	r0, 4015e2 <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4015a8:	9901      	ldr	r1, [sp, #4]
  4015aa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4015ae:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4015b0:	f241 4008 	movw	r0, #5128	; 0x1408
  4015b4:	4b11      	ldr	r3, [pc, #68]	; (4015fc <enable_interrupts+0x64>)
  4015b6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4015b8:	b9b0      	cbnz	r0, 4015e8 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  4015ba:	a901      	add	r1, sp, #4
  4015bc:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4015c0:	4b0d      	ldr	r3, [pc, #52]	; (4015f8 <enable_interrupts+0x60>)
  4015c2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4015c4:	b998      	cbnz	r0, 4015ee <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  4015c6:	9901      	ldr	r1, [sp, #4]
  4015c8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4015cc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  4015ce:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4015d2:	4b0a      	ldr	r3, [pc, #40]	; (4015fc <enable_interrupts+0x64>)
  4015d4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4015d6:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  4015d8:	bf14      	ite	ne
  4015da:	f06f 0005 	mvnne.w	r0, #5
  4015de:	2000      	moveq	r0, #0
  4015e0:	e007      	b.n	4015f2 <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4015e2:	f06f 0005 	mvn.w	r0, #5
  4015e6:	e004      	b.n	4015f2 <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4015e8:	f06f 0005 	mvn.w	r0, #5
  4015ec:	e001      	b.n	4015f2 <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4015ee:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  4015f2:	b003      	add	sp, #12
  4015f4:	f85d fb04 	ldr.w	pc, [sp], #4
  4015f8:	004018f9 	.word	0x004018f9
  4015fc:	00401905 	.word	0x00401905

00401600 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  401600:	b510      	push	{r4, lr}
  401602:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  401604:	4b24      	ldr	r3, [pc, #144]	; (401698 <nmi_get_chipid+0x98>)
  401606:	681c      	ldr	r4, [r3, #0]
  401608:	2c00      	cmp	r4, #0
  40160a:	d140      	bne.n	40168e <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  40160c:	4619      	mov	r1, r3
  40160e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  401612:	4b22      	ldr	r3, [pc, #136]	; (40169c <nmi_get_chipid+0x9c>)
  401614:	4798      	blx	r3
  401616:	b118      	cbz	r0, 401620 <nmi_get_chipid+0x20>
			chipid = 0;
  401618:	2200      	movs	r2, #0
  40161a:	4b1f      	ldr	r3, [pc, #124]	; (401698 <nmi_get_chipid+0x98>)
  40161c:	601a      	str	r2, [r3, #0]
			return 0;
  40161e:	e038      	b.n	401692 <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  401620:	a901      	add	r1, sp, #4
  401622:	f241 30f4 	movw	r0, #5108	; 0x13f4
  401626:	4b1d      	ldr	r3, [pc, #116]	; (40169c <nmi_get_chipid+0x9c>)
  401628:	4798      	blx	r3
  40162a:	b118      	cbz	r0, 401634 <nmi_get_chipid+0x34>
			chipid = 0;
  40162c:	2200      	movs	r2, #0
  40162e:	4b1a      	ldr	r3, [pc, #104]	; (401698 <nmi_get_chipid+0x98>)
  401630:	601a      	str	r2, [r3, #0]
			return 0;
  401632:	e02e      	b.n	401692 <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  401634:	4b18      	ldr	r3, [pc, #96]	; (401698 <nmi_get_chipid+0x98>)
  401636:	681b      	ldr	r3, [r3, #0]
  401638:	4a19      	ldr	r2, [pc, #100]	; (4016a0 <nmi_get_chipid+0xa0>)
  40163a:	4293      	cmp	r3, r2
  40163c:	d106      	bne.n	40164c <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  40163e:	9b01      	ldr	r3, [sp, #4]
  401640:	2b01      	cmp	r3, #1
  401642:	d01d      	beq.n	401680 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  401644:	3201      	adds	r2, #1
  401646:	4b14      	ldr	r3, [pc, #80]	; (401698 <nmi_get_chipid+0x98>)
  401648:	601a      	str	r2, [r3, #0]
  40164a:	e019      	b.n	401680 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  40164c:	4a15      	ldr	r2, [pc, #84]	; (4016a4 <nmi_get_chipid+0xa4>)
  40164e:	4293      	cmp	r3, r2
  401650:	d109      	bne.n	401666 <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  401652:	9b01      	ldr	r3, [sp, #4]
  401654:	2b03      	cmp	r3, #3
  401656:	d013      	beq.n	401680 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  401658:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  40165a:	bf0c      	ite	eq
  40165c:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  40165e:	4a12      	ldrne	r2, [pc, #72]	; (4016a8 <nmi_get_chipid+0xa8>)
  401660:	4b0d      	ldr	r3, [pc, #52]	; (401698 <nmi_get_chipid+0x98>)
  401662:	601a      	str	r2, [r3, #0]
  401664:	e00c      	b.n	401680 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  401666:	4a11      	ldr	r2, [pc, #68]	; (4016ac <nmi_get_chipid+0xac>)
  401668:	4293      	cmp	r3, r2
  40166a:	d109      	bne.n	401680 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  40166c:	490a      	ldr	r1, [pc, #40]	; (401698 <nmi_get_chipid+0x98>)
  40166e:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  401672:	4b0a      	ldr	r3, [pc, #40]	; (40169c <nmi_get_chipid+0x9c>)
  401674:	4798      	blx	r3
  401676:	b118      	cbz	r0, 401680 <nmi_get_chipid+0x80>
			chipid = 0;
  401678:	2200      	movs	r2, #0
  40167a:	4b07      	ldr	r3, [pc, #28]	; (401698 <nmi_get_chipid+0x98>)
  40167c:	601a      	str	r2, [r3, #0]
			return 0;
  40167e:	e008      	b.n	401692 <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  401680:	4a05      	ldr	r2, [pc, #20]	; (401698 <nmi_get_chipid+0x98>)
  401682:	6813      	ldr	r3, [r2, #0]
  401684:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401688:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  40168c:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  40168e:	4b02      	ldr	r3, [pc, #8]	; (401698 <nmi_get_chipid+0x98>)
  401690:	681c      	ldr	r4, [r3, #0]
}
  401692:	4620      	mov	r0, r4
  401694:	b002      	add	sp, #8
  401696:	bd10      	pop	{r4, pc}
  401698:	204008d4 	.word	0x204008d4
  40169c:	004018f9 	.word	0x004018f9
  4016a0:	001002a0 	.word	0x001002a0
  4016a4:	001002b0 	.word	0x001002b0
  4016a8:	001002b2 	.word	0x001002b2
  4016ac:	001000f0 	.word	0x001000f0

004016b0 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  4016b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016b4:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4016b6:	f241 0514 	movw	r5, #4116	; 0x1014
  4016ba:	4c28      	ldr	r4, [pc, #160]	; (40175c <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4016bc:	4e28      	ldr	r6, [pc, #160]	; (401760 <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4016be:	4628      	mov	r0, r5
  4016c0:	47a0      	blx	r4
		if (reg & 0x80000000) {
  4016c2:	2800      	cmp	r0, #0
  4016c4:	db02      	blt.n	4016cc <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4016c6:	2001      	movs	r0, #1
  4016c8:	47b0      	blx	r6
	}
  4016ca:	e7f8      	b.n	4016be <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  4016cc:	4825      	ldr	r0, [pc, #148]	; (401764 <wait_for_bootrom+0xb4>)
  4016ce:	4b23      	ldr	r3, [pc, #140]	; (40175c <wait_for_bootrom+0xac>)
  4016d0:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  4016d2:	f010 0f01 	tst.w	r0, #1
  4016d6:	d110      	bne.n	4016fa <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4016d8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 401760 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  4016dc:	4e1f      	ldr	r6, [pc, #124]	; (40175c <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4016de:	4d22      	ldr	r5, [pc, #136]	; (401768 <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4016e0:	2001      	movs	r0, #1
  4016e2:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  4016e4:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4016e8:	47b0      	blx	r6
  4016ea:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4016ec:	462a      	mov	r2, r5
  4016ee:	4601      	mov	r1, r0
  4016f0:	481e      	ldr	r0, [pc, #120]	; (40176c <wait_for_bootrom+0xbc>)
  4016f2:	4b1f      	ldr	r3, [pc, #124]	; (401770 <wait_for_bootrom+0xc0>)
  4016f4:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  4016f6:	42ac      	cmp	r4, r5
  4016f8:	d1f2      	bne.n	4016e0 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4016fa:	2f02      	cmp	r7, #2
  4016fc:	d10a      	bne.n	401714 <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4016fe:	491d      	ldr	r1, [pc, #116]	; (401774 <wait_for_bootrom+0xc4>)
  401700:	481d      	ldr	r0, [pc, #116]	; (401778 <wait_for_bootrom+0xc8>)
  401702:	4c1e      	ldr	r4, [pc, #120]	; (40177c <wait_for_bootrom+0xcc>)
  401704:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  401706:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40170a:	f241 008c 	movw	r0, #4236	; 0x108c
  40170e:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401710:	2400      	movs	r4, #0
  401712:	e00f      	b.n	401734 <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  401714:	2f03      	cmp	r7, #3
  401716:	d109      	bne.n	40172c <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401718:	4916      	ldr	r1, [pc, #88]	; (401774 <wait_for_bootrom+0xc4>)
  40171a:	4817      	ldr	r0, [pc, #92]	; (401778 <wait_for_bootrom+0xc8>)
  40171c:	4c17      	ldr	r4, [pc, #92]	; (40177c <wait_for_bootrom+0xcc>)
  40171e:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  401720:	2100      	movs	r1, #0
  401722:	f241 008c 	movw	r0, #4236	; 0x108c
  401726:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401728:	2400      	movs	r4, #0
  40172a:	e003      	b.n	401734 <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  40172c:	2f04      	cmp	r7, #4
  40172e:	bf14      	ite	ne
  401730:	2400      	movne	r4, #0
  401732:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  401734:	4b12      	ldr	r3, [pc, #72]	; (401780 <wait_for_bootrom+0xd0>)
  401736:	4798      	blx	r3
  401738:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40173c:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  401740:	bf0c      	ite	eq
  401742:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  401746:	4620      	movne	r0, r4
  401748:	4b0e      	ldr	r3, [pc, #56]	; (401784 <wait_for_bootrom+0xd4>)
  40174a:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  40174c:	490e      	ldr	r1, [pc, #56]	; (401788 <wait_for_bootrom+0xd8>)
  40174e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401752:	4b0a      	ldr	r3, [pc, #40]	; (40177c <wait_for_bootrom+0xcc>)
  401754:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  401756:	2000      	movs	r0, #0
  401758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40175c:	004018ed 	.word	0x004018ed
  401760:	004001b9 	.word	0x004001b9
  401764:	000207bc 	.word	0x000207bc
  401768:	10add09e 	.word	0x10add09e
  40176c:	00406e84 	.word	0x00406e84
  401770:	00403775 	.word	0x00403775
  401774:	3c1cd57d 	.word	0x3c1cd57d
  401778:	000207ac 	.word	0x000207ac
  40177c:	00401905 	.word	0x00401905
  401780:	00401601 	.word	0x00401601
  401784:	0040142d 	.word	0x0040142d
  401788:	ef522f61 	.word	0xef522f61

0040178c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  40178c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40178e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  401790:	f241 038c 	movw	r3, #4236	; 0x108c
  401794:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  401796:	4b18      	ldr	r3, [pc, #96]	; (4017f8 <wait_for_firmware_start+0x6c>)
  401798:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  40179a:	3802      	subs	r0, #2
  40179c:	b2c0      	uxtb	r0, r0
  40179e:	2801      	cmp	r0, #1
  4017a0:	d810      	bhi.n	4017c4 <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  4017a2:	4b16      	ldr	r3, [pc, #88]	; (4017fc <wait_for_firmware_start+0x70>)
  4017a4:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4017a6:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  4017aa:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  4017ae:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  4017b2:	9300      	str	r3, [sp, #0]
  4017b4:	e006      	b.n	4017c4 <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4017b6:	4638      	mov	r0, r7
  4017b8:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4017ba:	9801      	ldr	r0, [sp, #4]
  4017bc:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  4017be:	3c01      	subs	r4, #1
  4017c0:	d106      	bne.n	4017d0 <wait_for_firmware_start+0x44>
  4017c2:	e013      	b.n	4017ec <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  4017c4:	f04f 34ff 	mov.w	r4, #4294967295
  4017c8:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4017ca:	2702      	movs	r7, #2
  4017cc:	4e0c      	ldr	r6, [pc, #48]	; (401800 <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4017ce:	4d0d      	ldr	r5, [pc, #52]	; (401804 <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  4017d0:	9b00      	ldr	r3, [sp, #0]
  4017d2:	4298      	cmp	r0, r3
  4017d4:	d1ef      	bne.n	4017b6 <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  4017d6:	9a00      	ldr	r2, [sp, #0]
  4017d8:	4b07      	ldr	r3, [pc, #28]	; (4017f8 <wait_for_firmware_start+0x6c>)
  4017da:	429a      	cmp	r2, r3
  4017dc:	d109      	bne.n	4017f2 <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  4017de:	2100      	movs	r1, #0
  4017e0:	f241 008c 	movw	r0, #4236	; 0x108c
  4017e4:	4b08      	ldr	r3, [pc, #32]	; (401808 <wait_for_firmware_start+0x7c>)
  4017e6:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  4017e8:	2000      	movs	r0, #0
  4017ea:	e003      	b.n	4017f4 <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  4017ec:	f06f 0004 	mvn.w	r0, #4
  4017f0:	e000      	b.n	4017f4 <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  4017f2:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  4017f4:	b003      	add	sp, #12
  4017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4017f8:	02532636 	.word	0x02532636
  4017fc:	000207ac 	.word	0x000207ac
  401800:	004001b9 	.word	0x004001b9
  401804:	004018ed 	.word	0x004018ed
  401808:	00401905 	.word	0x00401905

0040180c <chip_deinit>:

sint8 chip_deinit(void)
{
  40180c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40180e:	b083      	sub	sp, #12
	uint32 reg = 0;
  401810:	a902      	add	r1, sp, #8
  401812:	2300      	movs	r3, #0
  401814:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401818:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40181c:	4b24      	ldr	r3, [pc, #144]	; (4018b0 <chip_deinit+0xa4>)
  40181e:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  401820:	b148      	cbz	r0, 401836 <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  401822:	f240 2231 	movw	r2, #561	; 0x231
  401826:	4923      	ldr	r1, [pc, #140]	; (4018b4 <chip_deinit+0xa8>)
  401828:	4823      	ldr	r0, [pc, #140]	; (4018b8 <chip_deinit+0xac>)
  40182a:	4c24      	ldr	r4, [pc, #144]	; (4018bc <chip_deinit+0xb0>)
  40182c:	47a0      	blx	r4
  40182e:	4824      	ldr	r0, [pc, #144]	; (4018c0 <chip_deinit+0xb4>)
  401830:	47a0      	blx	r4
  401832:	4824      	ldr	r0, [pc, #144]	; (4018c4 <chip_deinit+0xb8>)
  401834:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  401836:	9901      	ldr	r1, [sp, #4]
  401838:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40183c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40183e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401842:	4b21      	ldr	r3, [pc, #132]	; (4018c8 <chip_deinit+0xbc>)
  401844:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  401846:	4605      	mov	r5, r0
  401848:	b158      	cbz	r0, 401862 <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  40184a:	f240 2237 	movw	r2, #567	; 0x237
  40184e:	4919      	ldr	r1, [pc, #100]	; (4018b4 <chip_deinit+0xa8>)
  401850:	4819      	ldr	r0, [pc, #100]	; (4018b8 <chip_deinit+0xac>)
  401852:	4c1a      	ldr	r4, [pc, #104]	; (4018bc <chip_deinit+0xb0>)
  401854:	47a0      	blx	r4
  401856:	481d      	ldr	r0, [pc, #116]	; (4018cc <chip_deinit+0xc0>)
  401858:	47a0      	blx	r4
  40185a:	481a      	ldr	r0, [pc, #104]	; (4018c4 <chip_deinit+0xb8>)
  40185c:	47a0      	blx	r4
		return ret;
  40185e:	4628      	mov	r0, r5
  401860:	e024      	b.n	4018ac <chip_deinit+0xa0>
  401862:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401864:	4e12      	ldr	r6, [pc, #72]	; (4018b0 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401866:	4f18      	ldr	r7, [pc, #96]	; (4018c8 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401868:	a901      	add	r1, sp, #4
  40186a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40186e:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  401870:	4605      	mov	r5, r0
  401872:	b158      	cbz	r0, 40188c <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  401874:	f240 223e 	movw	r2, #574	; 0x23e
  401878:	490e      	ldr	r1, [pc, #56]	; (4018b4 <chip_deinit+0xa8>)
  40187a:	480f      	ldr	r0, [pc, #60]	; (4018b8 <chip_deinit+0xac>)
  40187c:	4c0f      	ldr	r4, [pc, #60]	; (4018bc <chip_deinit+0xb0>)
  40187e:	47a0      	blx	r4
  401880:	4813      	ldr	r0, [pc, #76]	; (4018d0 <chip_deinit+0xc4>)
  401882:	47a0      	blx	r4
  401884:	480f      	ldr	r0, [pc, #60]	; (4018c4 <chip_deinit+0xb8>)
  401886:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401888:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  40188a:	e00f      	b.n	4018ac <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  40188c:	9901      	ldr	r1, [sp, #4]
  40188e:	f411 6f80 	tst.w	r1, #1024	; 0x400
  401892:	d00a      	beq.n	4018aa <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  401894:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401898:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40189a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40189e:	47b8      	blx	r7
  4018a0:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4018a2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4018a6:	d1df      	bne.n	401868 <chip_deinit+0x5c>
  4018a8:	e000      	b.n	4018ac <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4018aa:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  4018ac:	b003      	add	sp, #12
  4018ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018b0:	004018f9 	.word	0x004018f9
  4018b4:	00406ddc 	.word	0x00406ddc
  4018b8:	004067d0 	.word	0x004067d0
  4018bc:	00403775 	.word	0x00403775
  4018c0:	00406e94 	.word	0x00406e94
  4018c4:	004067fc 	.word	0x004067fc
  4018c8:	00401905 	.word	0x00401905
  4018cc:	00406eb0 	.word	0x00406eb0
  4018d0:	00406ecc 	.word	0x00406ecc

004018d4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  4018d4:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  4018d6:	4b01      	ldr	r3, [pc, #4]	; (4018dc <nm_bus_iface_init+0x8>)
  4018d8:	4798      	blx	r3

	return ret;
}
  4018da:	bd08      	pop	{r3, pc}
  4018dc:	00400329 	.word	0x00400329

004018e0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  4018e0:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  4018e2:	4b01      	ldr	r3, [pc, #4]	; (4018e8 <nm_bus_iface_deinit+0x8>)
  4018e4:	4798      	blx	r3

	return ret;
}
  4018e6:	bd08      	pop	{r3, pc}
  4018e8:	00400515 	.word	0x00400515

004018ec <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  4018ec:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  4018ee:	4b01      	ldr	r3, [pc, #4]	; (4018f4 <nm_read_reg+0x8>)
  4018f0:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  4018f2:	bd08      	pop	{r3, pc}
  4018f4:	0040213d 	.word	0x0040213d

004018f8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4018f8:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  4018fa:	4b01      	ldr	r3, [pc, #4]	; (401900 <nm_read_reg_with_ret+0x8>)
  4018fc:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  4018fe:	bd08      	pop	{r3, pc}
  401900:	00402155 	.word	0x00402155

00401904 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  401904:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  401906:	4b01      	ldr	r3, [pc, #4]	; (40190c <nm_write_reg+0x8>)
  401908:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  40190a:	bd08      	pop	{r3, pc}
  40190c:	0040216d 	.word	0x0040216d

00401910 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401914:	4607      	mov	r7, r0
  401916:	4689      	mov	r9, r1
  401918:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40191a:	4b13      	ldr	r3, [pc, #76]	; (401968 <nm_read_block+0x58>)
  40191c:	f8b3 8000 	ldrh.w	r8, [r3]
  401920:	f1a8 0808 	sub.w	r8, r8, #8
  401924:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401928:	4542      	cmp	r2, r8
  40192a:	d808      	bhi.n	40193e <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  40192c:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40192e:	b2aa      	uxth	r2, r5
  401930:	eb09 0106 	add.w	r1, r9, r6
  401934:	4638      	mov	r0, r7
  401936:	4b0d      	ldr	r3, [pc, #52]	; (40196c <nm_read_block+0x5c>)
  401938:	4798      	blx	r3
  40193a:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  40193c:	e010      	b.n	401960 <nm_read_block+0x50>
  40193e:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401940:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401942:	f8df a028 	ldr.w	sl, [pc, #40]	; 40196c <nm_read_block+0x5c>
  401946:	4642      	mov	r2, r8
  401948:	eb09 0106 	add.w	r1, r9, r6
  40194c:	4638      	mov	r0, r7
  40194e:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401950:	4603      	mov	r3, r0
  401952:	b928      	cbnz	r0, 401960 <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  401954:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401956:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401958:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40195a:	42a5      	cmp	r5, r4
  40195c:	d8f3      	bhi.n	401946 <nm_read_block+0x36>
  40195e:	e7e6      	b.n	40192e <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401960:	4618      	mov	r0, r3
  401962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401966:	bf00      	nop
  401968:	2040000c 	.word	0x2040000c
  40196c:	00402291 	.word	0x00402291

00401970 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401974:	4607      	mov	r7, r0
  401976:	4689      	mov	r9, r1
  401978:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40197a:	4b13      	ldr	r3, [pc, #76]	; (4019c8 <nm_write_block+0x58>)
  40197c:	f8b3 8000 	ldrh.w	r8, [r3]
  401980:	f1a8 0808 	sub.w	r8, r8, #8
  401984:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401988:	4542      	cmp	r2, r8
  40198a:	d808      	bhi.n	40199e <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  40198c:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  40198e:	b2aa      	uxth	r2, r5
  401990:	eb09 0106 	add.w	r1, r9, r6
  401994:	4638      	mov	r0, r7
  401996:	4b0d      	ldr	r3, [pc, #52]	; (4019cc <nm_write_block+0x5c>)
  401998:	4798      	blx	r3
  40199a:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  40199c:	e010      	b.n	4019c0 <nm_write_block+0x50>
  40199e:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4019a0:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4019a2:	f8df a028 	ldr.w	sl, [pc, #40]	; 4019cc <nm_write_block+0x5c>
  4019a6:	4642      	mov	r2, r8
  4019a8:	eb09 0106 	add.w	r1, r9, r6
  4019ac:	4638      	mov	r0, r7
  4019ae:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4019b0:	4603      	mov	r3, r0
  4019b2:	b928      	cbnz	r0, 4019c0 <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  4019b4:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4019b6:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4019b8:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4019ba:	42a5      	cmp	r5, r4
  4019bc:	d8f3      	bhi.n	4019a6 <nm_write_block+0x36>
  4019be:	e7e6      	b.n	40198e <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  4019c0:	4618      	mov	r0, r3
  4019c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4019c6:	bf00      	nop
  4019c8:	2040000c 	.word	0x2040000c
  4019cc:	0040235d 	.word	0x0040235d

004019d0 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  4019d0:	b530      	push	{r4, r5, lr}
  4019d2:	b083      	sub	sp, #12
  4019d4:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  4019d6:	a902      	add	r1, sp, #8
  4019d8:	2300      	movs	r3, #0
  4019da:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  4019de:	4823      	ldr	r0, [pc, #140]	; (401a6c <nm_get_firmware_info+0x9c>)
  4019e0:	4b23      	ldr	r3, [pc, #140]	; (401a70 <nm_get_firmware_info+0xa0>)
  4019e2:	4798      	blx	r3
  4019e4:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  4019e6:	9a01      	ldr	r2, [sp, #4]
  4019e8:	4b22      	ldr	r3, [pc, #136]	; (401a74 <nm_get_firmware_info+0xa4>)
  4019ea:	429a      	cmp	r2, r3
  4019ec:	d105      	bne.n	4019fa <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4019ee:	a901      	add	r1, sp, #4
  4019f0:	f241 0048 	movw	r0, #4168	; 0x1048
  4019f4:	4b1e      	ldr	r3, [pc, #120]	; (401a70 <nm_get_firmware_info+0xa0>)
  4019f6:	4798      	blx	r3
  4019f8:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  4019fa:	9b01      	ldr	r3, [sp, #4]
  4019fc:	0c1a      	lsrs	r2, r3, #16
  4019fe:	1211      	asrs	r1, r2, #8
  401a00:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  401a02:	f3c2 1103 	ubfx	r1, r2, #4, #4
  401a06:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  401a08:	f002 020f 	and.w	r2, r2, #15
  401a0c:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  401a0e:	121a      	asrs	r2, r3, #8
  401a10:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  401a12:	f3c3 1203 	ubfx	r2, r3, #4, #4
  401a16:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  401a18:	f003 030f 	and.w	r3, r3, #15
  401a1c:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  401a1e:	4b16      	ldr	r3, [pc, #88]	; (401a78 <nm_get_firmware_info+0xa8>)
  401a20:	4798      	blx	r3
  401a22:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  401a24:	7922      	ldrb	r2, [r4, #4]
  401a26:	79a3      	ldrb	r3, [r4, #6]
  401a28:	f003 030f 	and.w	r3, r3, #15
  401a2c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  401a30:	7963      	ldrb	r3, [r4, #5]
  401a32:	011b      	lsls	r3, r3, #4
  401a34:	b2db      	uxtb	r3, r3
  401a36:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  401a38:	79e1      	ldrb	r1, [r4, #7]
  401a3a:	7a62      	ldrb	r2, [r4, #9]
  401a3c:	f002 020f 	and.w	r2, r2, #15
  401a40:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  401a44:	7a22      	ldrb	r2, [r4, #8]
  401a46:	0112      	lsls	r2, r2, #4
  401a48:	b2d2      	uxtb	r2, r2
  401a4a:	430a      	orrs	r2, r1
  401a4c:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  401a50:	428a      	cmp	r2, r1
  401a52:	bf88      	it	hi
  401a54:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  401a58:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  401a5c:	4293      	cmp	r3, r2
	}
	return ret;
}
  401a5e:	bf8c      	ite	hi
  401a60:	4628      	movhi	r0, r5
  401a62:	f06f 000c 	mvnls.w	r0, #12
  401a66:	b003      	add	sp, #12
  401a68:	bd30      	pop	{r4, r5, pc}
  401a6a:	bf00      	nop
  401a6c:	000207ac 	.word	0x000207ac
  401a70:	004018f9 	.word	0x004018f9
  401a74:	d75dc1c3 	.word	0xd75dc1c3
  401a78:	00401601 	.word	0x00401601

00401a7c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  401a7c:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  401a7e:	b130      	cbz	r0, 401a8e <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  401a80:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  401a82:	1e63      	subs	r3, r4, #1
  401a84:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  401a86:	2b04      	cmp	r3, #4
  401a88:	bf28      	it	cs
  401a8a:	2401      	movcs	r4, #1
  401a8c:	e000      	b.n	401a90 <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401a8e:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  401a90:	2000      	movs	r0, #0
  401a92:	4b1d      	ldr	r3, [pc, #116]	; (401b08 <nm_drv_init+0x8c>)
  401a94:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a96:	4605      	mov	r5, r0
  401a98:	b150      	cbz	r0, 401ab0 <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  401a9a:	f44f 7292 	mov.w	r2, #292	; 0x124
  401a9e:	491b      	ldr	r1, [pc, #108]	; (401b0c <nm_drv_init+0x90>)
  401aa0:	481b      	ldr	r0, [pc, #108]	; (401b10 <nm_drv_init+0x94>)
  401aa2:	4c1c      	ldr	r4, [pc, #112]	; (401b14 <nm_drv_init+0x98>)
  401aa4:	47a0      	blx	r4
  401aa6:	481c      	ldr	r0, [pc, #112]	; (401b18 <nm_drv_init+0x9c>)
  401aa8:	47a0      	blx	r4
  401aaa:	481c      	ldr	r0, [pc, #112]	; (401b1c <nm_drv_init+0xa0>)
  401aac:	47a0      	blx	r4
		goto ERR1;
  401aae:	e029      	b.n	401b04 <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401ab0:	481b      	ldr	r0, [pc, #108]	; (401b20 <nm_drv_init+0xa4>)
  401ab2:	4d18      	ldr	r5, [pc, #96]	; (401b14 <nm_drv_init+0x98>)
  401ab4:	47a8      	blx	r5
  401ab6:	4b1b      	ldr	r3, [pc, #108]	; (401b24 <nm_drv_init+0xa8>)
  401ab8:	4798      	blx	r3
  401aba:	4601      	mov	r1, r0
  401abc:	481a      	ldr	r0, [pc, #104]	; (401b28 <nm_drv_init+0xac>)
  401abe:	47a8      	blx	r5
  401ac0:	4816      	ldr	r0, [pc, #88]	; (401b1c <nm_drv_init+0xa0>)
  401ac2:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401ac4:	4b19      	ldr	r3, [pc, #100]	; (401b2c <nm_drv_init+0xb0>)
  401ac6:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  401ac8:	4620      	mov	r0, r4
  401aca:	4b19      	ldr	r3, [pc, #100]	; (401b30 <nm_drv_init+0xb4>)
  401acc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ace:	4605      	mov	r5, r0
  401ad0:	b9b0      	cbnz	r0, 401b00 <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401ad2:	4620      	mov	r0, r4
  401ad4:	4b17      	ldr	r3, [pc, #92]	; (401b34 <nm_drv_init+0xb8>)
  401ad6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ad8:	4605      	mov	r5, r0
  401ada:	b988      	cbnz	r0, 401b00 <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401adc:	3c02      	subs	r4, #2
  401ade:	b2e4      	uxtb	r4, r4
  401ae0:	2c01      	cmp	r4, #1
  401ae2:	d90f      	bls.n	401b04 <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401ae4:	4b14      	ldr	r3, [pc, #80]	; (401b38 <nm_drv_init+0xbc>)
  401ae6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ae8:	4605      	mov	r5, r0
  401aea:	b158      	cbz	r0, 401b04 <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  401aec:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401af0:	4906      	ldr	r1, [pc, #24]	; (401b0c <nm_drv_init+0x90>)
  401af2:	4807      	ldr	r0, [pc, #28]	; (401b10 <nm_drv_init+0x94>)
  401af4:	4c07      	ldr	r4, [pc, #28]	; (401b14 <nm_drv_init+0x98>)
  401af6:	47a0      	blx	r4
  401af8:	4810      	ldr	r0, [pc, #64]	; (401b3c <nm_drv_init+0xc0>)
  401afa:	47a0      	blx	r4
  401afc:	4807      	ldr	r0, [pc, #28]	; (401b1c <nm_drv_init+0xa0>)
  401afe:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401b00:	4b0f      	ldr	r3, [pc, #60]	; (401b40 <nm_drv_init+0xc4>)
  401b02:	4798      	blx	r3
ERR1:
	return ret;
}
  401b04:	4628      	mov	r0, r5
  401b06:	bd38      	pop	{r3, r4, r5, pc}
  401b08:	004018d5 	.word	0x004018d5
  401b0c:	00406fd4 	.word	0x00406fd4
  401b10:	004067d0 	.word	0x004067d0
  401b14:	00403775 	.word	0x00403775
  401b18:	00406f28 	.word	0x00406f28
  401b1c:	004067fc 	.word	0x004067fc
  401b20:	00406aa4 	.word	0x00406aa4
  401b24:	00401601 	.word	0x00401601
  401b28:	00406f44 	.word	0x00406f44
  401b2c:	00402185 	.word	0x00402185
  401b30:	004016b1 	.word	0x004016b1
  401b34:	0040178d 	.word	0x0040178d
  401b38:	00401599 	.word	0x00401599
  401b3c:	00406f54 	.word	0x00406f54
  401b40:	004018e1 	.word	0x004018e1

00401b44 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401b44:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401b46:	4b19      	ldr	r3, [pc, #100]	; (401bac <nm_drv_deinit+0x68>)
  401b48:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b4a:	b158      	cbz	r0, 401b64 <nm_drv_deinit+0x20>
  401b4c:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401b4e:	f44f 72ba 	mov.w	r2, #372	; 0x174
  401b52:	4917      	ldr	r1, [pc, #92]	; (401bb0 <nm_drv_deinit+0x6c>)
  401b54:	4817      	ldr	r0, [pc, #92]	; (401bb4 <nm_drv_deinit+0x70>)
  401b56:	4d18      	ldr	r5, [pc, #96]	; (401bb8 <nm_drv_deinit+0x74>)
  401b58:	47a8      	blx	r5
  401b5a:	4818      	ldr	r0, [pc, #96]	; (401bbc <nm_drv_deinit+0x78>)
  401b5c:	47a8      	blx	r5
  401b5e:	4818      	ldr	r0, [pc, #96]	; (401bc0 <nm_drv_deinit+0x7c>)
  401b60:	47a8      	blx	r5
		goto ERR1;
  401b62:	e020      	b.n	401ba6 <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401b64:	2000      	movs	r0, #0
  401b66:	4b17      	ldr	r3, [pc, #92]	; (401bc4 <nm_drv_deinit+0x80>)
  401b68:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b6a:	4604      	mov	r4, r0
  401b6c:	b150      	cbz	r0, 401b84 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401b6e:	f240 127b 	movw	r2, #379	; 0x17b
  401b72:	490f      	ldr	r1, [pc, #60]	; (401bb0 <nm_drv_deinit+0x6c>)
  401b74:	480f      	ldr	r0, [pc, #60]	; (401bb4 <nm_drv_deinit+0x70>)
  401b76:	4d10      	ldr	r5, [pc, #64]	; (401bb8 <nm_drv_deinit+0x74>)
  401b78:	47a8      	blx	r5
  401b7a:	4813      	ldr	r0, [pc, #76]	; (401bc8 <nm_drv_deinit+0x84>)
  401b7c:	47a8      	blx	r5
  401b7e:	4810      	ldr	r0, [pc, #64]	; (401bc0 <nm_drv_deinit+0x7c>)
  401b80:	47a8      	blx	r5
		goto ERR1;
  401b82:	e010      	b.n	401ba6 <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  401b84:	4b11      	ldr	r3, [pc, #68]	; (401bcc <nm_drv_deinit+0x88>)
  401b86:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b88:	4604      	mov	r4, r0
  401b8a:	b150      	cbz	r0, 401ba2 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401b8c:	f240 1281 	movw	r2, #385	; 0x181
  401b90:	4907      	ldr	r1, [pc, #28]	; (401bb0 <nm_drv_deinit+0x6c>)
  401b92:	4808      	ldr	r0, [pc, #32]	; (401bb4 <nm_drv_deinit+0x70>)
  401b94:	4d08      	ldr	r5, [pc, #32]	; (401bb8 <nm_drv_deinit+0x74>)
  401b96:	47a8      	blx	r5
  401b98:	480d      	ldr	r0, [pc, #52]	; (401bd0 <nm_drv_deinit+0x8c>)
  401b9a:	47a8      	blx	r5
  401b9c:	4808      	ldr	r0, [pc, #32]	; (401bc0 <nm_drv_deinit+0x7c>)
  401b9e:	47a8      	blx	r5
		goto ERR1;
  401ba0:	e001      	b.n	401ba6 <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401ba2:	4b0c      	ldr	r3, [pc, #48]	; (401bd4 <nm_drv_deinit+0x90>)
  401ba4:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  401ba6:	4620      	mov	r0, r4
  401ba8:	bd38      	pop	{r3, r4, r5, pc}
  401baa:	bf00      	nop
  401bac:	0040180d 	.word	0x0040180d
  401bb0:	00406fe0 	.word	0x00406fe0
  401bb4:	004067d0 	.word	0x004067d0
  401bb8:	00403775 	.word	0x00403775
  401bbc:	00406f74 	.word	0x00406f74
  401bc0:	004067fc 	.word	0x004067fc
  401bc4:	004024e1 	.word	0x004024e1
  401bc8:	00406f94 	.word	0x00406f94
  401bcc:	004018e1 	.word	0x004018e1
  401bd0:	00406fb8 	.word	0x00406fb8
  401bd4:	00402131 	.word	0x00402131

00401bd8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  401bd8:	b500      	push	{lr}
  401bda:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  401bdc:	2300      	movs	r3, #0
  401bde:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  401be0:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  401be2:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401be6:	a901      	add	r1, sp, #4
  401be8:	2003      	movs	r0, #3
  401bea:	4b02      	ldr	r3, [pc, #8]	; (401bf4 <nmi_spi_read+0x1c>)
  401bec:	4798      	blx	r3
}
  401bee:	b005      	add	sp, #20
  401bf0:	f85d fb04 	ldr.w	pc, [sp], #4
  401bf4:	00400445 	.word	0x00400445

00401bf8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  401bfa:	b083      	sub	sp, #12
  401bfc:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  401bfe:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  401c02:	b2db      	uxtb	r3, r3
  401c04:	2b01      	cmp	r3, #1
  401c06:	d901      	bls.n	401c0c <spi_cmd_rsp+0x14>
  401c08:	28cf      	cmp	r0, #207	; 0xcf
  401c0a:	d106      	bne.n	401c1a <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c0c:	2101      	movs	r1, #1
  401c0e:	f10d 0007 	add.w	r0, sp, #7
  401c12:	4b22      	ldr	r3, [pc, #136]	; (401c9c <spi_cmd_rsp+0xa4>)
  401c14:	4798      	blx	r3
  401c16:	2800      	cmp	r0, #0
  401c18:	d13a      	bne.n	401c90 <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401c1a:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c1c:	2701      	movs	r7, #1
  401c1e:	4e1f      	ldr	r6, [pc, #124]	; (401c9c <spi_cmd_rsp+0xa4>)
  401c20:	4639      	mov	r1, r7
  401c22:	f10d 0007 	add.w	r0, sp, #7
  401c26:	47b0      	blx	r6
  401c28:	b158      	cbz	r0, 401c42 <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401c2a:	f240 1227 	movw	r2, #295	; 0x127
  401c2e:	491c      	ldr	r1, [pc, #112]	; (401ca0 <spi_cmd_rsp+0xa8>)
  401c30:	481c      	ldr	r0, [pc, #112]	; (401ca4 <spi_cmd_rsp+0xac>)
  401c32:	4c1d      	ldr	r4, [pc, #116]	; (401ca8 <spi_cmd_rsp+0xb0>)
  401c34:	47a0      	blx	r4
  401c36:	481d      	ldr	r0, [pc, #116]	; (401cac <spi_cmd_rsp+0xb4>)
  401c38:	47a0      	blx	r4
  401c3a:	481d      	ldr	r0, [pc, #116]	; (401cb0 <spi_cmd_rsp+0xb8>)
  401c3c:	47a0      	blx	r4
			result = N_FAIL;
  401c3e:	2000      	movs	r0, #0
			goto _fail_;
  401c40:	e029      	b.n	401c96 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  401c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401c46:	42ab      	cmp	r3, r5
  401c48:	d005      	beq.n	401c56 <spi_cmd_rsp+0x5e>
  401c4a:	1e63      	subs	r3, r4, #1
  401c4c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401c50:	d1e6      	bne.n	401c20 <spi_cmd_rsp+0x28>
  401c52:	240b      	movs	r4, #11
  401c54:	e000      	b.n	401c58 <spi_cmd_rsp+0x60>
  401c56:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c58:	2601      	movs	r6, #1
  401c5a:	4d10      	ldr	r5, [pc, #64]	; (401c9c <spi_cmd_rsp+0xa4>)
  401c5c:	4631      	mov	r1, r6
  401c5e:	f10d 0007 	add.w	r0, sp, #7
  401c62:	47a8      	blx	r5
  401c64:	b158      	cbz	r0, 401c7e <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401c66:	f240 1235 	movw	r2, #309	; 0x135
  401c6a:	490d      	ldr	r1, [pc, #52]	; (401ca0 <spi_cmd_rsp+0xa8>)
  401c6c:	480d      	ldr	r0, [pc, #52]	; (401ca4 <spi_cmd_rsp+0xac>)
  401c6e:	4c0e      	ldr	r4, [pc, #56]	; (401ca8 <spi_cmd_rsp+0xb0>)
  401c70:	47a0      	blx	r4
  401c72:	480e      	ldr	r0, [pc, #56]	; (401cac <spi_cmd_rsp+0xb4>)
  401c74:	47a0      	blx	r4
  401c76:	480e      	ldr	r0, [pc, #56]	; (401cb0 <spi_cmd_rsp+0xb8>)
  401c78:	47a0      	blx	r4
			result = N_FAIL;
  401c7a:	2000      	movs	r0, #0
			goto _fail_;
  401c7c:	e00b      	b.n	401c96 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  401c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401c82:	b13b      	cbz	r3, 401c94 <spi_cmd_rsp+0x9c>
  401c84:	1e63      	subs	r3, r4, #1
  401c86:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401c8a:	d1e7      	bne.n	401c5c <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401c8c:	2001      	movs	r0, #1
  401c8e:	e002      	b.n	401c96 <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  401c90:	2000      	movs	r0, #0
  401c92:	e000      	b.n	401c96 <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401c94:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  401c96:	b003      	add	sp, #12
  401c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c9a:	bf00      	nop
  401c9c:	00401bd9 	.word	0x00401bd9
  401ca0:	00407604 	.word	0x00407604
  401ca4:	004067d0 	.word	0x004067d0
  401ca8:	00403775 	.word	0x00403775
  401cac:	00407128 	.word	0x00407128
  401cb0:	004067fc 	.word	0x004067fc

00401cb4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  401cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cb8:	b083      	sub	sp, #12
  401cba:	4682      	mov	sl, r0
  401cbc:	4689      	mov	r9, r1
  401cbe:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  401cc0:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401cc4:	4d35      	ldr	r5, [pc, #212]	; (401d9c <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  401cc6:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  401cca:	bf94      	ite	ls
  401ccc:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  401cd0:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  401cd4:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401cd6:	2601      	movs	r6, #1
  401cd8:	4631      	mov	r1, r6
  401cda:	f10d 0003 	add.w	r0, sp, #3
  401cde:	47a8      	blx	r5
  401ce0:	b158      	cbz	r0, 401cfa <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  401ce2:	f240 1257 	movw	r2, #343	; 0x157
  401ce6:	492e      	ldr	r1, [pc, #184]	; (401da0 <spi_data_read+0xec>)
  401ce8:	482e      	ldr	r0, [pc, #184]	; (401da4 <spi_data_read+0xf0>)
  401cea:	4c2f      	ldr	r4, [pc, #188]	; (401da8 <spi_data_read+0xf4>)
  401cec:	47a0      	blx	r4
  401cee:	482f      	ldr	r0, [pc, #188]	; (401dac <spi_data_read+0xf8>)
  401cf0:	47a0      	blx	r4
  401cf2:	482f      	ldr	r0, [pc, #188]	; (401db0 <spi_data_read+0xfc>)
  401cf4:	47a0      	blx	r4
  401cf6:	2000      	movs	r0, #0
  401cf8:	e04d      	b.n	401d96 <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  401cfa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401cfe:	091b      	lsrs	r3, r3, #4
  401d00:	2b0f      	cmp	r3, #15
  401d02:	d005      	beq.n	401d10 <spi_data_read+0x5c>
  401d04:	3c01      	subs	r4, #1
  401d06:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  401d08:	f1b4 3fff 	cmp.w	r4, #4294967295
  401d0c:	d1e4      	bne.n	401cd8 <spi_data_read+0x24>
  401d0e:	e001      	b.n	401d14 <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  401d10:	2c00      	cmp	r4, #0
  401d12:	dc0d      	bgt.n	401d30 <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  401d14:	f240 1263 	movw	r2, #355	; 0x163
  401d18:	4921      	ldr	r1, [pc, #132]	; (401da0 <spi_data_read+0xec>)
  401d1a:	4822      	ldr	r0, [pc, #136]	; (401da4 <spi_data_read+0xf0>)
  401d1c:	4c22      	ldr	r4, [pc, #136]	; (401da8 <spi_data_read+0xf4>)
  401d1e:	47a0      	blx	r4
  401d20:	f89d 1003 	ldrb.w	r1, [sp, #3]
  401d24:	4823      	ldr	r0, [pc, #140]	; (401db4 <spi_data_read+0x100>)
  401d26:	47a0      	blx	r4
  401d28:	4821      	ldr	r0, [pc, #132]	; (401db0 <spi_data_read+0xfc>)
  401d2a:	47a0      	blx	r4
			result = N_FAIL;
  401d2c:	2000      	movs	r0, #0
			break;
  401d2e:	e032      	b.n	401d96 <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  401d30:	b2bf      	uxth	r7, r7
  401d32:	4639      	mov	r1, r7
  401d34:	eb0a 0008 	add.w	r0, sl, r8
  401d38:	47a8      	blx	r5
  401d3a:	b158      	cbz	r0, 401d54 <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  401d3c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  401d40:	4917      	ldr	r1, [pc, #92]	; (401da0 <spi_data_read+0xec>)
  401d42:	4818      	ldr	r0, [pc, #96]	; (401da4 <spi_data_read+0xf0>)
  401d44:	4c18      	ldr	r4, [pc, #96]	; (401da8 <spi_data_read+0xf4>)
  401d46:	47a0      	blx	r4
  401d48:	481b      	ldr	r0, [pc, #108]	; (401db8 <spi_data_read+0x104>)
  401d4a:	47a0      	blx	r4
  401d4c:	4818      	ldr	r0, [pc, #96]	; (401db0 <spi_data_read+0xfc>)
  401d4e:	47a0      	blx	r4
			result = N_FAIL;
  401d50:	2000      	movs	r0, #0
			break;
  401d52:	e020      	b.n	401d96 <spi_data_read+0xe2>
		}
		if(!clockless)
  401d54:	f1bb 0f00 	cmp.w	fp, #0
  401d58:	d112      	bne.n	401d80 <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  401d5a:	4b18      	ldr	r3, [pc, #96]	; (401dbc <spi_data_read+0x108>)
  401d5c:	781b      	ldrb	r3, [r3, #0]
  401d5e:	b97b      	cbnz	r3, 401d80 <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  401d60:	2102      	movs	r1, #2
  401d62:	a801      	add	r0, sp, #4
  401d64:	47a8      	blx	r5
  401d66:	b158      	cbz	r0, 401d80 <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  401d68:	f240 1277 	movw	r2, #375	; 0x177
  401d6c:	490c      	ldr	r1, [pc, #48]	; (401da0 <spi_data_read+0xec>)
  401d6e:	480d      	ldr	r0, [pc, #52]	; (401da4 <spi_data_read+0xf0>)
  401d70:	4c0d      	ldr	r4, [pc, #52]	; (401da8 <spi_data_read+0xf4>)
  401d72:	47a0      	blx	r4
  401d74:	4812      	ldr	r0, [pc, #72]	; (401dc0 <spi_data_read+0x10c>)
  401d76:	47a0      	blx	r4
  401d78:	480d      	ldr	r0, [pc, #52]	; (401db0 <spi_data_read+0xfc>)
  401d7a:	47a0      	blx	r4
					result = N_FAIL;
  401d7c:	2000      	movs	r0, #0
					break;
  401d7e:	e00a      	b.n	401d96 <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  401d80:	44b8      	add	r8, r7
  401d82:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  401d86:	ebc7 0709 	rsb	r7, r7, r9
  401d8a:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  401d8e:	f1b9 0f00 	cmp.w	r9, #0
  401d92:	d198      	bne.n	401cc6 <spi_data_read+0x12>
  401d94:	2001      	movs	r0, #1

	return result;
}
  401d96:	b003      	add	sp, #12
  401d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d9c:	00401bd9 	.word	0x00401bd9
  401da0:	00406ff0 	.word	0x00406ff0
  401da4:	004067d0 	.word	0x004067d0
  401da8:	00403775 	.word	0x00403775
  401dac:	0040715c 	.word	0x0040715c
  401db0:	004067fc 	.word	0x004067fc
  401db4:	00407190 	.word	0x00407190
  401db8:	004071c0 	.word	0x004071c0
  401dbc:	204008d8 	.word	0x204008d8
  401dc0:	004071f4 	.word	0x004071f4

00401dc4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  401dc4:	b500      	push	{lr}
  401dc6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  401dc8:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  401dca:	2300      	movs	r3, #0
  401dcc:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  401dce:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401dd2:	a901      	add	r1, sp, #4
  401dd4:	2003      	movs	r0, #3
  401dd6:	4b02      	ldr	r3, [pc, #8]	; (401de0 <nmi_spi_write+0x1c>)
  401dd8:	4798      	blx	r3
}
  401dda:	b005      	add	sp, #20
  401ddc:	f85d fb04 	ldr.w	pc, [sp], #4
  401de0:	00400445 	.word	0x00400445

00401de4 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  401de4:	b570      	push	{r4, r5, r6, lr}
  401de6:	b084      	sub	sp, #16
  401de8:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  401dec:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  401df0:	38c1      	subs	r0, #193	; 0xc1
  401df2:	280e      	cmp	r0, #14
  401df4:	f200 80ae 	bhi.w	401f54 <spi_cmd+0x170>
  401df8:	e8df f000 	tbb	[pc, r0]
  401dfc:	125f3e3e 	.word	0x125f3e3e
  401e00:	4d4d2c23 	.word	0x4d4d2c23
  401e04:	acac0878 	.word	0xacac0878
  401e08:	acac      	.short	0xacac
  401e0a:	35          	.byte	0x35
  401e0b:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  401e0c:	0c0b      	lsrs	r3, r1, #16
  401e0e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e12:	0a0b      	lsrs	r3, r1, #8
  401e14:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  401e18:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  401e1c:	2105      	movs	r1, #5
		break;
  401e1e:	e0a4      	b.n	401f6a <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  401e20:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401e24:	b914      	cbnz	r4, 401e2c <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  401e26:	f88d 3005 	strb.w	r3, [sp, #5]
  401e2a:	e003      	b.n	401e34 <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  401e2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401e30:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  401e34:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  401e38:	2300      	movs	r3, #0
  401e3a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e3e:	2105      	movs	r1, #5
		break;
  401e40:	e093      	b.n	401f6a <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  401e42:	2300      	movs	r3, #0
  401e44:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401e48:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401e4c:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e50:	2105      	movs	r1, #5
		break;
  401e52:	e08a      	b.n	401f6a <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  401e54:	2300      	movs	r3, #0
  401e56:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401e5a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401e5e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e62:	2105      	movs	r1, #5
		break;
  401e64:	e081      	b.n	401f6a <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  401e66:	23ff      	movs	r3, #255	; 0xff
  401e68:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  401e6c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  401e70:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e74:	2105      	movs	r1, #5
		break;
  401e76:	e078      	b.n	401f6a <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  401e78:	0c0a      	lsrs	r2, r1, #16
  401e7a:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e7e:	0a0a      	lsrs	r2, r1, #8
  401e80:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401e84:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  401e88:	0a1a      	lsrs	r2, r3, #8
  401e8a:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  401e8e:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  401e92:	2107      	movs	r1, #7
		break;
  401e94:	e069      	b.n	401f6a <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  401e96:	0c0a      	lsrs	r2, r1, #16
  401e98:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e9c:	0a0a      	lsrs	r2, r1, #8
  401e9e:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401ea2:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  401ea6:	0c1a      	lsrs	r2, r3, #16
  401ea8:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  401eac:	0a1a      	lsrs	r2, r3, #8
  401eae:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  401eb2:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  401eb6:	2108      	movs	r1, #8
		break;
  401eb8:	e057      	b.n	401f6a <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  401eba:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401ebe:	b914      	cbnz	r4, 401ec6 <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  401ec0:	f88d 3005 	strb.w	r3, [sp, #5]
  401ec4:	e003      	b.n	401ece <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  401ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401eca:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  401ece:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  401ed2:	0e13      	lsrs	r3, r2, #24
  401ed4:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  401ed8:	0c13      	lsrs	r3, r2, #16
  401eda:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  401ede:	0a13      	lsrs	r3, r2, #8
  401ee0:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  401ee4:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  401ee8:	2108      	movs	r1, #8
		break;
  401eea:	e03e      	b.n	401f6a <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  401eec:	0c0b      	lsrs	r3, r1, #16
  401eee:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401ef2:	0a0b      	lsrs	r3, r1, #8
  401ef4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  401ef8:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  401efc:	0e13      	lsrs	r3, r2, #24
  401efe:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  401f02:	0c13      	lsrs	r3, r2, #16
  401f04:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  401f08:	0a13      	lsrs	r3, r2, #8
  401f0a:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  401f0e:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  401f12:	2109      	movs	r1, #9
		break;
  401f14:	e029      	b.n	401f6a <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  401f16:	f812 3b01 	ldrb.w	r3, [r2], #1
  401f1a:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  401f1e:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  401f20:	4295      	cmp	r5, r2
  401f22:	d1f8      	bne.n	401f16 <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401f24:	ab04      	add	r3, sp, #16
  401f26:	441e      	add	r6, r3
  401f28:	0043      	lsls	r3, r0, #1
  401f2a:	f806 3c0c 	strb.w	r3, [r6, #-12]
  401f2e:	e001      	b.n	401f34 <spi_cmd+0x150>
		else
			len-=1;
  401f30:	3901      	subs	r1, #1
  401f32:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  401f34:	a801      	add	r0, sp, #4
  401f36:	4b10      	ldr	r3, [pc, #64]	; (401f78 <spi_cmd+0x194>)
  401f38:	4798      	blx	r3
  401f3a:	b168      	cbz	r0, 401f58 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  401f3c:	f44f 7284 	mov.w	r2, #264	; 0x108
  401f40:	490e      	ldr	r1, [pc, #56]	; (401f7c <spi_cmd+0x198>)
  401f42:	480f      	ldr	r0, [pc, #60]	; (401f80 <spi_cmd+0x19c>)
  401f44:	4c0f      	ldr	r4, [pc, #60]	; (401f84 <spi_cmd+0x1a0>)
  401f46:	47a0      	blx	r4
  401f48:	480f      	ldr	r0, [pc, #60]	; (401f88 <spi_cmd+0x1a4>)
  401f4a:	47a0      	blx	r4
  401f4c:	480f      	ldr	r0, [pc, #60]	; (401f8c <spi_cmd+0x1a8>)
  401f4e:	47a0      	blx	r4
			result = N_FAIL;
  401f50:	2000      	movs	r0, #0
  401f52:	e00f      	b.n	401f74 <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  401f54:	2000      	movs	r0, #0
  401f56:	e00d      	b.n	401f74 <spi_cmd+0x190>
  401f58:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  401f5a:	e00b      	b.n	401f74 <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401f5c:	1e4e      	subs	r6, r1, #1
  401f5e:	ab01      	add	r3, sp, #4
  401f60:	199d      	adds	r5, r3, r6
  401f62:	207f      	movs	r0, #127	; 0x7f
  401f64:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  401f66:	4c0a      	ldr	r4, [pc, #40]	; (401f90 <spi_cmd+0x1ac>)
  401f68:	e7d5      	b.n	401f16 <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  401f6a:	4b0a      	ldr	r3, [pc, #40]	; (401f94 <spi_cmd+0x1b0>)
  401f6c:	781b      	ldrb	r3, [r3, #0]
  401f6e:	2b00      	cmp	r3, #0
  401f70:	d1de      	bne.n	401f30 <spi_cmd+0x14c>
  401f72:	e7f3      	b.n	401f5c <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  401f74:	b004      	add	sp, #16
  401f76:	bd70      	pop	{r4, r5, r6, pc}
  401f78:	00401dc5 	.word	0x00401dc5
  401f7c:	004075ec 	.word	0x004075ec
  401f80:	004067d0 	.word	0x004067d0
  401f84:	00403775 	.word	0x00403775
  401f88:	0040722c 	.word	0x0040722c
  401f8c:	004067fc 	.word	0x004067fc
  401f90:	00407000 	.word	0x00407000
  401f94:	204008d8 	.word	0x204008d8

00401f98 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  401f98:	b570      	push	{r4, r5, r6, lr}
  401f9a:	b082      	sub	sp, #8
  401f9c:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  401f9e:	2831      	cmp	r0, #49	; 0x31
  401fa0:	bf35      	itete	cc
  401fa2:	2301      	movcc	r3, #1
  401fa4:	2300      	movcs	r3, #0
  401fa6:	25c3      	movcc	r5, #195	; 0xc3
  401fa8:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  401faa:	9300      	str	r3, [sp, #0]
  401fac:	2304      	movs	r3, #4
  401fae:	460a      	mov	r2, r1
  401fb0:	4601      	mov	r1, r0
  401fb2:	4628      	mov	r0, r5
  401fb4:	4e16      	ldr	r6, [pc, #88]	; (402010 <spi_write_reg+0x78>)
  401fb6:	47b0      	blx	r6
	if (result != N_OK) {
  401fb8:	2801      	cmp	r0, #1
  401fba:	d00c      	beq.n	401fd6 <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  401fbc:	f240 12eb 	movw	r2, #491	; 0x1eb
  401fc0:	4914      	ldr	r1, [pc, #80]	; (402014 <spi_write_reg+0x7c>)
  401fc2:	4815      	ldr	r0, [pc, #84]	; (402018 <spi_write_reg+0x80>)
  401fc4:	4d15      	ldr	r5, [pc, #84]	; (40201c <spi_write_reg+0x84>)
  401fc6:	47a8      	blx	r5
  401fc8:	4621      	mov	r1, r4
  401fca:	4815      	ldr	r0, [pc, #84]	; (402020 <spi_write_reg+0x88>)
  401fcc:	47a8      	blx	r5
  401fce:	4815      	ldr	r0, [pc, #84]	; (402024 <spi_write_reg+0x8c>)
  401fd0:	47a8      	blx	r5
		return N_FAIL;
  401fd2:	2000      	movs	r0, #0
  401fd4:	e01a      	b.n	40200c <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  401fd6:	4628      	mov	r0, r5
  401fd8:	4b13      	ldr	r3, [pc, #76]	; (402028 <spi_write_reg+0x90>)
  401fda:	4798      	blx	r3
	if (result != N_OK) {
  401fdc:	2801      	cmp	r0, #1
  401fde:	d014      	beq.n	40200a <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  401fe0:	f240 12f1 	movw	r2, #497	; 0x1f1
  401fe4:	490b      	ldr	r1, [pc, #44]	; (402014 <spi_write_reg+0x7c>)
  401fe6:	480c      	ldr	r0, [pc, #48]	; (402018 <spi_write_reg+0x80>)
  401fe8:	4d0c      	ldr	r5, [pc, #48]	; (40201c <spi_write_reg+0x84>)
  401fea:	47a8      	blx	r5
  401fec:	4621      	mov	r1, r4
  401fee:	480f      	ldr	r0, [pc, #60]	; (40202c <spi_write_reg+0x94>)
  401ff0:	47a8      	blx	r5
  401ff2:	480c      	ldr	r0, [pc, #48]	; (402024 <spi_write_reg+0x8c>)
  401ff4:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  401ff6:	2400      	movs	r4, #0
  401ff8:	9400      	str	r4, [sp, #0]
  401ffa:	4623      	mov	r3, r4
  401ffc:	4622      	mov	r2, r4
  401ffe:	4621      	mov	r1, r4
  402000:	20cf      	movs	r0, #207	; 0xcf
  402002:	4d03      	ldr	r5, [pc, #12]	; (402010 <spi_write_reg+0x78>)
  402004:	47a8      	blx	r5
		return N_FAIL;
  402006:	4620      	mov	r0, r4
  402008:	e000      	b.n	40200c <spi_write_reg+0x74>
	}

	return N_OK;
  40200a:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  40200c:	b002      	add	sp, #8
  40200e:	bd70      	pop	{r4, r5, r6, pc}
  402010:	00401de5 	.word	0x00401de5
  402014:	004075dc 	.word	0x004075dc
  402018:	004067d0 	.word	0x004067d0
  40201c:	00403775 	.word	0x00403775
  402020:	00407258 	.word	0x00407258
  402024:	004067fc 	.word	0x004067fc
  402028:	00401bf9 	.word	0x00401bf9
  40202c:	00407284 	.word	0x00407284

00402030 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  402030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402034:	b084      	sub	sp, #16
  402036:	4604      	mov	r4, r0
  402038:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  40203a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40203e:	bf35      	itete	cc
  402040:	2601      	movcc	r6, #1
  402042:	2600      	movcs	r6, #0
  402044:	25c4      	movcc	r5, #196	; 0xc4
  402046:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402048:	9600      	str	r6, [sp, #0]
  40204a:	2304      	movs	r3, #4
  40204c:	2200      	movs	r2, #0
  40204e:	4601      	mov	r1, r0
  402050:	4628      	mov	r0, r5
  402052:	4f2d      	ldr	r7, [pc, #180]	; (402108 <spi_read_reg+0xd8>)
  402054:	47b8      	blx	r7
	if (result != N_OK) {
  402056:	2801      	cmp	r0, #1
  402058:	d00c      	beq.n	402074 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  40205a:	f240 2245 	movw	r2, #581	; 0x245
  40205e:	492b      	ldr	r1, [pc, #172]	; (40210c <spi_read_reg+0xdc>)
  402060:	482b      	ldr	r0, [pc, #172]	; (402110 <spi_read_reg+0xe0>)
  402062:	4d2c      	ldr	r5, [pc, #176]	; (402114 <spi_read_reg+0xe4>)
  402064:	47a8      	blx	r5
  402066:	4621      	mov	r1, r4
  402068:	482b      	ldr	r0, [pc, #172]	; (402118 <spi_read_reg+0xe8>)
  40206a:	47a8      	blx	r5
  40206c:	482b      	ldr	r0, [pc, #172]	; (40211c <spi_read_reg+0xec>)
  40206e:	47a8      	blx	r5
		return N_FAIL;
  402070:	2000      	movs	r0, #0
  402072:	e045      	b.n	402100 <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  402074:	4628      	mov	r0, r5
  402076:	4b2a      	ldr	r3, [pc, #168]	; (402120 <spi_read_reg+0xf0>)
  402078:	4798      	blx	r3
	if (result != N_OK) {
  40207a:	2801      	cmp	r0, #1
  40207c:	d014      	beq.n	4020a8 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  40207e:	f240 224b 	movw	r2, #587	; 0x24b
  402082:	4922      	ldr	r1, [pc, #136]	; (40210c <spi_read_reg+0xdc>)
  402084:	4822      	ldr	r0, [pc, #136]	; (402110 <spi_read_reg+0xe0>)
  402086:	4d23      	ldr	r5, [pc, #140]	; (402114 <spi_read_reg+0xe4>)
  402088:	47a8      	blx	r5
  40208a:	4621      	mov	r1, r4
  40208c:	4825      	ldr	r0, [pc, #148]	; (402124 <spi_read_reg+0xf4>)
  40208e:	47a8      	blx	r5
  402090:	4822      	ldr	r0, [pc, #136]	; (40211c <spi_read_reg+0xec>)
  402092:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402094:	2400      	movs	r4, #0
  402096:	9400      	str	r4, [sp, #0]
  402098:	4623      	mov	r3, r4
  40209a:	4622      	mov	r2, r4
  40209c:	4621      	mov	r1, r4
  40209e:	20cf      	movs	r0, #207	; 0xcf
  4020a0:	4d19      	ldr	r5, [pc, #100]	; (402108 <spi_read_reg+0xd8>)
  4020a2:	47a8      	blx	r5
		return N_FAIL;
  4020a4:	4620      	mov	r0, r4
  4020a6:	e02b      	b.n	402100 <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  4020a8:	4632      	mov	r2, r6
  4020aa:	2104      	movs	r1, #4
  4020ac:	a803      	add	r0, sp, #12
  4020ae:	4b1e      	ldr	r3, [pc, #120]	; (402128 <spi_read_reg+0xf8>)
  4020b0:	4798      	blx	r3
	if (result != N_OK) {
  4020b2:	2801      	cmp	r0, #1
  4020b4:	d013      	beq.n	4020de <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  4020b6:	f240 2253 	movw	r2, #595	; 0x253
  4020ba:	4914      	ldr	r1, [pc, #80]	; (40210c <spi_read_reg+0xdc>)
  4020bc:	4814      	ldr	r0, [pc, #80]	; (402110 <spi_read_reg+0xe0>)
  4020be:	4c15      	ldr	r4, [pc, #84]	; (402114 <spi_read_reg+0xe4>)
  4020c0:	47a0      	blx	r4
  4020c2:	481a      	ldr	r0, [pc, #104]	; (40212c <spi_read_reg+0xfc>)
  4020c4:	47a0      	blx	r4
  4020c6:	4815      	ldr	r0, [pc, #84]	; (40211c <spi_read_reg+0xec>)
  4020c8:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4020ca:	2400      	movs	r4, #0
  4020cc:	9400      	str	r4, [sp, #0]
  4020ce:	4623      	mov	r3, r4
  4020d0:	4622      	mov	r2, r4
  4020d2:	4621      	mov	r1, r4
  4020d4:	20cf      	movs	r0, #207	; 0xcf
  4020d6:	4d0c      	ldr	r5, [pc, #48]	; (402108 <spi_read_reg+0xd8>)
  4020d8:	47a8      	blx	r5
		return N_FAIL;
  4020da:	4620      	mov	r0, r4
  4020dc:	e010      	b.n	402100 <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  4020de:	f89d 100d 	ldrb.w	r1, [sp, #13]
  4020e2:	f89d 200e 	ldrb.w	r2, [sp, #14]
  4020e6:	0413      	lsls	r3, r2, #16
  4020e8:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  4020ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
  4020f0:	4313      	orrs	r3, r2
  4020f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
  4020f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4020fa:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  4020fe:	2001      	movs	r0, #1
}
  402100:	b004      	add	sp, #16
  402102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402106:	bf00      	nop
  402108:	00401de5 	.word	0x00401de5
  40210c:	00407610 	.word	0x00407610
  402110:	004067d0 	.word	0x004067d0
  402114:	00403775 	.word	0x00403775
  402118:	004072bc 	.word	0x004072bc
  40211c:	004067fc 	.word	0x004067fc
  402120:	00401bf9 	.word	0x00401bf9
  402124:	004072e8 	.word	0x004072e8
  402128:	00401cb5 	.word	0x00401cb5
  40212c:	0040731c 	.word	0x0040731c

00402130 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  402130:	2000      	movs	r0, #0
  402132:	4b01      	ldr	r3, [pc, #4]	; (402138 <nm_spi_deinit+0x8>)
  402134:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  402136:	4770      	bx	lr
  402138:	204008d8 	.word	0x204008d8

0040213c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  40213c:	b500      	push	{lr}
  40213e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  402140:	a901      	add	r1, sp, #4
  402142:	4b03      	ldr	r3, [pc, #12]	; (402150 <nm_spi_read_reg+0x14>)
  402144:	4798      	blx	r3

	return u32Val;
}
  402146:	9801      	ldr	r0, [sp, #4]
  402148:	b003      	add	sp, #12
  40214a:	f85d fb04 	ldr.w	pc, [sp], #4
  40214e:	bf00      	nop
  402150:	00402031 	.word	0x00402031

00402154 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402154:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  402156:	4b04      	ldr	r3, [pc, #16]	; (402168 <nm_spi_read_reg_with_ret+0x14>)
  402158:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40215a:	2801      	cmp	r0, #1

	return s8Ret;
}
  40215c:	bf0c      	ite	eq
  40215e:	2000      	moveq	r0, #0
  402160:	f06f 0005 	mvnne.w	r0, #5
  402164:	bd08      	pop	{r3, pc}
  402166:	bf00      	nop
  402168:	00402031 	.word	0x00402031

0040216c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  40216c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  40216e:	4b04      	ldr	r3, [pc, #16]	; (402180 <nm_spi_write_reg+0x14>)
  402170:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  402172:	2801      	cmp	r0, #1

	return s8Ret;
}
  402174:	bf0c      	ite	eq
  402176:	2000      	moveq	r0, #0
  402178:	f06f 0005 	mvnne.w	r0, #5
  40217c:	bd08      	pop	{r3, pc}
  40217e:	bf00      	nop
  402180:	00401f99 	.word	0x00401f99

00402184 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  402184:	b530      	push	{r4, r5, lr}
  402186:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  402188:	2300      	movs	r3, #0
  40218a:	a902      	add	r1, sp, #8
  40218c:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  402190:	4a32      	ldr	r2, [pc, #200]	; (40225c <nm_spi_init+0xd8>)
  402192:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  402194:	f64e 0024 	movw	r0, #59428	; 0xe824
  402198:	4b31      	ldr	r3, [pc, #196]	; (402260 <nm_spi_init+0xdc>)
  40219a:	4798      	blx	r3
  40219c:	b9f0      	cbnz	r0, 4021dc <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  40219e:	2201      	movs	r2, #1
  4021a0:	4b2e      	ldr	r3, [pc, #184]	; (40225c <nm_spi_init+0xd8>)
  4021a2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4021a4:	f240 22c5 	movw	r2, #709	; 0x2c5
  4021a8:	492e      	ldr	r1, [pc, #184]	; (402264 <nm_spi_init+0xe0>)
  4021aa:	482f      	ldr	r0, [pc, #188]	; (402268 <nm_spi_init+0xe4>)
  4021ac:	4c2f      	ldr	r4, [pc, #188]	; (40226c <nm_spi_init+0xe8>)
  4021ae:	47a0      	blx	r4
  4021b0:	482f      	ldr	r0, [pc, #188]	; (402270 <nm_spi_init+0xec>)
  4021b2:	47a0      	blx	r4
  4021b4:	482f      	ldr	r0, [pc, #188]	; (402274 <nm_spi_init+0xf0>)
  4021b6:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4021b8:	4669      	mov	r1, sp
  4021ba:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021be:	4b28      	ldr	r3, [pc, #160]	; (402260 <nm_spi_init+0xdc>)
  4021c0:	4798      	blx	r3
  4021c2:	4604      	mov	r4, r0
  4021c4:	b950      	cbnz	r0, 4021dc <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4021c6:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4021ca:	4926      	ldr	r1, [pc, #152]	; (402264 <nm_spi_init+0xe0>)
  4021cc:	4826      	ldr	r0, [pc, #152]	; (402268 <nm_spi_init+0xe4>)
  4021ce:	4d27      	ldr	r5, [pc, #156]	; (40226c <nm_spi_init+0xe8>)
  4021d0:	47a8      	blx	r5
  4021d2:	4829      	ldr	r0, [pc, #164]	; (402278 <nm_spi_init+0xf4>)
  4021d4:	47a8      	blx	r5
  4021d6:	4827      	ldr	r0, [pc, #156]	; (402274 <nm_spi_init+0xf0>)
  4021d8:	47a8      	blx	r5
			return 0;
  4021da:	e03c      	b.n	402256 <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  4021dc:	4b1f      	ldr	r3, [pc, #124]	; (40225c <nm_spi_init+0xd8>)
  4021de:	781b      	ldrb	r3, [r3, #0]
  4021e0:	b9cb      	cbnz	r3, 402216 <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  4021e2:	9900      	ldr	r1, [sp, #0]
  4021e4:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  4021e8:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4021ec:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  4021ee:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021f2:	4b22      	ldr	r3, [pc, #136]	; (40227c <nm_spi_init+0xf8>)
  4021f4:	4798      	blx	r3
  4021f6:	4604      	mov	r4, r0
  4021f8:	b950      	cbnz	r0, 402210 <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4021fa:	f240 22d2 	movw	r2, #722	; 0x2d2
  4021fe:	4919      	ldr	r1, [pc, #100]	; (402264 <nm_spi_init+0xe0>)
  402200:	4819      	ldr	r0, [pc, #100]	; (402268 <nm_spi_init+0xe4>)
  402202:	4d1a      	ldr	r5, [pc, #104]	; (40226c <nm_spi_init+0xe8>)
  402204:	47a8      	blx	r5
  402206:	481e      	ldr	r0, [pc, #120]	; (402280 <nm_spi_init+0xfc>)
  402208:	47a8      	blx	r5
  40220a:	481a      	ldr	r0, [pc, #104]	; (402274 <nm_spi_init+0xf0>)
  40220c:	47a8      	blx	r5
			return 0;
  40220e:	e022      	b.n	402256 <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  402210:	2201      	movs	r2, #1
  402212:	4b12      	ldr	r3, [pc, #72]	; (40225c <nm_spi_init+0xd8>)
  402214:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  402216:	a901      	add	r1, sp, #4
  402218:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40221c:	4b10      	ldr	r3, [pc, #64]	; (402260 <nm_spi_init+0xdc>)
  40221e:	4798      	blx	r3
  402220:	b960      	cbnz	r0, 40223c <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  402222:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  402226:	490f      	ldr	r1, [pc, #60]	; (402264 <nm_spi_init+0xe0>)
  402228:	480f      	ldr	r0, [pc, #60]	; (402268 <nm_spi_init+0xe4>)
  40222a:	4c10      	ldr	r4, [pc, #64]	; (40226c <nm_spi_init+0xe8>)
  40222c:	47a0      	blx	r4
  40222e:	4815      	ldr	r0, [pc, #84]	; (402284 <nm_spi_init+0x100>)
  402230:	47a0      	blx	r4
  402232:	4810      	ldr	r0, [pc, #64]	; (402274 <nm_spi_init+0xf0>)
  402234:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  402236:	f06f 0405 	mvn.w	r4, #5
  40223a:	e00c      	b.n	402256 <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  40223c:	f64e 0024 	movw	r0, #59428	; 0xe824
  402240:	4b11      	ldr	r3, [pc, #68]	; (402288 <nm_spi_init+0x104>)
  402242:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  402244:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  402248:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  40224c:	f64e 0024 	movw	r0, #59428	; 0xe824
  402250:	4b0e      	ldr	r3, [pc, #56]	; (40228c <nm_spi_init+0x108>)
  402252:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  402254:	2400      	movs	r4, #0
}
  402256:	4620      	mov	r0, r4
  402258:	b003      	add	sp, #12
  40225a:	bd30      	pop	{r4, r5, pc}
  40225c:	204008d8 	.word	0x204008d8
  402260:	00402031 	.word	0x00402031
  402264:	00407100 	.word	0x00407100
  402268:	004067d0 	.word	0x004067d0
  40226c:	00403775 	.word	0x00403775
  402270:	0040733c 	.word	0x0040733c
  402274:	004067fc 	.word	0x004067fc
  402278:	0040738c 	.word	0x0040738c
  40227c:	00401f99 	.word	0x00401f99
  402280:	004073bc 	.word	0x004073bc
  402284:	004073f0 	.word	0x004073f0
  402288:	0040213d 	.word	0x0040213d
  40228c:	0040216d 	.word	0x0040216d

00402290 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402290:	b5f0      	push	{r4, r5, r6, r7, lr}
  402292:	b083      	sub	sp, #12
  402294:	4604      	mov	r4, r0
  402296:	460f      	mov	r7, r1
  402298:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  40229a:	2200      	movs	r2, #0
  40229c:	9200      	str	r2, [sp, #0]
  40229e:	462b      	mov	r3, r5
  4022a0:	4601      	mov	r1, r0
  4022a2:	20c8      	movs	r0, #200	; 0xc8
  4022a4:	4e23      	ldr	r6, [pc, #140]	; (402334 <nm_spi_read_block+0xa4>)
  4022a6:	47b0      	blx	r6
	if (result != N_OK) {
  4022a8:	2801      	cmp	r0, #1
  4022aa:	d00b      	beq.n	4022c4 <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4022ac:	f44f 721d 	mov.w	r2, #628	; 0x274
  4022b0:	4921      	ldr	r1, [pc, #132]	; (402338 <nm_spi_read_block+0xa8>)
  4022b2:	4822      	ldr	r0, [pc, #136]	; (40233c <nm_spi_read_block+0xac>)
  4022b4:	4d22      	ldr	r5, [pc, #136]	; (402340 <nm_spi_read_block+0xb0>)
  4022b6:	47a8      	blx	r5
  4022b8:	4621      	mov	r1, r4
  4022ba:	4822      	ldr	r0, [pc, #136]	; (402344 <nm_spi_read_block+0xb4>)
  4022bc:	47a8      	blx	r5
  4022be:	4822      	ldr	r0, [pc, #136]	; (402348 <nm_spi_read_block+0xb8>)
  4022c0:	47a8      	blx	r5
  4022c2:	e032      	b.n	40232a <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  4022c4:	20c8      	movs	r0, #200	; 0xc8
  4022c6:	4b21      	ldr	r3, [pc, #132]	; (40234c <nm_spi_read_block+0xbc>)
  4022c8:	4798      	blx	r3
	if (result != N_OK) {
  4022ca:	2801      	cmp	r0, #1
  4022cc:	d012      	beq.n	4022f4 <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  4022ce:	f240 227a 	movw	r2, #634	; 0x27a
  4022d2:	4919      	ldr	r1, [pc, #100]	; (402338 <nm_spi_read_block+0xa8>)
  4022d4:	4819      	ldr	r0, [pc, #100]	; (40233c <nm_spi_read_block+0xac>)
  4022d6:	4d1a      	ldr	r5, [pc, #104]	; (402340 <nm_spi_read_block+0xb0>)
  4022d8:	47a8      	blx	r5
  4022da:	4621      	mov	r1, r4
  4022dc:	481c      	ldr	r0, [pc, #112]	; (402350 <nm_spi_read_block+0xc0>)
  4022de:	47a8      	blx	r5
  4022e0:	4819      	ldr	r0, [pc, #100]	; (402348 <nm_spi_read_block+0xb8>)
  4022e2:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4022e4:	2100      	movs	r1, #0
  4022e6:	9100      	str	r1, [sp, #0]
  4022e8:	460b      	mov	r3, r1
  4022ea:	460a      	mov	r2, r1
  4022ec:	20cf      	movs	r0, #207	; 0xcf
  4022ee:	4c11      	ldr	r4, [pc, #68]	; (402334 <nm_spi_read_block+0xa4>)
  4022f0:	47a0      	blx	r4
  4022f2:	e01a      	b.n	40232a <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  4022f4:	2200      	movs	r2, #0
  4022f6:	4629      	mov	r1, r5
  4022f8:	4638      	mov	r0, r7
  4022fa:	4b16      	ldr	r3, [pc, #88]	; (402354 <nm_spi_read_block+0xc4>)
  4022fc:	4798      	blx	r3
	if (result != N_OK) {
  4022fe:	2801      	cmp	r0, #1
  402300:	d011      	beq.n	402326 <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  402302:	f44f 7221 	mov.w	r2, #644	; 0x284
  402306:	490c      	ldr	r1, [pc, #48]	; (402338 <nm_spi_read_block+0xa8>)
  402308:	480c      	ldr	r0, [pc, #48]	; (40233c <nm_spi_read_block+0xac>)
  40230a:	4c0d      	ldr	r4, [pc, #52]	; (402340 <nm_spi_read_block+0xb0>)
  40230c:	47a0      	blx	r4
  40230e:	4812      	ldr	r0, [pc, #72]	; (402358 <nm_spi_read_block+0xc8>)
  402310:	47a0      	blx	r4
  402312:	480d      	ldr	r0, [pc, #52]	; (402348 <nm_spi_read_block+0xb8>)
  402314:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402316:	2100      	movs	r1, #0
  402318:	9100      	str	r1, [sp, #0]
  40231a:	460b      	mov	r3, r1
  40231c:	460a      	mov	r2, r1
  40231e:	20cf      	movs	r0, #207	; 0xcf
  402320:	4c04      	ldr	r4, [pc, #16]	; (402334 <nm_spi_read_block+0xa4>)
  402322:	47a0      	blx	r4
  402324:	e001      	b.n	40232a <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402326:	2000      	movs	r0, #0
  402328:	e001      	b.n	40232e <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  40232a:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40232e:	b003      	add	sp, #12
  402330:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402332:	bf00      	nop
  402334:	00401de5 	.word	0x00401de5
  402338:	0040711c 	.word	0x0040711c
  40233c:	004067d0 	.word	0x004067d0
  402340:	00403775 	.word	0x00403775
  402344:	00407418 	.word	0x00407418
  402348:	004067fc 	.word	0x004067fc
  40234c:	00401bf9 	.word	0x00401bf9
  402350:	00407448 	.word	0x00407448
  402354:	00401cb5 	.word	0x00401cb5
  402358:	00407480 	.word	0x00407480

0040235c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40235c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402360:	b085      	sub	sp, #20
  402362:	4604      	mov	r4, r0
  402364:	4688      	mov	r8, r1
  402366:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  402368:	2200      	movs	r2, #0
  40236a:	9200      	str	r2, [sp, #0]
  40236c:	462b      	mov	r3, r5
  40236e:	4601      	mov	r1, r0
  402370:	20c7      	movs	r0, #199	; 0xc7
  402372:	4e4c      	ldr	r6, [pc, #304]	; (4024a4 <nm_spi_write_block+0x148>)
  402374:	47b0      	blx	r6
	if (result != N_OK) {
  402376:	2801      	cmp	r0, #1
  402378:	d00b      	beq.n	402392 <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40237a:	f240 220f 	movw	r2, #527	; 0x20f
  40237e:	494a      	ldr	r1, [pc, #296]	; (4024a8 <nm_spi_write_block+0x14c>)
  402380:	484a      	ldr	r0, [pc, #296]	; (4024ac <nm_spi_write_block+0x150>)
  402382:	4d4b      	ldr	r5, [pc, #300]	; (4024b0 <nm_spi_write_block+0x154>)
  402384:	47a8      	blx	r5
  402386:	4621      	mov	r1, r4
  402388:	484a      	ldr	r0, [pc, #296]	; (4024b4 <nm_spi_write_block+0x158>)
  40238a:	47a8      	blx	r5
  40238c:	484a      	ldr	r0, [pc, #296]	; (4024b8 <nm_spi_write_block+0x15c>)
  40238e:	47a8      	blx	r5
  402390:	e082      	b.n	402498 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  402392:	20c7      	movs	r0, #199	; 0xc7
  402394:	4b49      	ldr	r3, [pc, #292]	; (4024bc <nm_spi_write_block+0x160>)
  402396:	4798      	blx	r3
	if (result != N_OK) {
  402398:	2801      	cmp	r0, #1
  40239a:	d012      	beq.n	4023c2 <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  40239c:	f240 2215 	movw	r2, #533	; 0x215
  4023a0:	4941      	ldr	r1, [pc, #260]	; (4024a8 <nm_spi_write_block+0x14c>)
  4023a2:	4842      	ldr	r0, [pc, #264]	; (4024ac <nm_spi_write_block+0x150>)
  4023a4:	4d42      	ldr	r5, [pc, #264]	; (4024b0 <nm_spi_write_block+0x154>)
  4023a6:	47a8      	blx	r5
  4023a8:	4621      	mov	r1, r4
  4023aa:	4845      	ldr	r0, [pc, #276]	; (4024c0 <nm_spi_write_block+0x164>)
  4023ac:	47a8      	blx	r5
  4023ae:	4842      	ldr	r0, [pc, #264]	; (4024b8 <nm_spi_write_block+0x15c>)
  4023b0:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4023b2:	2100      	movs	r1, #0
  4023b4:	9100      	str	r1, [sp, #0]
  4023b6:	460b      	mov	r3, r1
  4023b8:	460a      	mov	r2, r1
  4023ba:	20cf      	movs	r0, #207	; 0xcf
  4023bc:	4c39      	ldr	r4, [pc, #228]	; (4024a4 <nm_spi_write_block+0x148>)
  4023be:	47a0      	blx	r4
  4023c0:	e06a      	b.n	402498 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  4023c2:	2400      	movs	r4, #0
  4023c4:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4023c8:	4f3e      	ldr	r7, [pc, #248]	; (4024c4 <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4023ca:	f8df 9110 	ldr.w	r9, [pc, #272]	; 4024dc <nm_spi_write_block+0x180>
  4023ce:	462e      	mov	r6, r5
  4023d0:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4023d4:	bf28      	it	cs
  4023d6:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  4023da:	b92c      	cbnz	r4, 4023e8 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  4023dc:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4023e0:	bf94      	ite	ls
  4023e2:	2303      	movls	r3, #3
  4023e4:	2301      	movhi	r3, #1
  4023e6:	e004      	b.n	4023f2 <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  4023e8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4023ec:	bf94      	ite	ls
  4023ee:	2303      	movls	r3, #3
  4023f0:	2302      	movhi	r3, #2
		}
		cmd |= order;
  4023f2:	f063 030f 	orn	r3, r3, #15
  4023f6:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4023fa:	2101      	movs	r1, #1
  4023fc:	f10d 000b 	add.w	r0, sp, #11
  402400:	47b8      	blx	r7
  402402:	b150      	cbz	r0, 40241a <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  402404:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402408:	492f      	ldr	r1, [pc, #188]	; (4024c8 <nm_spi_write_block+0x16c>)
  40240a:	4828      	ldr	r0, [pc, #160]	; (4024ac <nm_spi_write_block+0x150>)
  40240c:	4c28      	ldr	r4, [pc, #160]	; (4024b0 <nm_spi_write_block+0x154>)
  40240e:	47a0      	blx	r4
  402410:	482e      	ldr	r0, [pc, #184]	; (4024cc <nm_spi_write_block+0x170>)
  402412:	47a0      	blx	r4
  402414:	4828      	ldr	r0, [pc, #160]	; (4024b8 <nm_spi_write_block+0x15c>)
  402416:	47a0      	blx	r4
  402418:	e028      	b.n	40246c <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  40241a:	4631      	mov	r1, r6
  40241c:	eb08 0004 	add.w	r0, r8, r4
  402420:	47b8      	blx	r7
  402422:	b150      	cbz	r0, 40243a <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  402424:	f240 12b1 	movw	r2, #433	; 0x1b1
  402428:	4927      	ldr	r1, [pc, #156]	; (4024c8 <nm_spi_write_block+0x16c>)
  40242a:	4820      	ldr	r0, [pc, #128]	; (4024ac <nm_spi_write_block+0x150>)
  40242c:	4c20      	ldr	r4, [pc, #128]	; (4024b0 <nm_spi_write_block+0x154>)
  40242e:	47a0      	blx	r4
  402430:	4827      	ldr	r0, [pc, #156]	; (4024d0 <nm_spi_write_block+0x174>)
  402432:	47a0      	blx	r4
  402434:	4820      	ldr	r0, [pc, #128]	; (4024b8 <nm_spi_write_block+0x15c>)
  402436:	47a0      	blx	r4
  402438:	e018      	b.n	40246c <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  40243a:	f899 3000 	ldrb.w	r3, [r9]
  40243e:	b973      	cbnz	r3, 40245e <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  402440:	2102      	movs	r1, #2
  402442:	a803      	add	r0, sp, #12
  402444:	47b8      	blx	r7
  402446:	b150      	cbz	r0, 40245e <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  402448:	f240 12bb 	movw	r2, #443	; 0x1bb
  40244c:	491e      	ldr	r1, [pc, #120]	; (4024c8 <nm_spi_write_block+0x16c>)
  40244e:	4817      	ldr	r0, [pc, #92]	; (4024ac <nm_spi_write_block+0x150>)
  402450:	4c17      	ldr	r4, [pc, #92]	; (4024b0 <nm_spi_write_block+0x154>)
  402452:	47a0      	blx	r4
  402454:	481f      	ldr	r0, [pc, #124]	; (4024d4 <nm_spi_write_block+0x178>)
  402456:	47a0      	blx	r4
  402458:	4817      	ldr	r0, [pc, #92]	; (4024b8 <nm_spi_write_block+0x15c>)
  40245a:	47a0      	blx	r4
  40245c:	e006      	b.n	40246c <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  40245e:	4434      	add	r4, r6
  402460:	b224      	sxth	r4, r4
		sz -= nbytes;
  402462:	1bad      	subs	r5, r5, r6
  402464:	b2ad      	uxth	r5, r5
	} while (sz);
  402466:	2d00      	cmp	r5, #0
  402468:	d1b1      	bne.n	4023ce <nm_spi_write_block+0x72>
  40246a:	e013      	b.n	402494 <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  40246c:	f240 2226 	movw	r2, #550	; 0x226
  402470:	490d      	ldr	r1, [pc, #52]	; (4024a8 <nm_spi_write_block+0x14c>)
  402472:	480e      	ldr	r0, [pc, #56]	; (4024ac <nm_spi_write_block+0x150>)
  402474:	4c0e      	ldr	r4, [pc, #56]	; (4024b0 <nm_spi_write_block+0x154>)
  402476:	47a0      	blx	r4
  402478:	4817      	ldr	r0, [pc, #92]	; (4024d8 <nm_spi_write_block+0x17c>)
  40247a:	47a0      	blx	r4
  40247c:	480e      	ldr	r0, [pc, #56]	; (4024b8 <nm_spi_write_block+0x15c>)
  40247e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402480:	2400      	movs	r4, #0
  402482:	9400      	str	r4, [sp, #0]
  402484:	4623      	mov	r3, r4
  402486:	4622      	mov	r2, r4
  402488:	4621      	mov	r1, r4
  40248a:	20cf      	movs	r0, #207	; 0xcf
  40248c:	4d05      	ldr	r5, [pc, #20]	; (4024a4 <nm_spi_write_block+0x148>)
  40248e:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402490:	4620      	mov	r0, r4
  402492:	e003      	b.n	40249c <nm_spi_write_block+0x140>
  402494:	2000      	movs	r0, #0
  402496:	e001      	b.n	40249c <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  402498:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40249c:	b005      	add	sp, #20
  40249e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4024a2:	bf00      	nop
  4024a4:	00401de5 	.word	0x00401de5
  4024a8:	004075f4 	.word	0x004075f4
  4024ac:	004067d0 	.word	0x004067d0
  4024b0:	00403775 	.word	0x00403775
  4024b4:	004074a8 	.word	0x004074a8
  4024b8:	004067fc 	.word	0x004067fc
  4024bc:	00401bf9 	.word	0x00401bf9
  4024c0:	004074d8 	.word	0x004074d8
  4024c4:	00401dc5 	.word	0x00401dc5
  4024c8:	0040710c 	.word	0x0040710c
  4024cc:	00407510 	.word	0x00407510
  4024d0:	00407548 	.word	0x00407548
  4024d4:	0040757c 	.word	0x0040757c
  4024d8:	004075b4 	.word	0x004075b4
  4024dc:	204008d8 	.word	0x204008d8

004024e0 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  4024e0:	b570      	push	{r4, r5, r6, lr}
  4024e2:	b082      	sub	sp, #8
  4024e4:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  4024e6:	4b2b      	ldr	r3, [pc, #172]	; (402594 <spi_flash_enable+0xb4>)
  4024e8:	4798      	blx	r3
  4024ea:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4024ee:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  4024f2:	d34a      	bcc.n	40258a <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  4024f4:	a901      	add	r1, sp, #4
  4024f6:	f241 4010 	movw	r0, #5136	; 0x1410
  4024fa:	4b27      	ldr	r3, [pc, #156]	; (402598 <spi_flash_enable+0xb8>)
  4024fc:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  4024fe:	4604      	mov	r4, r0
  402500:	2800      	cmp	r0, #0
  402502:	d143      	bne.n	40258c <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  402504:	4b25      	ldr	r3, [pc, #148]	; (40259c <spi_flash_enable+0xbc>)
  402506:	9a01      	ldr	r2, [sp, #4]
  402508:	4013      	ands	r3, r2
  40250a:	4925      	ldr	r1, [pc, #148]	; (4025a0 <spi_flash_enable+0xc0>)
  40250c:	4319      	orrs	r1, r3
  40250e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402510:	f241 4010 	movw	r0, #5136	; 0x1410
  402514:	4b23      	ldr	r3, [pc, #140]	; (4025a4 <spi_flash_enable+0xc4>)
  402516:	4798      	blx	r3
		if(enable) {
  402518:	b1b5      	cbz	r5, 402548 <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  40251a:	2100      	movs	r1, #0
  40251c:	4822      	ldr	r0, [pc, #136]	; (4025a8 <spi_flash_enable+0xc8>)
  40251e:	4d21      	ldr	r5, [pc, #132]	; (4025a4 <spi_flash_enable+0xc4>)
  402520:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402522:	21ab      	movs	r1, #171	; 0xab
  402524:	4821      	ldr	r0, [pc, #132]	; (4025ac <spi_flash_enable+0xcc>)
  402526:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402528:	2101      	movs	r1, #1
  40252a:	4821      	ldr	r0, [pc, #132]	; (4025b0 <spi_flash_enable+0xd0>)
  40252c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  40252e:	2100      	movs	r1, #0
  402530:	4820      	ldr	r0, [pc, #128]	; (4025b4 <spi_flash_enable+0xd4>)
  402532:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  402534:	2181      	movs	r1, #129	; 0x81
  402536:	4820      	ldr	r0, [pc, #128]	; (4025b8 <spi_flash_enable+0xd8>)
  402538:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  40253a:	4e20      	ldr	r6, [pc, #128]	; (4025bc <spi_flash_enable+0xdc>)
  40253c:	4d20      	ldr	r5, [pc, #128]	; (4025c0 <spi_flash_enable+0xe0>)
  40253e:	4630      	mov	r0, r6
  402540:	47a8      	blx	r5
  402542:	2801      	cmp	r0, #1
  402544:	d1fb      	bne.n	40253e <spi_flash_enable+0x5e>
  402546:	e015      	b.n	402574 <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402548:	2100      	movs	r1, #0
  40254a:	4817      	ldr	r0, [pc, #92]	; (4025a8 <spi_flash_enable+0xc8>)
  40254c:	4d15      	ldr	r5, [pc, #84]	; (4025a4 <spi_flash_enable+0xc4>)
  40254e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402550:	21b9      	movs	r1, #185	; 0xb9
  402552:	4816      	ldr	r0, [pc, #88]	; (4025ac <spi_flash_enable+0xcc>)
  402554:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402556:	2101      	movs	r1, #1
  402558:	4815      	ldr	r0, [pc, #84]	; (4025b0 <spi_flash_enable+0xd0>)
  40255a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  40255c:	2100      	movs	r1, #0
  40255e:	4815      	ldr	r0, [pc, #84]	; (4025b4 <spi_flash_enable+0xd4>)
  402560:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  402562:	2181      	movs	r1, #129	; 0x81
  402564:	4814      	ldr	r0, [pc, #80]	; (4025b8 <spi_flash_enable+0xd8>)
  402566:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402568:	4e14      	ldr	r6, [pc, #80]	; (4025bc <spi_flash_enable+0xdc>)
  40256a:	4d15      	ldr	r5, [pc, #84]	; (4025c0 <spi_flash_enable+0xe0>)
  40256c:	4630      	mov	r0, r6
  40256e:	47a8      	blx	r5
  402570:	2801      	cmp	r0, #1
  402572:	d1fb      	bne.n	40256c <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  402574:	4909      	ldr	r1, [pc, #36]	; (40259c <spi_flash_enable+0xbc>)
  402576:	9b01      	ldr	r3, [sp, #4]
  402578:	4019      	ands	r1, r3
  40257a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40257e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402580:	f241 4010 	movw	r0, #5136	; 0x1410
  402584:	4b07      	ldr	r3, [pc, #28]	; (4025a4 <spi_flash_enable+0xc4>)
  402586:	4798      	blx	r3
  402588:	e000      	b.n	40258c <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  40258a:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  40258c:	4620      	mov	r0, r4
  40258e:	b002      	add	sp, #8
  402590:	bd70      	pop	{r4, r5, r6, pc}
  402592:	bf00      	nop
  402594:	00401601 	.word	0x00401601
  402598:	004018f9 	.word	0x004018f9
  40259c:	f8888fff 	.word	0xf8888fff
  4025a0:	01111000 	.word	0x01111000
  4025a4:	00401905 	.word	0x00401905
  4025a8:	00010208 	.word	0x00010208
  4025ac:	0001020c 	.word	0x0001020c
  4025b0:	00010214 	.word	0x00010214
  4025b4:	0001021c 	.word	0x0001021c
  4025b8:	00010204 	.word	0x00010204
  4025bc:	00010218 	.word	0x00010218
  4025c0:	004018ed 	.word	0x004018ed

004025c4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4025c4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4025c6:	4810      	ldr	r0, [pc, #64]	; (402608 <sysclk_init+0x44>)
  4025c8:	4b10      	ldr	r3, [pc, #64]	; (40260c <sysclk_init+0x48>)
  4025ca:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4025cc:	213e      	movs	r1, #62	; 0x3e
  4025ce:	2000      	movs	r0, #0
  4025d0:	4b0f      	ldr	r3, [pc, #60]	; (402610 <sysclk_init+0x4c>)
  4025d2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4025d4:	4c0f      	ldr	r4, [pc, #60]	; (402614 <sysclk_init+0x50>)
  4025d6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4025d8:	2800      	cmp	r0, #0
  4025da:	d0fc      	beq.n	4025d6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4025dc:	4b0e      	ldr	r3, [pc, #56]	; (402618 <sysclk_init+0x54>)
  4025de:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4025e0:	4a0e      	ldr	r2, [pc, #56]	; (40261c <sysclk_init+0x58>)
  4025e2:	4b0f      	ldr	r3, [pc, #60]	; (402620 <sysclk_init+0x5c>)
  4025e4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4025e6:	4c0f      	ldr	r4, [pc, #60]	; (402624 <sysclk_init+0x60>)
  4025e8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4025ea:	2800      	cmp	r0, #0
  4025ec:	d0fc      	beq.n	4025e8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4025ee:	2002      	movs	r0, #2
  4025f0:	4b0d      	ldr	r3, [pc, #52]	; (402628 <sysclk_init+0x64>)
  4025f2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4025f4:	2000      	movs	r0, #0
  4025f6:	4b0d      	ldr	r3, [pc, #52]	; (40262c <sysclk_init+0x68>)
  4025f8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4025fa:	4b0d      	ldr	r3, [pc, #52]	; (402630 <sysclk_init+0x6c>)
  4025fc:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4025fe:	4802      	ldr	r0, [pc, #8]	; (402608 <sysclk_init+0x44>)
  402600:	4b02      	ldr	r3, [pc, #8]	; (40260c <sysclk_init+0x48>)
  402602:	4798      	blx	r3
  402604:	bd10      	pop	{r4, pc}
  402606:	bf00      	nop
  402608:	11e1a300 	.word	0x11e1a300
  40260c:	00403279 	.word	0x00403279
  402610:	00402d05 	.word	0x00402d05
  402614:	00402d59 	.word	0x00402d59
  402618:	00402d69 	.word	0x00402d69
  40261c:	20183f01 	.word	0x20183f01
  402620:	400e0600 	.word	0x400e0600
  402624:	00402d79 	.word	0x00402d79
  402628:	00402c61 	.word	0x00402c61
  40262c:	00402c9d 	.word	0x00402c9d
  402630:	00403169 	.word	0x00403169

00402634 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  402634:	b990      	cbnz	r0, 40265c <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  402636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40263a:	460c      	mov	r4, r1
  40263c:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40263e:	2a00      	cmp	r2, #0
  402640:	dd0f      	ble.n	402662 <_read+0x2e>
  402642:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  402644:	4e08      	ldr	r6, [pc, #32]	; (402668 <_read+0x34>)
  402646:	4d09      	ldr	r5, [pc, #36]	; (40266c <_read+0x38>)
  402648:	6830      	ldr	r0, [r6, #0]
  40264a:	4621      	mov	r1, r4
  40264c:	682b      	ldr	r3, [r5, #0]
  40264e:	4798      	blx	r3
		ptr++;
  402650:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402652:	42a7      	cmp	r7, r4
  402654:	d1f8      	bne.n	402648 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  402656:	4640      	mov	r0, r8
  402658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  40265c:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  402660:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402662:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  402664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402668:	20400998 	.word	0x20400998
  40266c:	20400990 	.word	0x20400990

00402670 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  402670:	3801      	subs	r0, #1
  402672:	2802      	cmp	r0, #2
  402674:	d815      	bhi.n	4026a2 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  402676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40267a:	460e      	mov	r6, r1
  40267c:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40267e:	b19a      	cbz	r2, 4026a8 <_write+0x38>
  402680:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  402682:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4026bc <_write+0x4c>
  402686:	4f0c      	ldr	r7, [pc, #48]	; (4026b8 <_write+0x48>)
  402688:	f8d8 0000 	ldr.w	r0, [r8]
  40268c:	f815 1b01 	ldrb.w	r1, [r5], #1
  402690:	683b      	ldr	r3, [r7, #0]
  402692:	4798      	blx	r3
  402694:	2800      	cmp	r0, #0
  402696:	db0a      	blt.n	4026ae <_write+0x3e>
  402698:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40269a:	3c01      	subs	r4, #1
  40269c:	d1f4      	bne.n	402688 <_write+0x18>
  40269e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4026a2:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4026a6:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4026a8:	2000      	movs	r0, #0
  4026aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4026ae:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4026b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4026b6:	bf00      	nop
  4026b8:	20400994 	.word	0x20400994
  4026bc:	20400998 	.word	0x20400998

004026c0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4026c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4026c6:	4b57      	ldr	r3, [pc, #348]	; (402824 <board_init+0x164>)
  4026c8:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4026ca:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4026ce:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4026d2:	4b55      	ldr	r3, [pc, #340]	; (402828 <board_init+0x168>)
  4026d4:	2200      	movs	r2, #0
  4026d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4026da:	695a      	ldr	r2, [r3, #20]
  4026dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4026e0:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4026e2:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4026e6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4026ea:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4026ee:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4026f2:	f006 0707 	and.w	r7, r6, #7
  4026f6:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4026f8:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4026fc:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  402700:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402704:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  402708:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  40270a:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40270c:	fa05 f107 	lsl.w	r1, r5, r7
  402710:	fa03 f200 	lsl.w	r2, r3, r0
  402714:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  402716:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  40271a:	3b01      	subs	r3, #1
  40271c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402720:	d1f6      	bne.n	402710 <board_init+0x50>
        } while(sets--);
  402722:	3d01      	subs	r5, #1
  402724:	f1b5 3fff 	cmp.w	r5, #4294967295
  402728:	d1ef      	bne.n	40270a <board_init+0x4a>
  40272a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40272e:	4b3e      	ldr	r3, [pc, #248]	; (402828 <board_init+0x168>)
  402730:	695a      	ldr	r2, [r3, #20]
  402732:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  402736:	615a      	str	r2, [r3, #20]
  402738:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40273c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402740:	4a3a      	ldr	r2, [pc, #232]	; (40282c <board_init+0x16c>)
  402742:	493b      	ldr	r1, [pc, #236]	; (402830 <board_init+0x170>)
  402744:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402746:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40274a:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40274c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402750:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402754:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  402758:	f022 0201 	bic.w	r2, r2, #1
  40275c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402760:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  402764:	f022 0201 	bic.w	r2, r2, #1
  402768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40276c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402770:	f3bf 8f6f 	isb	sy
  402774:	200a      	movs	r0, #10
  402776:	4c2f      	ldr	r4, [pc, #188]	; (402834 <board_init+0x174>)
  402778:	47a0      	blx	r4
  40277a:	200b      	movs	r0, #11
  40277c:	47a0      	blx	r4
  40277e:	200c      	movs	r0, #12
  402780:	47a0      	blx	r4
  402782:	2010      	movs	r0, #16
  402784:	47a0      	blx	r4
  402786:	2011      	movs	r0, #17
  402788:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40278a:	4b2b      	ldr	r3, [pc, #172]	; (402838 <board_init+0x178>)
  40278c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402790:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402792:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402796:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402798:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40279c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4027a0:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4027a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4027a6:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4027a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4027ac:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  4027ae:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4027b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4027b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4027b6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4027ba:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4027bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4027be:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4027c2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4027c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4027c8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4027cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4027d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4027d4:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4027d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4027da:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4027dc:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4027de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4027e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4027e4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4027e8:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4027ea:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4027ec:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4027f0:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027f2:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4027f4:	4a11      	ldr	r2, [pc, #68]	; (40283c <board_init+0x17c>)
  4027f6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4027fa:	f043 0310 	orr.w	r3, r3, #16
  4027fe:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402802:	4b0f      	ldr	r3, [pc, #60]	; (402840 <board_init+0x180>)
  402804:	2210      	movs	r2, #16
  402806:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402808:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40280c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40280e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  402814:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402816:	4311      	orrs	r1, r2
  402818:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  40281a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40281c:	4311      	orrs	r1, r2
  40281e:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402820:	605a      	str	r2, [r3, #4]
  402822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402824:	400e1850 	.word	0x400e1850
  402828:	e000ed00 	.word	0xe000ed00
  40282c:	400e0c00 	.word	0x400e0c00
  402830:	5a00080c 	.word	0x5a00080c
  402834:	00402d89 	.word	0x00402d89
  402838:	400e1200 	.word	0x400e1200
  40283c:	40088000 	.word	0x40088000
  402840:	400e1000 	.word	0x400e1000

00402844 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402844:	b10a      	cbz	r2, 40284a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  402846:	6641      	str	r1, [r0, #100]	; 0x64
  402848:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40284a:	6601      	str	r1, [r0, #96]	; 0x60
  40284c:	4770      	bx	lr
  40284e:	bf00      	nop

00402850 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402850:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402852:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402856:	d02f      	beq.n	4028b8 <pio_set_peripheral+0x68>
  402858:	d807      	bhi.n	40286a <pio_set_peripheral+0x1a>
  40285a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40285e:	d014      	beq.n	40288a <pio_set_peripheral+0x3a>
  402860:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402864:	d01e      	beq.n	4028a4 <pio_set_peripheral+0x54>
  402866:	b939      	cbnz	r1, 402878 <pio_set_peripheral+0x28>
  402868:	4770      	bx	lr
  40286a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40286e:	d037      	beq.n	4028e0 <pio_set_peripheral+0x90>
  402870:	d804      	bhi.n	40287c <pio_set_peripheral+0x2c>
  402872:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402876:	d029      	beq.n	4028cc <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402878:	6042      	str	r2, [r0, #4]
  40287a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40287c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402880:	d02e      	beq.n	4028e0 <pio_set_peripheral+0x90>
  402882:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402886:	d02b      	beq.n	4028e0 <pio_set_peripheral+0x90>
  402888:	e7f6      	b.n	402878 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40288a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40288c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40288e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402890:	43d3      	mvns	r3, r2
  402892:	4021      	ands	r1, r4
  402894:	4019      	ands	r1, r3
  402896:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402898:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40289a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40289c:	4021      	ands	r1, r4
  40289e:	400b      	ands	r3, r1
  4028a0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4028a2:	e01a      	b.n	4028da <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4028a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4028a6:	4313      	orrs	r3, r2
  4028a8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4028aa:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4028ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4028ae:	400b      	ands	r3, r1
  4028b0:	ea23 0302 	bic.w	r3, r3, r2
  4028b4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4028b6:	e7df      	b.n	402878 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4028b8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4028ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4028bc:	400b      	ands	r3, r1
  4028be:	ea23 0302 	bic.w	r3, r3, r2
  4028c2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4028c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4028c6:	4313      	orrs	r3, r2
  4028c8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4028ca:	e7d5      	b.n	402878 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4028cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4028ce:	4313      	orrs	r3, r2
  4028d0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4028d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4028d4:	4313      	orrs	r3, r2
  4028d6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4028d8:	e7ce      	b.n	402878 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4028da:	6042      	str	r2, [r0, #4]
}
  4028dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028e0:	4770      	bx	lr
  4028e2:	bf00      	nop

004028e4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4028e4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4028e6:	f012 0f01 	tst.w	r2, #1
  4028ea:	d001      	beq.n	4028f0 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  4028ec:	6641      	str	r1, [r0, #100]	; 0x64
  4028ee:	e000      	b.n	4028f2 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4028f0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4028f2:	f012 0f0a 	tst.w	r2, #10
  4028f6:	d001      	beq.n	4028fc <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  4028f8:	6201      	str	r1, [r0, #32]
  4028fa:	e000      	b.n	4028fe <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4028fc:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4028fe:	f012 0f02 	tst.w	r2, #2
  402902:	d002      	beq.n	40290a <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402904:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402908:	e004      	b.n	402914 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40290a:	f012 0f08 	tst.w	r2, #8
  40290e:	d001      	beq.n	402914 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402910:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402914:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402916:	6001      	str	r1, [r0, #0]
  402918:	4770      	bx	lr
  40291a:	bf00      	nop

0040291c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40291c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40291e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402920:	9c01      	ldr	r4, [sp, #4]
  402922:	b10c      	cbz	r4, 402928 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402924:	6641      	str	r1, [r0, #100]	; 0x64
  402926:	e000      	b.n	40292a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402928:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40292a:	b10b      	cbz	r3, 402930 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  40292c:	6501      	str	r1, [r0, #80]	; 0x50
  40292e:	e000      	b.n	402932 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402930:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402932:	b10a      	cbz	r2, 402938 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402934:	6301      	str	r1, [r0, #48]	; 0x30
  402936:	e000      	b.n	40293a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402938:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40293a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40293c:	6001      	str	r1, [r0, #0]
}
  40293e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402942:	4770      	bx	lr

00402944 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402944:	f012 0f10 	tst.w	r2, #16
  402948:	d012      	beq.n	402970 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40294a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40294e:	f012 0f20 	tst.w	r2, #32
  402952:	d002      	beq.n	40295a <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402954:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  402958:	e001      	b.n	40295e <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40295a:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40295e:	f012 0f40 	tst.w	r2, #64	; 0x40
  402962:	d002      	beq.n	40296a <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402964:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  402968:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40296a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40296e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402970:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402974:	4770      	bx	lr
  402976:	bf00      	nop

00402978 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  402978:	6401      	str	r1, [r0, #64]	; 0x40
  40297a:	4770      	bx	lr

0040297c <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40297c:	6441      	str	r1, [r0, #68]	; 0x44
  40297e:	4770      	bx	lr

00402980 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402980:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402982:	4770      	bx	lr

00402984 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402984:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402986:	4770      	bx	lr

00402988 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402988:	b570      	push	{r4, r5, r6, lr}
  40298a:	b082      	sub	sp, #8
  40298c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40298e:	4c47      	ldr	r4, [pc, #284]	; (402aac <pio_configure_pin+0x124>)
  402990:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  402994:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402996:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40299a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40299e:	d04d      	beq.n	402a3c <pio_configure_pin+0xb4>
  4029a0:	d809      	bhi.n	4029b6 <pio_configure_pin+0x2e>
  4029a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4029a6:	d023      	beq.n	4029f0 <pio_configure_pin+0x68>
  4029a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4029ac:	d033      	beq.n	402a16 <pio_configure_pin+0x8e>
  4029ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4029b2:	d177      	bne.n	402aa4 <pio_configure_pin+0x11c>
  4029b4:	e009      	b.n	4029ca <pio_configure_pin+0x42>
  4029b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4029ba:	d05d      	beq.n	402a78 <pio_configure_pin+0xf0>
  4029bc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4029c0:	d05a      	beq.n	402a78 <pio_configure_pin+0xf0>
  4029c2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4029c6:	d04c      	beq.n	402a62 <pio_configure_pin+0xda>
  4029c8:	e06c      	b.n	402aa4 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4029ca:	f000 001f 	and.w	r0, r0, #31
  4029ce:	2601      	movs	r6, #1
  4029d0:	4086      	lsls	r6, r0
  4029d2:	4632      	mov	r2, r6
  4029d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4029d8:	4620      	mov	r0, r4
  4029da:	4b35      	ldr	r3, [pc, #212]	; (402ab0 <pio_configure_pin+0x128>)
  4029dc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4029de:	f015 0f01 	tst.w	r5, #1
  4029e2:	d002      	beq.n	4029ea <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  4029e4:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4029e6:	2001      	movs	r0, #1
  4029e8:	e05d      	b.n	402aa6 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4029ea:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4029ec:	2001      	movs	r0, #1
  4029ee:	e05a      	b.n	402aa6 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4029f0:	f000 001f 	and.w	r0, r0, #31
  4029f4:	2601      	movs	r6, #1
  4029f6:	4086      	lsls	r6, r0
  4029f8:	4632      	mov	r2, r6
  4029fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4029fe:	4620      	mov	r0, r4
  402a00:	4b2b      	ldr	r3, [pc, #172]	; (402ab0 <pio_configure_pin+0x128>)
  402a02:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402a04:	f015 0f01 	tst.w	r5, #1
  402a08:	d002      	beq.n	402a10 <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  402a0a:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  402a0c:	2001      	movs	r0, #1
  402a0e:	e04a      	b.n	402aa6 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402a10:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402a12:	2001      	movs	r0, #1
  402a14:	e047      	b.n	402aa6 <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402a16:	f000 001f 	and.w	r0, r0, #31
  402a1a:	2601      	movs	r6, #1
  402a1c:	4086      	lsls	r6, r0
  402a1e:	4632      	mov	r2, r6
  402a20:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402a24:	4620      	mov	r0, r4
  402a26:	4b22      	ldr	r3, [pc, #136]	; (402ab0 <pio_configure_pin+0x128>)
  402a28:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402a2a:	f015 0f01 	tst.w	r5, #1
  402a2e:	d002      	beq.n	402a36 <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  402a30:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  402a32:	2001      	movs	r0, #1
  402a34:	e037      	b.n	402aa6 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402a36:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402a38:	2001      	movs	r0, #1
  402a3a:	e034      	b.n	402aa6 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402a3c:	f000 001f 	and.w	r0, r0, #31
  402a40:	2601      	movs	r6, #1
  402a42:	4086      	lsls	r6, r0
  402a44:	4632      	mov	r2, r6
  402a46:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402a4a:	4620      	mov	r0, r4
  402a4c:	4b18      	ldr	r3, [pc, #96]	; (402ab0 <pio_configure_pin+0x128>)
  402a4e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402a50:	f015 0f01 	tst.w	r5, #1
  402a54:	d002      	beq.n	402a5c <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  402a56:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  402a58:	2001      	movs	r0, #1
  402a5a:	e024      	b.n	402aa6 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402a5c:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402a5e:	2001      	movs	r0, #1
  402a60:	e021      	b.n	402aa6 <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402a62:	f000 011f 	and.w	r1, r0, #31
  402a66:	2601      	movs	r6, #1
  402a68:	462a      	mov	r2, r5
  402a6a:	fa06 f101 	lsl.w	r1, r6, r1
  402a6e:	4620      	mov	r0, r4
  402a70:	4b10      	ldr	r3, [pc, #64]	; (402ab4 <pio_configure_pin+0x12c>)
  402a72:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402a74:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  402a76:	e016      	b.n	402aa6 <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402a78:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  402a7c:	f000 011f 	and.w	r1, r0, #31
  402a80:	2601      	movs	r6, #1
  402a82:	ea05 0306 	and.w	r3, r5, r6
  402a86:	9300      	str	r3, [sp, #0]
  402a88:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402a8c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402a90:	bf14      	ite	ne
  402a92:	2200      	movne	r2, #0
  402a94:	2201      	moveq	r2, #1
  402a96:	fa06 f101 	lsl.w	r1, r6, r1
  402a9a:	4620      	mov	r0, r4
  402a9c:	4c06      	ldr	r4, [pc, #24]	; (402ab8 <pio_configure_pin+0x130>)
  402a9e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  402aa0:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  402aa2:	e000      	b.n	402aa6 <pio_configure_pin+0x11e>

	default:
		return 0;
  402aa4:	2000      	movs	r0, #0
	}

	return 1;
}
  402aa6:	b002      	add	sp, #8
  402aa8:	bd70      	pop	{r4, r5, r6, pc}
  402aaa:	bf00      	nop
  402aac:	00200707 	.word	0x00200707
  402ab0:	00402851 	.word	0x00402851
  402ab4:	004028e5 	.word	0x004028e5
  402ab8:	0040291d 	.word	0x0040291d

00402abc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ac0:	4604      	mov	r4, r0
  402ac2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402ac4:	4b0e      	ldr	r3, [pc, #56]	; (402b00 <pio_handler_process+0x44>)
  402ac6:	4798      	blx	r3
  402ac8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402aca:	4620      	mov	r0, r4
  402acc:	4b0d      	ldr	r3, [pc, #52]	; (402b04 <pio_handler_process+0x48>)
  402ace:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402ad0:	4005      	ands	r5, r0
  402ad2:	d013      	beq.n	402afc <pio_handler_process+0x40>
  402ad4:	4c0c      	ldr	r4, [pc, #48]	; (402b08 <pio_handler_process+0x4c>)
  402ad6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402ada:	6823      	ldr	r3, [r4, #0]
  402adc:	4543      	cmp	r3, r8
  402ade:	d108      	bne.n	402af2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ae0:	6861      	ldr	r1, [r4, #4]
  402ae2:	4229      	tst	r1, r5
  402ae4:	d005      	beq.n	402af2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ae6:	68e3      	ldr	r3, [r4, #12]
  402ae8:	4640      	mov	r0, r8
  402aea:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402aec:	6863      	ldr	r3, [r4, #4]
  402aee:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  402af2:	42b4      	cmp	r4, r6
  402af4:	d002      	beq.n	402afc <pio_handler_process+0x40>
  402af6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  402af8:	2d00      	cmp	r5, #0
  402afa:	d1ee      	bne.n	402ada <pio_handler_process+0x1e>
  402afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b00:	00402981 	.word	0x00402981
  402b04:	00402985 	.word	0x00402985
  402b08:	204008e0 	.word	0x204008e0

00402b0c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  402b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  402b0e:	4c17      	ldr	r4, [pc, #92]	; (402b6c <pio_handler_set+0x60>)
  402b10:	6826      	ldr	r6, [r4, #0]
  402b12:	2e06      	cmp	r6, #6
  402b14:	d828      	bhi.n	402b68 <pio_handler_set+0x5c>
  402b16:	f04f 0c00 	mov.w	ip, #0
  402b1a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402b1c:	4f14      	ldr	r7, [pc, #80]	; (402b70 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  402b1e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402b20:	0125      	lsls	r5, r4, #4
  402b22:	597d      	ldr	r5, [r7, r5]
  402b24:	428d      	cmp	r5, r1
  402b26:	d104      	bne.n	402b32 <pio_handler_set+0x26>
  402b28:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  402b2c:	686d      	ldr	r5, [r5, #4]
  402b2e:	4295      	cmp	r5, r2
  402b30:	d004      	beq.n	402b3c <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402b32:	3401      	adds	r4, #1
  402b34:	b2e4      	uxtb	r4, r4
  402b36:	46a4      	mov	ip, r4
  402b38:	42a6      	cmp	r6, r4
  402b3a:	d2f0      	bcs.n	402b1e <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  402b3c:	4d0c      	ldr	r5, [pc, #48]	; (402b70 <pio_handler_set+0x64>)
  402b3e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  402b42:	eb05 040e 	add.w	r4, r5, lr
  402b46:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  402b4a:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  402b4c:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  402b4e:	9906      	ldr	r1, [sp, #24]
  402b50:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  402b52:	3601      	adds	r6, #1
  402b54:	4566      	cmp	r6, ip
  402b56:	d101      	bne.n	402b5c <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  402b58:	4904      	ldr	r1, [pc, #16]	; (402b6c <pio_handler_set+0x60>)
  402b5a:	600e      	str	r6, [r1, #0]
  402b5c:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402b5e:	461a      	mov	r2, r3
  402b60:	4b04      	ldr	r3, [pc, #16]	; (402b74 <pio_handler_set+0x68>)
  402b62:	4798      	blx	r3

	return 0;
  402b64:	2000      	movs	r0, #0
  402b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  402b68:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  402b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b6c:	204008dc 	.word	0x204008dc
  402b70:	204008e0 	.word	0x204008e0
  402b74:	00402945 	.word	0x00402945

00402b78 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402b78:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402b7a:	210a      	movs	r1, #10
  402b7c:	4801      	ldr	r0, [pc, #4]	; (402b84 <PIOA_Handler+0xc>)
  402b7e:	4b02      	ldr	r3, [pc, #8]	; (402b88 <PIOA_Handler+0x10>)
  402b80:	4798      	blx	r3
  402b82:	bd08      	pop	{r3, pc}
  402b84:	400e0e00 	.word	0x400e0e00
  402b88:	00402abd 	.word	0x00402abd

00402b8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402b8c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402b8e:	210b      	movs	r1, #11
  402b90:	4801      	ldr	r0, [pc, #4]	; (402b98 <PIOB_Handler+0xc>)
  402b92:	4b02      	ldr	r3, [pc, #8]	; (402b9c <PIOB_Handler+0x10>)
  402b94:	4798      	blx	r3
  402b96:	bd08      	pop	{r3, pc}
  402b98:	400e1000 	.word	0x400e1000
  402b9c:	00402abd 	.word	0x00402abd

00402ba0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402ba0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  402ba2:	210c      	movs	r1, #12
  402ba4:	4801      	ldr	r0, [pc, #4]	; (402bac <PIOC_Handler+0xc>)
  402ba6:	4b02      	ldr	r3, [pc, #8]	; (402bb0 <PIOC_Handler+0x10>)
  402ba8:	4798      	blx	r3
  402baa:	bd08      	pop	{r3, pc}
  402bac:	400e1200 	.word	0x400e1200
  402bb0:	00402abd 	.word	0x00402abd

00402bb4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402bb4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  402bb6:	2110      	movs	r1, #16
  402bb8:	4801      	ldr	r0, [pc, #4]	; (402bc0 <PIOD_Handler+0xc>)
  402bba:	4b02      	ldr	r3, [pc, #8]	; (402bc4 <PIOD_Handler+0x10>)
  402bbc:	4798      	blx	r3
  402bbe:	bd08      	pop	{r3, pc}
  402bc0:	400e1400 	.word	0x400e1400
  402bc4:	00402abd 	.word	0x00402abd

00402bc8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402bc8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  402bca:	2111      	movs	r1, #17
  402bcc:	4801      	ldr	r0, [pc, #4]	; (402bd4 <PIOE_Handler+0xc>)
  402bce:	4b02      	ldr	r3, [pc, #8]	; (402bd8 <PIOE_Handler+0x10>)
  402bd0:	4798      	blx	r3
  402bd2:	bd08      	pop	{r3, pc}
  402bd4:	400e1600 	.word	0x400e1600
  402bd8:	00402abd 	.word	0x00402abd

00402bdc <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  402bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bde:	4606      	mov	r6, r0
  402be0:	460d      	mov	r5, r1
  402be2:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  402be4:	4b17      	ldr	r3, [pc, #92]	; (402c44 <pio_handler_set_priority+0x68>)
  402be6:	4798      	blx	r3
  402be8:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  402bea:	f04f 31ff 	mov.w	r1, #4294967295
  402bee:	4630      	mov	r0, r6
  402bf0:	4b15      	ldr	r3, [pc, #84]	; (402c48 <pio_handler_set_priority+0x6c>)
  402bf2:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  402bf4:	4630      	mov	r0, r6
  402bf6:	4b15      	ldr	r3, [pc, #84]	; (402c4c <pio_handler_set_priority+0x70>)
  402bf8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402bfa:	fa5f fe85 	uxtb.w	lr, r5
  402bfe:	f00e 031f 	and.w	r3, lr, #31
  402c02:	2201      	movs	r2, #1
  402c04:	fa02 f303 	lsl.w	r3, r2, r3
  402c08:	0968      	lsrs	r0, r5, #5
  402c0a:	4911      	ldr	r1, [pc, #68]	; (402c50 <pio_handler_set_priority+0x74>)
  402c0c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  402c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402c14:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  402c18:	2d00      	cmp	r5, #0
  402c1a:	da07      	bge.n	402c2c <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402c1c:	f00e 0e0f 	and.w	lr, lr, #15
  402c20:	0164      	lsls	r4, r4, #5
  402c22:	b2e4      	uxtb	r4, r4
  402c24:	4a0b      	ldr	r2, [pc, #44]	; (402c54 <pio_handler_set_priority+0x78>)
  402c26:	f802 400e 	strb.w	r4, [r2, lr]
  402c2a:	e003      	b.n	402c34 <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402c2c:	0164      	lsls	r4, r4, #5
  402c2e:	b2e4      	uxtb	r4, r4
  402c30:	4a09      	ldr	r2, [pc, #36]	; (402c58 <pio_handler_set_priority+0x7c>)
  402c32:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402c34:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  402c38:	4639      	mov	r1, r7
  402c3a:	4630      	mov	r0, r6
  402c3c:	4b07      	ldr	r3, [pc, #28]	; (402c5c <pio_handler_set_priority+0x80>)
  402c3e:	4798      	blx	r3
  402c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c42:	bf00      	nop
  402c44:	00402985 	.word	0x00402985
  402c48:	0040297d 	.word	0x0040297d
  402c4c:	00402981 	.word	0x00402981
  402c50:	e000e100 	.word	0xe000e100
  402c54:	e000ed14 	.word	0xe000ed14
  402c58:	e000e400 	.word	0xe000e400
  402c5c:	00402979 	.word	0x00402979

00402c60 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  402c60:	2803      	cmp	r0, #3
  402c62:	d007      	beq.n	402c74 <pmc_mck_set_division+0x14>
  402c64:	2804      	cmp	r0, #4
  402c66:	d008      	beq.n	402c7a <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402c68:	2802      	cmp	r0, #2
  402c6a:	bf0c      	ite	eq
  402c6c:	f44f 7280 	moveq.w	r2, #256	; 0x100
  402c70:	2200      	movne	r2, #0
  402c72:	e004      	b.n	402c7e <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402c74:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  402c78:	e001      	b.n	402c7e <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402c7e:	4906      	ldr	r1, [pc, #24]	; (402c98 <pmc_mck_set_division+0x38>)
  402c80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402c86:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  402c88:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402c8a:	460a      	mov	r2, r1
  402c8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402c8e:	f013 0f08 	tst.w	r3, #8
  402c92:	d0fb      	beq.n	402c8c <pmc_mck_set_division+0x2c>
}
  402c94:	4770      	bx	lr
  402c96:	bf00      	nop
  402c98:	400e0600 	.word	0x400e0600

00402c9c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402c9c:	4a18      	ldr	r2, [pc, #96]	; (402d00 <pmc_switch_mck_to_pllack+0x64>)
  402c9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402ca4:	4318      	orrs	r0, r3
  402ca6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ca8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402caa:	f013 0f08 	tst.w	r3, #8
  402cae:	d003      	beq.n	402cb8 <pmc_switch_mck_to_pllack+0x1c>
  402cb0:	e009      	b.n	402cc6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402cb2:	3b01      	subs	r3, #1
  402cb4:	d103      	bne.n	402cbe <pmc_switch_mck_to_pllack+0x22>
  402cb6:	e01e      	b.n	402cf6 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402cbc:	4910      	ldr	r1, [pc, #64]	; (402d00 <pmc_switch_mck_to_pllack+0x64>)
  402cbe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402cc0:	f012 0f08 	tst.w	r2, #8
  402cc4:	d0f5      	beq.n	402cb2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402cc6:	4a0e      	ldr	r2, [pc, #56]	; (402d00 <pmc_switch_mck_to_pllack+0x64>)
  402cc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402cca:	f023 0303 	bic.w	r3, r3, #3
  402cce:	f043 0302 	orr.w	r3, r3, #2
  402cd2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402cd4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402cd6:	f010 0008 	ands.w	r0, r0, #8
  402cda:	d004      	beq.n	402ce6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402cdc:	2000      	movs	r0, #0
  402cde:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402ce0:	3b01      	subs	r3, #1
  402ce2:	d103      	bne.n	402cec <pmc_switch_mck_to_pllack+0x50>
  402ce4:	e009      	b.n	402cfa <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402cea:	4905      	ldr	r1, [pc, #20]	; (402d00 <pmc_switch_mck_to_pllack+0x64>)
  402cec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402cee:	f012 0f08 	tst.w	r2, #8
  402cf2:	d0f5      	beq.n	402ce0 <pmc_switch_mck_to_pllack+0x44>
  402cf4:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402cf6:	2001      	movs	r0, #1
  402cf8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402cfa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402cfc:	4770      	bx	lr
  402cfe:	bf00      	nop
  402d00:	400e0600 	.word	0x400e0600

00402d04 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402d04:	b138      	cbz	r0, 402d16 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402d06:	490e      	ldr	r1, [pc, #56]	; (402d40 <pmc_switch_mainck_to_xtal+0x3c>)
  402d08:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402d0a:	4a0e      	ldr	r2, [pc, #56]	; (402d44 <pmc_switch_mainck_to_xtal+0x40>)
  402d0c:	401a      	ands	r2, r3
  402d0e:	4b0e      	ldr	r3, [pc, #56]	; (402d48 <pmc_switch_mainck_to_xtal+0x44>)
  402d10:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402d12:	620b      	str	r3, [r1, #32]
  402d14:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402d16:	480a      	ldr	r0, [pc, #40]	; (402d40 <pmc_switch_mainck_to_xtal+0x3c>)
  402d18:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402d1a:	0209      	lsls	r1, r1, #8
  402d1c:	b289      	uxth	r1, r1
  402d1e:	4a0b      	ldr	r2, [pc, #44]	; (402d4c <pmc_switch_mainck_to_xtal+0x48>)
  402d20:	401a      	ands	r2, r3
  402d22:	4b0b      	ldr	r3, [pc, #44]	; (402d50 <pmc_switch_mainck_to_xtal+0x4c>)
  402d24:	4313      	orrs	r3, r2
  402d26:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402d28:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402d2a:	4602      	mov	r2, r0
  402d2c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402d2e:	f013 0f01 	tst.w	r3, #1
  402d32:	d0fb      	beq.n	402d2c <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402d34:	4a02      	ldr	r2, [pc, #8]	; (402d40 <pmc_switch_mainck_to_xtal+0x3c>)
  402d36:	6a11      	ldr	r1, [r2, #32]
  402d38:	4b06      	ldr	r3, [pc, #24]	; (402d54 <pmc_switch_mainck_to_xtal+0x50>)
  402d3a:	430b      	orrs	r3, r1
  402d3c:	6213      	str	r3, [r2, #32]
  402d3e:	4770      	bx	lr
  402d40:	400e0600 	.word	0x400e0600
  402d44:	fec8fffc 	.word	0xfec8fffc
  402d48:	01370002 	.word	0x01370002
  402d4c:	ffc8fffc 	.word	0xffc8fffc
  402d50:	00370001 	.word	0x00370001
  402d54:	01370000 	.word	0x01370000

00402d58 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402d58:	4b02      	ldr	r3, [pc, #8]	; (402d64 <pmc_osc_is_ready_mainck+0xc>)
  402d5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402d5c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402d60:	4770      	bx	lr
  402d62:	bf00      	nop
  402d64:	400e0600 	.word	0x400e0600

00402d68 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402d68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402d6c:	4b01      	ldr	r3, [pc, #4]	; (402d74 <pmc_disable_pllack+0xc>)
  402d6e:	629a      	str	r2, [r3, #40]	; 0x28
  402d70:	4770      	bx	lr
  402d72:	bf00      	nop
  402d74:	400e0600 	.word	0x400e0600

00402d78 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402d78:	4b02      	ldr	r3, [pc, #8]	; (402d84 <pmc_is_locked_pllack+0xc>)
  402d7a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402d7c:	f000 0002 	and.w	r0, r0, #2
  402d80:	4770      	bx	lr
  402d82:	bf00      	nop
  402d84:	400e0600 	.word	0x400e0600

00402d88 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402d88:	283f      	cmp	r0, #63	; 0x3f
  402d8a:	d81e      	bhi.n	402dca <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402d8c:	281f      	cmp	r0, #31
  402d8e:	d80c      	bhi.n	402daa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402d90:	4b11      	ldr	r3, [pc, #68]	; (402dd8 <pmc_enable_periph_clk+0x50>)
  402d92:	699a      	ldr	r2, [r3, #24]
  402d94:	2301      	movs	r3, #1
  402d96:	4083      	lsls	r3, r0
  402d98:	4393      	bics	r3, r2
  402d9a:	d018      	beq.n	402dce <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402d9c:	2301      	movs	r3, #1
  402d9e:	fa03 f000 	lsl.w	r0, r3, r0
  402da2:	4b0d      	ldr	r3, [pc, #52]	; (402dd8 <pmc_enable_periph_clk+0x50>)
  402da4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402da6:	2000      	movs	r0, #0
  402da8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402daa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402dac:	4b0a      	ldr	r3, [pc, #40]	; (402dd8 <pmc_enable_periph_clk+0x50>)
  402dae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402db2:	2301      	movs	r3, #1
  402db4:	4083      	lsls	r3, r0
  402db6:	4393      	bics	r3, r2
  402db8:	d00b      	beq.n	402dd2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402dba:	2301      	movs	r3, #1
  402dbc:	fa03 f000 	lsl.w	r0, r3, r0
  402dc0:	4b05      	ldr	r3, [pc, #20]	; (402dd8 <pmc_enable_periph_clk+0x50>)
  402dc2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  402dc6:	2000      	movs	r0, #0
  402dc8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402dca:	2001      	movs	r0, #1
  402dcc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402dce:	2000      	movs	r0, #0
  402dd0:	4770      	bx	lr
  402dd2:	2000      	movs	r0, #0
}
  402dd4:	4770      	bx	lr
  402dd6:	bf00      	nop
  402dd8:	400e0600 	.word	0x400e0600

00402ddc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  402ddc:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  402dde:	4b07      	ldr	r3, [pc, #28]	; (402dfc <spi_enable_clock+0x20>)
  402de0:	4298      	cmp	r0, r3
  402de2:	d103      	bne.n	402dec <spi_enable_clock+0x10>
  402de4:	2015      	movs	r0, #21
  402de6:	4b06      	ldr	r3, [pc, #24]	; (402e00 <spi_enable_clock+0x24>)
  402de8:	4798      	blx	r3
  402dea:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  402dec:	4b05      	ldr	r3, [pc, #20]	; (402e04 <spi_enable_clock+0x28>)
  402dee:	4298      	cmp	r0, r3
  402df0:	d102      	bne.n	402df8 <spi_enable_clock+0x1c>
  402df2:	202a      	movs	r0, #42	; 0x2a
  402df4:	4b02      	ldr	r3, [pc, #8]	; (402e00 <spi_enable_clock+0x24>)
  402df6:	4798      	blx	r3
  402df8:	bd08      	pop	{r3, pc}
  402dfa:	bf00      	nop
  402dfc:	40008000 	.word	0x40008000
  402e00:	00402d89 	.word	0x00402d89
  402e04:	40058000 	.word	0x40058000

00402e08 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  402e08:	6843      	ldr	r3, [r0, #4]
  402e0a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  402e0e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  402e10:	6843      	ldr	r3, [r0, #4]
  402e12:	0409      	lsls	r1, r1, #16
  402e14:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  402e18:	430b      	orrs	r3, r1
  402e1a:	6043      	str	r3, [r0, #4]
  402e1c:	4770      	bx	lr
  402e1e:	bf00      	nop

00402e20 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  402e20:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  402e22:	f643 2399 	movw	r3, #15001	; 0x3a99
  402e26:	e001      	b.n	402e2c <spi_read+0xc>
		if (!timeout--) {
  402e28:	3b01      	subs	r3, #1
  402e2a:	d00e      	beq.n	402e4a <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  402e2c:	6904      	ldr	r4, [r0, #16]
  402e2e:	f014 0f01 	tst.w	r4, #1
  402e32:	d0f9      	beq.n	402e28 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  402e34:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  402e36:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  402e38:	f010 0f02 	tst.w	r0, #2
  402e3c:	d002      	beq.n	402e44 <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  402e3e:	f3c3 4003 	ubfx	r0, r3, #16, #4
  402e42:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  402e44:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  402e46:	2000      	movs	r0, #0
  402e48:	e000      	b.n	402e4c <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  402e4a:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  402e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402e50:	4770      	bx	lr
  402e52:	bf00      	nop

00402e54 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  402e54:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  402e56:	f643 2499 	movw	r4, #15001	; 0x3a99
  402e5a:	e001      	b.n	402e60 <spi_write+0xc>
		if (!timeout--) {
  402e5c:	3c01      	subs	r4, #1
  402e5e:	d011      	beq.n	402e84 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  402e60:	6905      	ldr	r5, [r0, #16]
  402e62:	f015 0f02 	tst.w	r5, #2
  402e66:	d0f9      	beq.n	402e5c <spi_write+0x8>
  402e68:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  402e6a:	f014 0f02 	tst.w	r4, #2
  402e6e:	d006      	beq.n	402e7e <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  402e70:	0412      	lsls	r2, r2, #16
  402e72:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  402e76:	4311      	orrs	r1, r2
		if (uc_last) {
  402e78:	b10b      	cbz	r3, 402e7e <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  402e7a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  402e7e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  402e80:	2000      	movs	r0, #0
  402e82:	e000      	b.n	402e86 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  402e84:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  402e86:	bc30      	pop	{r4, r5}
  402e88:	4770      	bx	lr
  402e8a:	bf00      	nop

00402e8c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  402e8c:	b132      	cbz	r2, 402e9c <spi_set_clock_polarity+0x10>
  402e8e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  402e92:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402e94:	f043 0301 	orr.w	r3, r3, #1
  402e98:	6303      	str	r3, [r0, #48]	; 0x30
  402e9a:	4770      	bx	lr
  402e9c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  402ea0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402ea2:	f023 0301 	bic.w	r3, r3, #1
  402ea6:	6303      	str	r3, [r0, #48]	; 0x30
  402ea8:	4770      	bx	lr
  402eaa:	bf00      	nop

00402eac <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  402eac:	b132      	cbz	r2, 402ebc <spi_set_clock_phase+0x10>
  402eae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  402eb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402eb4:	f043 0302 	orr.w	r3, r3, #2
  402eb8:	6303      	str	r3, [r0, #48]	; 0x30
  402eba:	4770      	bx	lr
  402ebc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  402ec0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402ec2:	f023 0302 	bic.w	r3, r3, #2
  402ec6:	6303      	str	r3, [r0, #48]	; 0x30
  402ec8:	4770      	bx	lr
  402eca:	bf00      	nop

00402ecc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  402ecc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  402ed0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  402ed6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  402ed8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402eda:	431a      	orrs	r2, r3
  402edc:	630a      	str	r2, [r1, #48]	; 0x30
  402ede:	4770      	bx	lr

00402ee0 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  402ee0:	1e43      	subs	r3, r0, #1
  402ee2:	4419      	add	r1, r3
  402ee4:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  402ee8:	1e43      	subs	r3, r0, #1
  402eea:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  402eec:	bf94      	ite	ls
  402eee:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  402ef0:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  402ef4:	4770      	bx	lr
  402ef6:	bf00      	nop

00402ef8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  402ef8:	b16a      	cbz	r2, 402f16 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  402efa:	b410      	push	{r4}
  402efc:	4614      	mov	r4, r2
  402efe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  402f02:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402f04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  402f08:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  402f0a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402f0c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  402f10:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  402f12:	2000      	movs	r0, #0
  402f14:	e002      	b.n	402f1c <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  402f16:	f04f 30ff 	mov.w	r0, #4294967295
  402f1a:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  402f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402f20:	4770      	bx	lr
  402f22:	bf00      	nop

00402f24 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  402f24:	b410      	push	{r4}
  402f26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  402f2a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  402f2c:	b280      	uxth	r0, r0
  402f2e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  402f30:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  402f32:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  402f36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  402f3a:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  402f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402f40:	4770      	bx	lr
  402f42:	bf00      	nop

00402f44 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402f44:	6943      	ldr	r3, [r0, #20]
  402f46:	f013 0f02 	tst.w	r3, #2
  402f4a:	d002      	beq.n	402f52 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402f4c:	61c1      	str	r1, [r0, #28]
	return 0;
  402f4e:	2000      	movs	r0, #0
  402f50:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402f52:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402f54:	4770      	bx	lr
  402f56:	bf00      	nop

00402f58 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402f58:	6943      	ldr	r3, [r0, #20]
  402f5a:	f013 0f01 	tst.w	r3, #1
  402f5e:	d003      	beq.n	402f68 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402f60:	6983      	ldr	r3, [r0, #24]
  402f62:	700b      	strb	r3, [r1, #0]
	return 0;
  402f64:	2000      	movs	r0, #0
  402f66:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402f68:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402f6a:	4770      	bx	lr

00402f6c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402f6c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402f6e:	010c      	lsls	r4, r1, #4
  402f70:	4294      	cmp	r4, r2
  402f72:	d90f      	bls.n	402f94 <usart_set_async_baudrate+0x28>
  402f74:	e01a      	b.n	402fac <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  402f76:	6841      	ldr	r1, [r0, #4]
  402f78:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  402f7c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402f7e:	0412      	lsls	r2, r2, #16
  402f80:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402f84:	431a      	orrs	r2, r3
  402f86:	6202      	str	r2, [r0, #32]

	return 0;
  402f88:	2000      	movs	r0, #0
  402f8a:	e01c      	b.n	402fc6 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  402f8c:	2001      	movs	r0, #1
  402f8e:	e01a      	b.n	402fc6 <usart_set_async_baudrate+0x5a>
  402f90:	2001      	movs	r0, #1
  402f92:	e018      	b.n	402fc6 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402f94:	0863      	lsrs	r3, r4, #1
  402f96:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402f9a:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  402f9e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402fa0:	1e5c      	subs	r4, r3, #1
  402fa2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402fa6:	428c      	cmp	r4, r1
  402fa8:	d9e9      	bls.n	402f7e <usart_set_async_baudrate+0x12>
  402faa:	e7ef      	b.n	402f8c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402fac:	00c9      	lsls	r1, r1, #3
  402fae:	084b      	lsrs	r3, r1, #1
  402fb0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402fb4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  402fb8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402fba:	1e5c      	subs	r4, r3, #1
  402fbc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402fc0:	428c      	cmp	r4, r1
  402fc2:	d8e5      	bhi.n	402f90 <usart_set_async_baudrate+0x24>
  402fc4:	e7d7      	b.n	402f76 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  402fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  402fca:	4770      	bx	lr

00402fcc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402fcc:	4b08      	ldr	r3, [pc, #32]	; (402ff0 <usart_reset+0x24>)
  402fce:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  402fd2:	2300      	movs	r3, #0
  402fd4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  402fd6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402fd8:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402fda:	2388      	movs	r3, #136	; 0x88
  402fdc:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402fde:	2324      	movs	r3, #36	; 0x24
  402fe0:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  402fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
  402fe6:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  402fe8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402fec:	6003      	str	r3, [r0, #0]
  402fee:	4770      	bx	lr
  402ff0:	55534100 	.word	0x55534100

00402ff4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402ff4:	b570      	push	{r4, r5, r6, lr}
  402ff6:	4605      	mov	r5, r0
  402ff8:	460c      	mov	r4, r1
  402ffa:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  402ffc:	4b0f      	ldr	r3, [pc, #60]	; (40303c <usart_init_rs232+0x48>)
  402ffe:	4798      	blx	r3

	ul_reg_val = 0;
  403000:	2200      	movs	r2, #0
  403002:	4b0f      	ldr	r3, [pc, #60]	; (403040 <usart_init_rs232+0x4c>)
  403004:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403006:	b19c      	cbz	r4, 403030 <usart_init_rs232+0x3c>
  403008:	4632      	mov	r2, r6
  40300a:	6821      	ldr	r1, [r4, #0]
  40300c:	4628      	mov	r0, r5
  40300e:	4b0d      	ldr	r3, [pc, #52]	; (403044 <usart_init_rs232+0x50>)
  403010:	4798      	blx	r3
  403012:	4602      	mov	r2, r0
  403014:	b970      	cbnz	r0, 403034 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403016:	6861      	ldr	r1, [r4, #4]
  403018:	68a3      	ldr	r3, [r4, #8]
  40301a:	4319      	orrs	r1, r3
  40301c:	6923      	ldr	r3, [r4, #16]
  40301e:	4319      	orrs	r1, r3
  403020:	68e3      	ldr	r3, [r4, #12]
  403022:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403024:	4906      	ldr	r1, [pc, #24]	; (403040 <usart_init_rs232+0x4c>)
  403026:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  403028:	6869      	ldr	r1, [r5, #4]
  40302a:	430b      	orrs	r3, r1
  40302c:	606b      	str	r3, [r5, #4]

	return 0;
  40302e:	e002      	b.n	403036 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  403030:	2201      	movs	r2, #1
  403032:	e000      	b.n	403036 <usart_init_rs232+0x42>
  403034:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  403036:	4610      	mov	r0, r2
  403038:	bd70      	pop	{r4, r5, r6, pc}
  40303a:	bf00      	nop
  40303c:	00402fcd 	.word	0x00402fcd
  403040:	20400950 	.word	0x20400950
  403044:	00402f6d 	.word	0x00402f6d

00403048 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  403048:	2340      	movs	r3, #64	; 0x40
  40304a:	6003      	str	r3, [r0, #0]
  40304c:	4770      	bx	lr
  40304e:	bf00      	nop

00403050 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  403050:	2310      	movs	r3, #16
  403052:	6003      	str	r3, [r0, #0]
  403054:	4770      	bx	lr
  403056:	bf00      	nop

00403058 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403058:	6943      	ldr	r3, [r0, #20]
  40305a:	f013 0f02 	tst.w	r3, #2
  40305e:	d004      	beq.n	40306a <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  403060:	f3c1 0108 	ubfx	r1, r1, #0, #9
  403064:	61c1      	str	r1, [r0, #28]
	return 0;
  403066:	2000      	movs	r0, #0
  403068:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40306a:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40306c:	4770      	bx	lr
  40306e:	bf00      	nop

00403070 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  403070:	6943      	ldr	r3, [r0, #20]
  403072:	f013 0f01 	tst.w	r3, #1
  403076:	d005      	beq.n	403084 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403078:	6983      	ldr	r3, [r0, #24]
  40307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40307e:	600b      	str	r3, [r1, #0]

	return 0;
  403080:	2000      	movs	r0, #0
  403082:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  403084:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  403086:	4770      	bx	lr

00403088 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403088:	e7fe      	b.n	403088 <Dummy_Handler>
  40308a:	bf00      	nop

0040308c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40308c:	b500      	push	{lr}
  40308e:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  403090:	4b27      	ldr	r3, [pc, #156]	; (403130 <Reset_Handler+0xa4>)
  403092:	4a28      	ldr	r2, [pc, #160]	; (403134 <Reset_Handler+0xa8>)
  403094:	429a      	cmp	r2, r3
  403096:	d003      	beq.n	4030a0 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  403098:	4b27      	ldr	r3, [pc, #156]	; (403138 <Reset_Handler+0xac>)
  40309a:	4a25      	ldr	r2, [pc, #148]	; (403130 <Reset_Handler+0xa4>)
  40309c:	429a      	cmp	r2, r3
  40309e:	d304      	bcc.n	4030aa <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4030a0:	4b26      	ldr	r3, [pc, #152]	; (40313c <Reset_Handler+0xb0>)
  4030a2:	4a27      	ldr	r2, [pc, #156]	; (403140 <Reset_Handler+0xb4>)
  4030a4:	429a      	cmp	r2, r3
  4030a6:	d30f      	bcc.n	4030c8 <Reset_Handler+0x3c>
  4030a8:	e01a      	b.n	4030e0 <Reset_Handler+0x54>
  4030aa:	4921      	ldr	r1, [pc, #132]	; (403130 <Reset_Handler+0xa4>)
  4030ac:	4b25      	ldr	r3, [pc, #148]	; (403144 <Reset_Handler+0xb8>)
  4030ae:	1a5b      	subs	r3, r3, r1
  4030b0:	f023 0303 	bic.w	r3, r3, #3
  4030b4:	3304      	adds	r3, #4
  4030b6:	4a1f      	ldr	r2, [pc, #124]	; (403134 <Reset_Handler+0xa8>)
  4030b8:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4030ba:	f852 0b04 	ldr.w	r0, [r2], #4
  4030be:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4030c2:	429a      	cmp	r2, r3
  4030c4:	d1f9      	bne.n	4030ba <Reset_Handler+0x2e>
  4030c6:	e7eb      	b.n	4030a0 <Reset_Handler+0x14>
  4030c8:	4b1f      	ldr	r3, [pc, #124]	; (403148 <Reset_Handler+0xbc>)
  4030ca:	4a20      	ldr	r2, [pc, #128]	; (40314c <Reset_Handler+0xc0>)
  4030cc:	1ad2      	subs	r2, r2, r3
  4030ce:	f022 0203 	bic.w	r2, r2, #3
  4030d2:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4030d4:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4030d6:	2100      	movs	r1, #0
  4030d8:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4030dc:	4293      	cmp	r3, r2
  4030de:	d1fb      	bne.n	4030d8 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4030e0:	4a1b      	ldr	r2, [pc, #108]	; (403150 <Reset_Handler+0xc4>)
  4030e2:	4b1c      	ldr	r3, [pc, #112]	; (403154 <Reset_Handler+0xc8>)
  4030e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4030e8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4030ea:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4030ee:	fab3 f383 	clz	r3, r3
  4030f2:	095b      	lsrs	r3, r3, #5
  4030f4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4030f6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4030f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4030fc:	2200      	movs	r2, #0
  4030fe:	4b16      	ldr	r3, [pc, #88]	; (403158 <Reset_Handler+0xcc>)
  403100:	701a      	strb	r2, [r3, #0]
	return flags;
  403102:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403104:	4a15      	ldr	r2, [pc, #84]	; (40315c <Reset_Handler+0xd0>)
  403106:	6813      	ldr	r3, [r2, #0]
  403108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40310c:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40310e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403112:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403116:	b129      	cbz	r1, 403124 <Reset_Handler+0x98>
		cpu_irq_enable();
  403118:	2201      	movs	r2, #1
  40311a:	4b0f      	ldr	r3, [pc, #60]	; (403158 <Reset_Handler+0xcc>)
  40311c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40311e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403122:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  403124:	4b0e      	ldr	r3, [pc, #56]	; (403160 <Reset_Handler+0xd4>)
  403126:	4798      	blx	r3

        /* Branch to main function */
        main();
  403128:	4b0e      	ldr	r3, [pc, #56]	; (403164 <Reset_Handler+0xd8>)
  40312a:	4798      	blx	r3
  40312c:	e7fe      	b.n	40312c <Reset_Handler+0xa0>
  40312e:	bf00      	nop
  403130:	20400000 	.word	0x20400000
  403134:	004077bc 	.word	0x004077bc
  403138:	20400884 	.word	0x20400884
  40313c:	204009a0 	.word	0x204009a0
  403140:	20400884 	.word	0x20400884
  403144:	20400883 	.word	0x20400883
  403148:	20400888 	.word	0x20400888
  40314c:	204009a3 	.word	0x204009a3
  403150:	e000ed00 	.word	0xe000ed00
  403154:	00400000 	.word	0x00400000
  403158:	20400014 	.word	0x20400014
  40315c:	e000ed88 	.word	0xe000ed88
  403160:	00403725 	.word	0x00403725
  403164:	00403625 	.word	0x00403625

00403168 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403168:	4b3c      	ldr	r3, [pc, #240]	; (40325c <SystemCoreClockUpdate+0xf4>)
  40316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40316c:	f003 0303 	and.w	r3, r3, #3
  403170:	2b01      	cmp	r3, #1
  403172:	d00f      	beq.n	403194 <SystemCoreClockUpdate+0x2c>
  403174:	b113      	cbz	r3, 40317c <SystemCoreClockUpdate+0x14>
  403176:	2b02      	cmp	r3, #2
  403178:	d029      	beq.n	4031ce <SystemCoreClockUpdate+0x66>
  40317a:	e057      	b.n	40322c <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40317c:	4b38      	ldr	r3, [pc, #224]	; (403260 <SystemCoreClockUpdate+0xf8>)
  40317e:	695b      	ldr	r3, [r3, #20]
  403180:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403184:	bf14      	ite	ne
  403186:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40318a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40318e:	4b35      	ldr	r3, [pc, #212]	; (403264 <SystemCoreClockUpdate+0xfc>)
  403190:	601a      	str	r2, [r3, #0]
  403192:	e04b      	b.n	40322c <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403194:	4b31      	ldr	r3, [pc, #196]	; (40325c <SystemCoreClockUpdate+0xf4>)
  403196:	6a1b      	ldr	r3, [r3, #32]
  403198:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40319c:	d003      	beq.n	4031a6 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40319e:	4a32      	ldr	r2, [pc, #200]	; (403268 <SystemCoreClockUpdate+0x100>)
  4031a0:	4b30      	ldr	r3, [pc, #192]	; (403264 <SystemCoreClockUpdate+0xfc>)
  4031a2:	601a      	str	r2, [r3, #0]
  4031a4:	e042      	b.n	40322c <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4031a6:	4a31      	ldr	r2, [pc, #196]	; (40326c <SystemCoreClockUpdate+0x104>)
  4031a8:	4b2e      	ldr	r3, [pc, #184]	; (403264 <SystemCoreClockUpdate+0xfc>)
  4031aa:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4031ac:	4b2b      	ldr	r3, [pc, #172]	; (40325c <SystemCoreClockUpdate+0xf4>)
  4031ae:	6a1b      	ldr	r3, [r3, #32]
  4031b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4031b4:	2b10      	cmp	r3, #16
  4031b6:	d002      	beq.n	4031be <SystemCoreClockUpdate+0x56>
  4031b8:	2b20      	cmp	r3, #32
  4031ba:	d004      	beq.n	4031c6 <SystemCoreClockUpdate+0x5e>
  4031bc:	e036      	b.n	40322c <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4031be:	4a2c      	ldr	r2, [pc, #176]	; (403270 <SystemCoreClockUpdate+0x108>)
  4031c0:	4b28      	ldr	r3, [pc, #160]	; (403264 <SystemCoreClockUpdate+0xfc>)
  4031c2:	601a      	str	r2, [r3, #0]
          break;
  4031c4:	e032      	b.n	40322c <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4031c6:	4a28      	ldr	r2, [pc, #160]	; (403268 <SystemCoreClockUpdate+0x100>)
  4031c8:	4b26      	ldr	r3, [pc, #152]	; (403264 <SystemCoreClockUpdate+0xfc>)
  4031ca:	601a      	str	r2, [r3, #0]
          break;
  4031cc:	e02e      	b.n	40322c <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4031ce:	4b23      	ldr	r3, [pc, #140]	; (40325c <SystemCoreClockUpdate+0xf4>)
  4031d0:	6a1b      	ldr	r3, [r3, #32]
  4031d2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4031d6:	d003      	beq.n	4031e0 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4031d8:	4a23      	ldr	r2, [pc, #140]	; (403268 <SystemCoreClockUpdate+0x100>)
  4031da:	4b22      	ldr	r3, [pc, #136]	; (403264 <SystemCoreClockUpdate+0xfc>)
  4031dc:	601a      	str	r2, [r3, #0]
  4031de:	e012      	b.n	403206 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4031e0:	4a22      	ldr	r2, [pc, #136]	; (40326c <SystemCoreClockUpdate+0x104>)
  4031e2:	4b20      	ldr	r3, [pc, #128]	; (403264 <SystemCoreClockUpdate+0xfc>)
  4031e4:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4031e6:	4b1d      	ldr	r3, [pc, #116]	; (40325c <SystemCoreClockUpdate+0xf4>)
  4031e8:	6a1b      	ldr	r3, [r3, #32]
  4031ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4031ee:	2b10      	cmp	r3, #16
  4031f0:	d002      	beq.n	4031f8 <SystemCoreClockUpdate+0x90>
  4031f2:	2b20      	cmp	r3, #32
  4031f4:	d004      	beq.n	403200 <SystemCoreClockUpdate+0x98>
  4031f6:	e006      	b.n	403206 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4031f8:	4a1d      	ldr	r2, [pc, #116]	; (403270 <SystemCoreClockUpdate+0x108>)
  4031fa:	4b1a      	ldr	r3, [pc, #104]	; (403264 <SystemCoreClockUpdate+0xfc>)
  4031fc:	601a      	str	r2, [r3, #0]
          break;
  4031fe:	e002      	b.n	403206 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403200:	4a19      	ldr	r2, [pc, #100]	; (403268 <SystemCoreClockUpdate+0x100>)
  403202:	4b18      	ldr	r3, [pc, #96]	; (403264 <SystemCoreClockUpdate+0xfc>)
  403204:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403206:	4b15      	ldr	r3, [pc, #84]	; (40325c <SystemCoreClockUpdate+0xf4>)
  403208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40320a:	f003 0303 	and.w	r3, r3, #3
  40320e:	2b02      	cmp	r3, #2
  403210:	d10c      	bne.n	40322c <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403212:	4a12      	ldr	r2, [pc, #72]	; (40325c <SystemCoreClockUpdate+0xf4>)
  403214:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403216:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403218:	4812      	ldr	r0, [pc, #72]	; (403264 <SystemCoreClockUpdate+0xfc>)
  40321a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40321e:	6803      	ldr	r3, [r0, #0]
  403220:	fb01 3303 	mla	r3, r1, r3, r3
  403224:	b2d2      	uxtb	r2, r2
  403226:	fbb3 f3f2 	udiv	r3, r3, r2
  40322a:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40322c:	4b0b      	ldr	r3, [pc, #44]	; (40325c <SystemCoreClockUpdate+0xf4>)
  40322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403230:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403234:	2b70      	cmp	r3, #112	; 0x70
  403236:	d107      	bne.n	403248 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  403238:	4a0a      	ldr	r2, [pc, #40]	; (403264 <SystemCoreClockUpdate+0xfc>)
  40323a:	6813      	ldr	r3, [r2, #0]
  40323c:	490d      	ldr	r1, [pc, #52]	; (403274 <SystemCoreClockUpdate+0x10c>)
  40323e:	fba1 1303 	umull	r1, r3, r1, r3
  403242:	085b      	lsrs	r3, r3, #1
  403244:	6013      	str	r3, [r2, #0]
  403246:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403248:	4b04      	ldr	r3, [pc, #16]	; (40325c <SystemCoreClockUpdate+0xf4>)
  40324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40324c:	4905      	ldr	r1, [pc, #20]	; (403264 <SystemCoreClockUpdate+0xfc>)
  40324e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  403252:	680b      	ldr	r3, [r1, #0]
  403254:	40d3      	lsrs	r3, r2
  403256:	600b      	str	r3, [r1, #0]
  403258:	4770      	bx	lr
  40325a:	bf00      	nop
  40325c:	400e0600 	.word	0x400e0600
  403260:	400e1810 	.word	0x400e1810
  403264:	20400018 	.word	0x20400018
  403268:	00b71b00 	.word	0x00b71b00
  40326c:	003d0900 	.word	0x003d0900
  403270:	007a1200 	.word	0x007a1200
  403274:	aaaaaaab 	.word	0xaaaaaaab

00403278 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403278:	4b12      	ldr	r3, [pc, #72]	; (4032c4 <system_init_flash+0x4c>)
  40327a:	4298      	cmp	r0, r3
  40327c:	d804      	bhi.n	403288 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40327e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403282:	4b11      	ldr	r3, [pc, #68]	; (4032c8 <system_init_flash+0x50>)
  403284:	601a      	str	r2, [r3, #0]
  403286:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403288:	4b10      	ldr	r3, [pc, #64]	; (4032cc <system_init_flash+0x54>)
  40328a:	4298      	cmp	r0, r3
  40328c:	d803      	bhi.n	403296 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40328e:	4a10      	ldr	r2, [pc, #64]	; (4032d0 <system_init_flash+0x58>)
  403290:	4b0d      	ldr	r3, [pc, #52]	; (4032c8 <system_init_flash+0x50>)
  403292:	601a      	str	r2, [r3, #0]
  403294:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403296:	4b0f      	ldr	r3, [pc, #60]	; (4032d4 <system_init_flash+0x5c>)
  403298:	4298      	cmp	r0, r3
  40329a:	d803      	bhi.n	4032a4 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40329c:	4a0e      	ldr	r2, [pc, #56]	; (4032d8 <system_init_flash+0x60>)
  40329e:	4b0a      	ldr	r3, [pc, #40]	; (4032c8 <system_init_flash+0x50>)
  4032a0:	601a      	str	r2, [r3, #0]
  4032a2:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4032a4:	4b0d      	ldr	r3, [pc, #52]	; (4032dc <system_init_flash+0x64>)
  4032a6:	4298      	cmp	r0, r3
  4032a8:	d803      	bhi.n	4032b2 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4032aa:	4a0d      	ldr	r2, [pc, #52]	; (4032e0 <system_init_flash+0x68>)
  4032ac:	4b06      	ldr	r3, [pc, #24]	; (4032c8 <system_init_flash+0x50>)
  4032ae:	601a      	str	r2, [r3, #0]
  4032b0:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4032b2:	4b0c      	ldr	r3, [pc, #48]	; (4032e4 <system_init_flash+0x6c>)
  4032b4:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4032b6:	bf94      	ite	ls
  4032b8:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4032bc:	4a0a      	ldrhi	r2, [pc, #40]	; (4032e8 <system_init_flash+0x70>)
  4032be:	4b02      	ldr	r3, [pc, #8]	; (4032c8 <system_init_flash+0x50>)
  4032c0:	601a      	str	r2, [r3, #0]
  4032c2:	4770      	bx	lr
  4032c4:	01312cff 	.word	0x01312cff
  4032c8:	400e0c00 	.word	0x400e0c00
  4032cc:	026259ff 	.word	0x026259ff
  4032d0:	04000100 	.word	0x04000100
  4032d4:	039386ff 	.word	0x039386ff
  4032d8:	04000200 	.word	0x04000200
  4032dc:	04c4b3ff 	.word	0x04c4b3ff
  4032e0:	04000300 	.word	0x04000300
  4032e4:	05f5e0ff 	.word	0x05f5e0ff
  4032e8:	04000500 	.word	0x04000500

004032ec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4032ec:	4b09      	ldr	r3, [pc, #36]	; (403314 <_sbrk+0x28>)
  4032ee:	681b      	ldr	r3, [r3, #0]
  4032f0:	b913      	cbnz	r3, 4032f8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4032f2:	4a09      	ldr	r2, [pc, #36]	; (403318 <_sbrk+0x2c>)
  4032f4:	4b07      	ldr	r3, [pc, #28]	; (403314 <_sbrk+0x28>)
  4032f6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4032f8:	4b06      	ldr	r3, [pc, #24]	; (403314 <_sbrk+0x28>)
  4032fa:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4032fc:	181a      	adds	r2, r3, r0
  4032fe:	4907      	ldr	r1, [pc, #28]	; (40331c <_sbrk+0x30>)
  403300:	4291      	cmp	r1, r2
  403302:	db04      	blt.n	40330e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403304:	4610      	mov	r0, r2
  403306:	4a03      	ldr	r2, [pc, #12]	; (403314 <_sbrk+0x28>)
  403308:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40330a:	4618      	mov	r0, r3
  40330c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40330e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403312:	4770      	bx	lr
  403314:	20400954 	.word	0x20400954
  403318:	20402ba0 	.word	0x20402ba0
  40331c:	2045fffc 	.word	0x2045fffc

00403320 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403320:	f04f 30ff 	mov.w	r0, #4294967295
  403324:	4770      	bx	lr
  403326:	bf00      	nop

00403328 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40332c:	604b      	str	r3, [r1, #4]

	return 0;
}
  40332e:	2000      	movs	r0, #0
  403330:	4770      	bx	lr
  403332:	bf00      	nop

00403334 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403334:	2001      	movs	r0, #1
  403336:	4770      	bx	lr

00403338 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403338:	2000      	movs	r0, #0
  40333a:	4770      	bx	lr

0040333c <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  40333c:	b570      	push	{r4, r5, r6, lr}
  40333e:	b082      	sub	sp, #8
  403340:	460c      	mov	r4, r1
	switch (u8MsgType) {
  403342:	3811      	subs	r0, #17
  403344:	2821      	cmp	r0, #33	; 0x21
  403346:	d873      	bhi.n	403430 <wifi_cb+0xf4>
  403348:	e8df f000 	tbb	[pc, r0]
  40334c:	72227211 	.word	0x72227211
  403350:	72727272 	.word	0x72727272
  403354:	72727272 	.word	0x72727272
  403358:	72727272 	.word	0x72727272
  40335c:	72727272 	.word	0x72727272
  403360:	72727272 	.word	0x72727272
  403364:	5a727272 	.word	0x5a727272
  403368:	72727272 	.word	0x72727272
  40336c:	6872      	.short	0x6872
	case M2M_WIFI_RESP_SCAN_DONE:
	{
		tstrM2mScanDone *pstrInfo = (tstrM2mScanDone *)pvMsg;
		scan_request_index = 0;
  40336e:	2200      	movs	r2, #0
  403370:	4b30      	ldr	r3, [pc, #192]	; (403434 <wifi_cb+0xf8>)
  403372:	701a      	strb	r2, [r3, #0]
		if (pstrInfo->u8NumofCh >= 1) {
  403374:	780b      	ldrb	r3, [r1, #0]
  403376:	b13b      	cbz	r3, 403388 <wifi_cb+0x4c>
			m2m_wifi_req_scan_result(scan_request_index);
  403378:	4610      	mov	r0, r2
  40337a:	4b2f      	ldr	r3, [pc, #188]	; (403438 <wifi_cb+0xfc>)
  40337c:	4798      	blx	r3
			scan_request_index++;
  40337e:	4a2d      	ldr	r2, [pc, #180]	; (403434 <wifi_cb+0xf8>)
  403380:	7813      	ldrb	r3, [r2, #0]
  403382:	3301      	adds	r3, #1
  403384:	7013      	strb	r3, [r2, #0]
  403386:	e053      	b.n	403430 <wifi_cb+0xf4>
		} else {
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
  403388:	20ff      	movs	r0, #255	; 0xff
  40338a:	4b2c      	ldr	r3, [pc, #176]	; (40343c <wifi_cb+0x100>)
  40338c:	4798      	blx	r3
  40338e:	e04f      	b.n	403430 <wifi_cb+0xf4>

	case M2M_WIFI_RESP_SCAN_RESULT:
	{
		tstrM2mWifiscanResult *pstrScanResult = (tstrM2mWifiscanResult *)pvMsg;
		uint16_t demo_ssid_len;
		uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
  403390:	340a      	adds	r4, #10
  403392:	4620      	mov	r0, r4
  403394:	4b2a      	ldr	r3, [pc, #168]	; (403440 <wifi_cb+0x104>)
  403396:	4798      	blx	r3
  403398:	4605      	mov	r5, r0

		/* display founded AP. */
		printf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);
  40339a:	4622      	mov	r2, r4
  40339c:	4b25      	ldr	r3, [pc, #148]	; (403434 <wifi_cb+0xf8>)
  40339e:	7819      	ldrb	r1, [r3, #0]
  4033a0:	4828      	ldr	r0, [pc, #160]	; (403444 <wifi_cb+0x108>)
  4033a2:	4b29      	ldr	r3, [pc, #164]	; (403448 <wifi_cb+0x10c>)
  4033a4:	4798      	blx	r3

		num_founded_ap = m2m_wifi_get_num_ap_found();
  4033a6:	4b29      	ldr	r3, [pc, #164]	; (40344c <wifi_cb+0x110>)
  4033a8:	4798      	blx	r3
  4033aa:	4606      	mov	r6, r0
		if (scan_ssid_len) {
			/* check same SSID. */
			demo_ssid_len = strlen((const char *)MAIN_WLAN_SSID);
			if
			(
  4033ac:	b2ad      	uxth	r5, r5
  4033ae:	2d09      	cmp	r5, #9
  4033b0:	d113      	bne.n	4033da <wifi_cb+0x9e>
				(demo_ssid_len == scan_ssid_len) &&
				(!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
  4033b2:	2209      	movs	r2, #9
  4033b4:	4926      	ldr	r1, [pc, #152]	; (403450 <wifi_cb+0x114>)
  4033b6:	4620      	mov	r0, r4
  4033b8:	4b26      	ldr	r3, [pc, #152]	; (403454 <wifi_cb+0x118>)
  4033ba:	4798      	blx	r3
		if (scan_ssid_len) {
			/* check same SSID. */
			demo_ssid_len = strlen((const char *)MAIN_WLAN_SSID);
			if
			(
				(demo_ssid_len == scan_ssid_len) &&
  4033bc:	b968      	cbnz	r0, 4033da <wifi_cb+0x9e>
				(!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
			) {
				/* A scan result matches an entry in the preferred AP List.
				 * Initiate a connection request.
				 */
				printf("Found %s \r\n", MAIN_WLAN_SSID);
  4033be:	4c24      	ldr	r4, [pc, #144]	; (403450 <wifi_cb+0x114>)
  4033c0:	4621      	mov	r1, r4
  4033c2:	4825      	ldr	r0, [pc, #148]	; (403458 <wifi_cb+0x11c>)
  4033c4:	4b20      	ldr	r3, [pc, #128]	; (403448 <wifi_cb+0x10c>)
  4033c6:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID,
  4033c8:	23ff      	movs	r3, #255	; 0xff
  4033ca:	9300      	str	r3, [sp, #0]
  4033cc:	4b23      	ldr	r3, [pc, #140]	; (40345c <wifi_cb+0x120>)
  4033ce:	2202      	movs	r2, #2
  4033d0:	210a      	movs	r1, #10
  4033d2:	4620      	mov	r0, r4
  4033d4:	4c22      	ldr	r4, [pc, #136]	; (403460 <wifi_cb+0x124>)
  4033d6:	47a0      	blx	r4
						sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH,
						(void *)MAIN_WLAN_PSK,
						M2M_WIFI_CH_ALL);
				break;
  4033d8:	e02a      	b.n	403430 <wifi_cb+0xf4>
			}
		}

		if (scan_request_index < num_founded_ap) {
  4033da:	4b16      	ldr	r3, [pc, #88]	; (403434 <wifi_cb+0xf8>)
  4033dc:	7818      	ldrb	r0, [r3, #0]
  4033de:	4286      	cmp	r6, r0
  4033e0:	d906      	bls.n	4033f0 <wifi_cb+0xb4>
			m2m_wifi_req_scan_result(scan_request_index);
  4033e2:	4b15      	ldr	r3, [pc, #84]	; (403438 <wifi_cb+0xfc>)
  4033e4:	4798      	blx	r3
			scan_request_index++;
  4033e6:	4a13      	ldr	r2, [pc, #76]	; (403434 <wifi_cb+0xf8>)
  4033e8:	7813      	ldrb	r3, [r2, #0]
  4033ea:	3301      	adds	r3, #1
  4033ec:	7013      	strb	r3, [r2, #0]
  4033ee:	e01f      	b.n	403430 <wifi_cb+0xf4>
		} else {
			printf("can not find AP %s\r\n", MAIN_WLAN_SSID);
  4033f0:	4917      	ldr	r1, [pc, #92]	; (403450 <wifi_cb+0x114>)
  4033f2:	481c      	ldr	r0, [pc, #112]	; (403464 <wifi_cb+0x128>)
  4033f4:	4b14      	ldr	r3, [pc, #80]	; (403448 <wifi_cb+0x10c>)
  4033f6:	4798      	blx	r3
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
  4033f8:	20ff      	movs	r0, #255	; 0xff
  4033fa:	4b10      	ldr	r3, [pc, #64]	; (40343c <wifi_cb+0x100>)
  4033fc:	4798      	blx	r3
  4033fe:	e017      	b.n	403430 <wifi_cb+0xf4>
	}

	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  403400:	780b      	ldrb	r3, [r1, #0]
  403402:	2b01      	cmp	r3, #1
  403404:	d102      	bne.n	40340c <wifi_cb+0xd0>
			m2m_wifi_request_dhcp_client();
  403406:	4b18      	ldr	r3, [pc, #96]	; (403468 <wifi_cb+0x12c>)
  403408:	4798      	blx	r3
  40340a:	e011      	b.n	403430 <wifi_cb+0xf4>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  40340c:	b983      	cbnz	r3, 403430 <wifi_cb+0xf4>
			printf("Wi-Fi disconnected\r\n");
  40340e:	4817      	ldr	r0, [pc, #92]	; (40346c <wifi_cb+0x130>)
  403410:	4b0d      	ldr	r3, [pc, #52]	; (403448 <wifi_cb+0x10c>)
  403412:	4798      	blx	r3

			/* Request scan. */
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
  403414:	20ff      	movs	r0, #255	; 0xff
  403416:	4b09      	ldr	r3, [pc, #36]	; (40343c <wifi_cb+0x100>)
  403418:	4798      	blx	r3
  40341a:	e009      	b.n	403430 <wifi_cb+0xf4>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("Wi-Fi connected\r\n");
  40341c:	4814      	ldr	r0, [pc, #80]	; (403470 <wifi_cb+0x134>)
  40341e:	4d0a      	ldr	r5, [pc, #40]	; (403448 <wifi_cb+0x10c>)
  403420:	47a8      	blx	r5
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
  403422:	78a3      	ldrb	r3, [r4, #2]
  403424:	7862      	ldrb	r2, [r4, #1]
  403426:	7821      	ldrb	r1, [r4, #0]
  403428:	78e0      	ldrb	r0, [r4, #3]
  40342a:	9000      	str	r0, [sp, #0]
  40342c:	4811      	ldr	r0, [pc, #68]	; (403474 <wifi_cb+0x138>)
  40342e:	47a8      	blx	r5
	default:
	{
		break;
	}
	}
}
  403430:	b002      	add	sp, #8
  403432:	bd70      	pop	{r4, r5, r6, pc}
  403434:	20400958 	.word	0x20400958
  403438:	004013fd 	.word	0x004013fd
  40343c:	004013a5 	.word	0x004013a5
  403440:	00403a01 	.word	0x00403a01
  403444:	00407620 	.word	0x00407620
  403448:	00403775 	.word	0x00403775
  40344c:	00401421 	.word	0x00401421
  403450:	00407630 	.word	0x00407630
  403454:	0040379d 	.word	0x0040379d
  403458:	0040763c 	.word	0x0040763c
  40345c:	00407648 	.word	0x00407648
  403460:	00401385 	.word	0x00401385
  403464:	00407654 	.word	0x00407654
  403468:	004013a1 	.word	0x004013a1
  40346c:	0040766c 	.word	0x0040766c
  403470:	00407684 	.word	0x00407684
  403474:	00407698 	.word	0x00407698

00403478 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403478:	b5f0      	push	{r4, r5, r6, r7, lr}
  40347a:	b083      	sub	sp, #12
  40347c:	4605      	mov	r5, r0
  40347e:	460c      	mov	r4, r1
	uint32_t val = 0;
  403480:	2300      	movs	r3, #0
  403482:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403484:	4b29      	ldr	r3, [pc, #164]	; (40352c <usart_serial_getchar+0xb4>)
  403486:	4298      	cmp	r0, r3
  403488:	d107      	bne.n	40349a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40348a:	461f      	mov	r7, r3
  40348c:	4e28      	ldr	r6, [pc, #160]	; (403530 <usart_serial_getchar+0xb8>)
  40348e:	4621      	mov	r1, r4
  403490:	4638      	mov	r0, r7
  403492:	47b0      	blx	r6
  403494:	2800      	cmp	r0, #0
  403496:	d1fa      	bne.n	40348e <usart_serial_getchar+0x16>
  403498:	e015      	b.n	4034c6 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40349a:	4b26      	ldr	r3, [pc, #152]	; (403534 <usart_serial_getchar+0xbc>)
  40349c:	4298      	cmp	r0, r3
  40349e:	d107      	bne.n	4034b0 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  4034a0:	461f      	mov	r7, r3
  4034a2:	4e23      	ldr	r6, [pc, #140]	; (403530 <usart_serial_getchar+0xb8>)
  4034a4:	4621      	mov	r1, r4
  4034a6:	4638      	mov	r0, r7
  4034a8:	47b0      	blx	r6
  4034aa:	2800      	cmp	r0, #0
  4034ac:	d1fa      	bne.n	4034a4 <usart_serial_getchar+0x2c>
  4034ae:	e015      	b.n	4034dc <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4034b0:	4b21      	ldr	r3, [pc, #132]	; (403538 <usart_serial_getchar+0xc0>)
  4034b2:	4298      	cmp	r0, r3
  4034b4:	d107      	bne.n	4034c6 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  4034b6:	461f      	mov	r7, r3
  4034b8:	4e1d      	ldr	r6, [pc, #116]	; (403530 <usart_serial_getchar+0xb8>)
  4034ba:	4621      	mov	r1, r4
  4034bc:	4638      	mov	r0, r7
  4034be:	47b0      	blx	r6
  4034c0:	2800      	cmp	r0, #0
  4034c2:	d1fa      	bne.n	4034ba <usart_serial_getchar+0x42>
  4034c4:	e017      	b.n	4034f6 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4034c6:	4b1d      	ldr	r3, [pc, #116]	; (40353c <usart_serial_getchar+0xc4>)
  4034c8:	429d      	cmp	r5, r3
  4034ca:	d107      	bne.n	4034dc <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  4034cc:	461f      	mov	r7, r3
  4034ce:	4e18      	ldr	r6, [pc, #96]	; (403530 <usart_serial_getchar+0xb8>)
  4034d0:	4621      	mov	r1, r4
  4034d2:	4638      	mov	r0, r7
  4034d4:	47b0      	blx	r6
  4034d6:	2800      	cmp	r0, #0
  4034d8:	d1fa      	bne.n	4034d0 <usart_serial_getchar+0x58>
  4034da:	e019      	b.n	403510 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4034dc:	4b18      	ldr	r3, [pc, #96]	; (403540 <usart_serial_getchar+0xc8>)
  4034de:	429d      	cmp	r5, r3
  4034e0:	d109      	bne.n	4034f6 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  4034e2:	461e      	mov	r6, r3
  4034e4:	4d17      	ldr	r5, [pc, #92]	; (403544 <usart_serial_getchar+0xcc>)
  4034e6:	a901      	add	r1, sp, #4
  4034e8:	4630      	mov	r0, r6
  4034ea:	47a8      	blx	r5
  4034ec:	2800      	cmp	r0, #0
  4034ee:	d1fa      	bne.n	4034e6 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  4034f0:	9b01      	ldr	r3, [sp, #4]
  4034f2:	7023      	strb	r3, [r4, #0]
  4034f4:	e018      	b.n	403528 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4034f6:	4b14      	ldr	r3, [pc, #80]	; (403548 <usart_serial_getchar+0xd0>)
  4034f8:	429d      	cmp	r5, r3
  4034fa:	d109      	bne.n	403510 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  4034fc:	461e      	mov	r6, r3
  4034fe:	4d11      	ldr	r5, [pc, #68]	; (403544 <usart_serial_getchar+0xcc>)
  403500:	a901      	add	r1, sp, #4
  403502:	4630      	mov	r0, r6
  403504:	47a8      	blx	r5
  403506:	2800      	cmp	r0, #0
  403508:	d1fa      	bne.n	403500 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  40350a:	9b01      	ldr	r3, [sp, #4]
  40350c:	7023      	strb	r3, [r4, #0]
  40350e:	e00b      	b.n	403528 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403510:	4b0e      	ldr	r3, [pc, #56]	; (40354c <usart_serial_getchar+0xd4>)
  403512:	429d      	cmp	r5, r3
  403514:	d108      	bne.n	403528 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  403516:	461e      	mov	r6, r3
  403518:	4d0a      	ldr	r5, [pc, #40]	; (403544 <usart_serial_getchar+0xcc>)
  40351a:	a901      	add	r1, sp, #4
  40351c:	4630      	mov	r0, r6
  40351e:	47a8      	blx	r5
  403520:	2800      	cmp	r0, #0
  403522:	d1fa      	bne.n	40351a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  403524:	9b01      	ldr	r3, [sp, #4]
  403526:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403528:	b003      	add	sp, #12
  40352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40352c:	400e0800 	.word	0x400e0800
  403530:	00402f59 	.word	0x00402f59
  403534:	400e0a00 	.word	0x400e0a00
  403538:	400e1a00 	.word	0x400e1a00
  40353c:	400e1c00 	.word	0x400e1c00
  403540:	40024000 	.word	0x40024000
  403544:	00403071 	.word	0x00403071
  403548:	40028000 	.word	0x40028000
  40354c:	4002c000 	.word	0x4002c000

00403550 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403550:	b570      	push	{r4, r5, r6, lr}
  403552:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403554:	4b2a      	ldr	r3, [pc, #168]	; (403600 <usart_serial_putchar+0xb0>)
  403556:	4298      	cmp	r0, r3
  403558:	d108      	bne.n	40356c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40355a:	461e      	mov	r6, r3
  40355c:	4d29      	ldr	r5, [pc, #164]	; (403604 <usart_serial_putchar+0xb4>)
  40355e:	4621      	mov	r1, r4
  403560:	4630      	mov	r0, r6
  403562:	47a8      	blx	r5
  403564:	2800      	cmp	r0, #0
  403566:	d1fa      	bne.n	40355e <usart_serial_putchar+0xe>
		return 1;
  403568:	2001      	movs	r0, #1
  40356a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40356c:	4b26      	ldr	r3, [pc, #152]	; (403608 <usart_serial_putchar+0xb8>)
  40356e:	4298      	cmp	r0, r3
  403570:	d108      	bne.n	403584 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  403572:	461e      	mov	r6, r3
  403574:	4d23      	ldr	r5, [pc, #140]	; (403604 <usart_serial_putchar+0xb4>)
  403576:	4621      	mov	r1, r4
  403578:	4630      	mov	r0, r6
  40357a:	47a8      	blx	r5
  40357c:	2800      	cmp	r0, #0
  40357e:	d1fa      	bne.n	403576 <usart_serial_putchar+0x26>
		return 1;
  403580:	2001      	movs	r0, #1
  403582:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403584:	4b21      	ldr	r3, [pc, #132]	; (40360c <usart_serial_putchar+0xbc>)
  403586:	4298      	cmp	r0, r3
  403588:	d108      	bne.n	40359c <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40358a:	461e      	mov	r6, r3
  40358c:	4d1d      	ldr	r5, [pc, #116]	; (403604 <usart_serial_putchar+0xb4>)
  40358e:	4621      	mov	r1, r4
  403590:	4630      	mov	r0, r6
  403592:	47a8      	blx	r5
  403594:	2800      	cmp	r0, #0
  403596:	d1fa      	bne.n	40358e <usart_serial_putchar+0x3e>
		return 1;
  403598:	2001      	movs	r0, #1
  40359a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40359c:	4b1c      	ldr	r3, [pc, #112]	; (403610 <usart_serial_putchar+0xc0>)
  40359e:	4298      	cmp	r0, r3
  4035a0:	d108      	bne.n	4035b4 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  4035a2:	461e      	mov	r6, r3
  4035a4:	4d17      	ldr	r5, [pc, #92]	; (403604 <usart_serial_putchar+0xb4>)
  4035a6:	4621      	mov	r1, r4
  4035a8:	4630      	mov	r0, r6
  4035aa:	47a8      	blx	r5
  4035ac:	2800      	cmp	r0, #0
  4035ae:	d1fa      	bne.n	4035a6 <usart_serial_putchar+0x56>
		return 1;
  4035b0:	2001      	movs	r0, #1
  4035b2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4035b4:	4b17      	ldr	r3, [pc, #92]	; (403614 <usart_serial_putchar+0xc4>)
  4035b6:	4298      	cmp	r0, r3
  4035b8:	d108      	bne.n	4035cc <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  4035ba:	461e      	mov	r6, r3
  4035bc:	4d16      	ldr	r5, [pc, #88]	; (403618 <usart_serial_putchar+0xc8>)
  4035be:	4621      	mov	r1, r4
  4035c0:	4630      	mov	r0, r6
  4035c2:	47a8      	blx	r5
  4035c4:	2800      	cmp	r0, #0
  4035c6:	d1fa      	bne.n	4035be <usart_serial_putchar+0x6e>
		return 1;
  4035c8:	2001      	movs	r0, #1
  4035ca:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4035cc:	4b13      	ldr	r3, [pc, #76]	; (40361c <usart_serial_putchar+0xcc>)
  4035ce:	4298      	cmp	r0, r3
  4035d0:	d108      	bne.n	4035e4 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  4035d2:	461e      	mov	r6, r3
  4035d4:	4d10      	ldr	r5, [pc, #64]	; (403618 <usart_serial_putchar+0xc8>)
  4035d6:	4621      	mov	r1, r4
  4035d8:	4630      	mov	r0, r6
  4035da:	47a8      	blx	r5
  4035dc:	2800      	cmp	r0, #0
  4035de:	d1fa      	bne.n	4035d6 <usart_serial_putchar+0x86>
		return 1;
  4035e0:	2001      	movs	r0, #1
  4035e2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4035e4:	4b0e      	ldr	r3, [pc, #56]	; (403620 <usart_serial_putchar+0xd0>)
  4035e6:	4298      	cmp	r0, r3
  4035e8:	d108      	bne.n	4035fc <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  4035ea:	461e      	mov	r6, r3
  4035ec:	4d0a      	ldr	r5, [pc, #40]	; (403618 <usart_serial_putchar+0xc8>)
  4035ee:	4621      	mov	r1, r4
  4035f0:	4630      	mov	r0, r6
  4035f2:	47a8      	blx	r5
  4035f4:	2800      	cmp	r0, #0
  4035f6:	d1fa      	bne.n	4035ee <usart_serial_putchar+0x9e>
		return 1;
  4035f8:	2001      	movs	r0, #1
  4035fa:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4035fc:	2000      	movs	r0, #0
}
  4035fe:	bd70      	pop	{r4, r5, r6, pc}
  403600:	400e0800 	.word	0x400e0800
  403604:	00402f45 	.word	0x00402f45
  403608:	400e0a00 	.word	0x400e0a00
  40360c:	400e1a00 	.word	0x400e1a00
  403610:	400e1c00 	.word	0x400e1c00
  403614:	40024000 	.word	0x40024000
  403618:	00403059 	.word	0x00403059
  40361c:	40028000 	.word	0x40028000
  403620:	4002c000 	.word	0x4002c000

00403624 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
  403624:	b570      	push	{r4, r5, r6, lr}
  403626:	b08c      	sub	sp, #48	; 0x30
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	sysclk_init();
  403628:	4b27      	ldr	r3, [pc, #156]	; (4036c8 <main+0xa4>)
  40362a:	4798      	blx	r3
	board_init();
  40362c:	4b27      	ldr	r3, [pc, #156]	; (4036cc <main+0xa8>)
  40362e:	4798      	blx	r3
  403630:	200e      	movs	r0, #14
  403632:	4e27      	ldr	r6, [pc, #156]	; (4036d0 <main+0xac>)
  403634:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403636:	4d27      	ldr	r5, [pc, #156]	; (4036d4 <main+0xb0>)
  403638:	4b27      	ldr	r3, [pc, #156]	; (4036d8 <main+0xb4>)
  40363a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40363c:	4a27      	ldr	r2, [pc, #156]	; (4036dc <main+0xb8>)
  40363e:	4b28      	ldr	r3, [pc, #160]	; (4036e0 <main+0xbc>)
  403640:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403642:	4a28      	ldr	r2, [pc, #160]	; (4036e4 <main+0xc0>)
  403644:	4b28      	ldr	r3, [pc, #160]	; (4036e8 <main+0xc4>)
  403646:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  403648:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40364c:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40364e:	23c0      	movs	r3, #192	; 0xc0
  403650:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  403652:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403656:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  403658:	2400      	movs	r4, #0
  40365a:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40365c:	9404      	str	r4, [sp, #16]
  40365e:	200e      	movs	r0, #14
  403660:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403662:	4a22      	ldr	r2, [pc, #136]	; (4036ec <main+0xc8>)
  403664:	4669      	mov	r1, sp
  403666:	4628      	mov	r0, r5
  403668:	4b21      	ldr	r3, [pc, #132]	; (4036f0 <main+0xcc>)
  40366a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40366c:	4628      	mov	r0, r5
  40366e:	4b21      	ldr	r3, [pc, #132]	; (4036f4 <main+0xd0>)
  403670:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403672:	4628      	mov	r0, r5
  403674:	4b20      	ldr	r3, [pc, #128]	; (4036f8 <main+0xd4>)
  403676:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403678:	4e20      	ldr	r6, [pc, #128]	; (4036fc <main+0xd8>)
  40367a:	6833      	ldr	r3, [r6, #0]
  40367c:	4621      	mov	r1, r4
  40367e:	6898      	ldr	r0, [r3, #8]
  403680:	4d1f      	ldr	r5, [pc, #124]	; (403700 <main+0xdc>)
  403682:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403684:	6833      	ldr	r3, [r6, #0]
  403686:	4621      	mov	r1, r4
  403688:	6858      	ldr	r0, [r3, #4]
  40368a:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  40368c:	481d      	ldr	r0, [pc, #116]	; (403704 <main+0xe0>)
  40368e:	4b1e      	ldr	r3, [pc, #120]	; (403708 <main+0xe4>)
  403690:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  403692:	4b1e      	ldr	r3, [pc, #120]	; (40370c <main+0xe8>)
  403694:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  403696:	9407      	str	r4, [sp, #28]
  403698:	9408      	str	r4, [sp, #32]
  40369a:	9409      	str	r4, [sp, #36]	; 0x24
  40369c:	940a      	str	r4, [sp, #40]	; 0x28
  40369e:	940b      	str	r4, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  4036a0:	4b1b      	ldr	r3, [pc, #108]	; (403710 <main+0xec>)
  4036a2:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  4036a4:	a806      	add	r0, sp, #24
  4036a6:	4b1b      	ldr	r3, [pc, #108]	; (403714 <main+0xf0>)
  4036a8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4036aa:	b120      	cbz	r0, 4036b6 <main+0x92>
  4036ac:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  4036ae:	481a      	ldr	r0, [pc, #104]	; (403718 <main+0xf4>)
  4036b0:	4b15      	ldr	r3, [pc, #84]	; (403708 <main+0xe4>)
  4036b2:	4798      	blx	r3
  4036b4:	e7fe      	b.n	4036b4 <main+0x90>
		while (1) {
		}
	}

	/* Request scan. */
	m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
  4036b6:	20ff      	movs	r0, #255	; 0xff
  4036b8:	4b18      	ldr	r3, [pc, #96]	; (40371c <main+0xf8>)
  4036ba:	4798      	blx	r3

	while (1) {
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS) {
  4036bc:	2500      	movs	r5, #0
  4036be:	4c18      	ldr	r4, [pc, #96]	; (403720 <main+0xfc>)
  4036c0:	4628      	mov	r0, r5
  4036c2:	47a0      	blx	r4
  4036c4:	e7fc      	b.n	4036c0 <main+0x9c>
  4036c6:	bf00      	nop
  4036c8:	004025c5 	.word	0x004025c5
  4036cc:	004026c1 	.word	0x004026c1
  4036d0:	00402d89 	.word	0x00402d89
  4036d4:	40028000 	.word	0x40028000
  4036d8:	20400998 	.word	0x20400998
  4036dc:	00403551 	.word	0x00403551
  4036e0:	20400994 	.word	0x20400994
  4036e4:	00403479 	.word	0x00403479
  4036e8:	20400990 	.word	0x20400990
  4036ec:	08f0d180 	.word	0x08f0d180
  4036f0:	00402ff5 	.word	0x00402ff5
  4036f4:	00403049 	.word	0x00403049
  4036f8:	00403051 	.word	0x00403051
  4036fc:	20400448 	.word	0x20400448
  403700:	0040389d 	.word	0x0040389d
  403704:	004076b4 	.word	0x004076b4
  403708:	00403775 	.word	0x00403775
  40370c:	00400211 	.word	0x00400211
  403710:	0040333d 	.word	0x0040333d
  403714:	00401039 	.word	0x00401039
  403718:	00407710 	.word	0x00407710
  40371c:	004013a5 	.word	0x004013a5
  403720:	00401135 	.word	0x00401135

00403724 <__libc_init_array>:
  403724:	b570      	push	{r4, r5, r6, lr}
  403726:	4e0f      	ldr	r6, [pc, #60]	; (403764 <__libc_init_array+0x40>)
  403728:	4d0f      	ldr	r5, [pc, #60]	; (403768 <__libc_init_array+0x44>)
  40372a:	1b76      	subs	r6, r6, r5
  40372c:	10b6      	asrs	r6, r6, #2
  40372e:	bf18      	it	ne
  403730:	2400      	movne	r4, #0
  403732:	d005      	beq.n	403740 <__libc_init_array+0x1c>
  403734:	3401      	adds	r4, #1
  403736:	f855 3b04 	ldr.w	r3, [r5], #4
  40373a:	4798      	blx	r3
  40373c:	42a6      	cmp	r6, r4
  40373e:	d1f9      	bne.n	403734 <__libc_init_array+0x10>
  403740:	4e0a      	ldr	r6, [pc, #40]	; (40376c <__libc_init_array+0x48>)
  403742:	4d0b      	ldr	r5, [pc, #44]	; (403770 <__libc_init_array+0x4c>)
  403744:	1b76      	subs	r6, r6, r5
  403746:	f004 f823 	bl	407790 <_init>
  40374a:	10b6      	asrs	r6, r6, #2
  40374c:	bf18      	it	ne
  40374e:	2400      	movne	r4, #0
  403750:	d006      	beq.n	403760 <__libc_init_array+0x3c>
  403752:	3401      	adds	r4, #1
  403754:	f855 3b04 	ldr.w	r3, [r5], #4
  403758:	4798      	blx	r3
  40375a:	42a6      	cmp	r6, r4
  40375c:	d1f9      	bne.n	403752 <__libc_init_array+0x2e>
  40375e:	bd70      	pop	{r4, r5, r6, pc}
  403760:	bd70      	pop	{r4, r5, r6, pc}
  403762:	bf00      	nop
  403764:	0040779c 	.word	0x0040779c
  403768:	0040779c 	.word	0x0040779c
  40376c:	004077a4 	.word	0x004077a4
  403770:	0040779c 	.word	0x0040779c

00403774 <iprintf>:
  403774:	b40f      	push	{r0, r1, r2, r3}
  403776:	b500      	push	{lr}
  403778:	4907      	ldr	r1, [pc, #28]	; (403798 <iprintf+0x24>)
  40377a:	b083      	sub	sp, #12
  40377c:	ab04      	add	r3, sp, #16
  40377e:	6808      	ldr	r0, [r1, #0]
  403780:	f853 2b04 	ldr.w	r2, [r3], #4
  403784:	6881      	ldr	r1, [r0, #8]
  403786:	9301      	str	r3, [sp, #4]
  403788:	f000 f9e4 	bl	403b54 <_vfiprintf_r>
  40378c:	b003      	add	sp, #12
  40378e:	f85d eb04 	ldr.w	lr, [sp], #4
  403792:	b004      	add	sp, #16
  403794:	4770      	bx	lr
  403796:	bf00      	nop
  403798:	20400448 	.word	0x20400448

0040379c <memcmp>:
  40379c:	2a03      	cmp	r2, #3
  40379e:	b470      	push	{r4, r5, r6}
  4037a0:	d926      	bls.n	4037f0 <memcmp+0x54>
  4037a2:	ea40 0301 	orr.w	r3, r0, r1
  4037a6:	079b      	lsls	r3, r3, #30
  4037a8:	d011      	beq.n	4037ce <memcmp+0x32>
  4037aa:	7804      	ldrb	r4, [r0, #0]
  4037ac:	780d      	ldrb	r5, [r1, #0]
  4037ae:	42ac      	cmp	r4, r5
  4037b0:	d122      	bne.n	4037f8 <memcmp+0x5c>
  4037b2:	4402      	add	r2, r0
  4037b4:	1c43      	adds	r3, r0, #1
  4037b6:	e005      	b.n	4037c4 <memcmp+0x28>
  4037b8:	f813 4b01 	ldrb.w	r4, [r3], #1
  4037bc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  4037c0:	42ac      	cmp	r4, r5
  4037c2:	d119      	bne.n	4037f8 <memcmp+0x5c>
  4037c4:	4293      	cmp	r3, r2
  4037c6:	d1f7      	bne.n	4037b8 <memcmp+0x1c>
  4037c8:	2000      	movs	r0, #0
  4037ca:	bc70      	pop	{r4, r5, r6}
  4037cc:	4770      	bx	lr
  4037ce:	460c      	mov	r4, r1
  4037d0:	4603      	mov	r3, r0
  4037d2:	681e      	ldr	r6, [r3, #0]
  4037d4:	6825      	ldr	r5, [r4, #0]
  4037d6:	42ae      	cmp	r6, r5
  4037d8:	4618      	mov	r0, r3
  4037da:	4621      	mov	r1, r4
  4037dc:	f103 0304 	add.w	r3, r3, #4
  4037e0:	f104 0404 	add.w	r4, r4, #4
  4037e4:	d1e1      	bne.n	4037aa <memcmp+0xe>
  4037e6:	3a04      	subs	r2, #4
  4037e8:	2a03      	cmp	r2, #3
  4037ea:	4618      	mov	r0, r3
  4037ec:	4621      	mov	r1, r4
  4037ee:	d8f0      	bhi.n	4037d2 <memcmp+0x36>
  4037f0:	2a00      	cmp	r2, #0
  4037f2:	d1da      	bne.n	4037aa <memcmp+0xe>
  4037f4:	4610      	mov	r0, r2
  4037f6:	e7e8      	b.n	4037ca <memcmp+0x2e>
  4037f8:	1b60      	subs	r0, r4, r5
  4037fa:	bc70      	pop	{r4, r5, r6}
  4037fc:	4770      	bx	lr
  4037fe:	bf00      	nop

00403800 <memset>:
  403800:	b470      	push	{r4, r5, r6}
  403802:	0784      	lsls	r4, r0, #30
  403804:	d046      	beq.n	403894 <memset+0x94>
  403806:	1e54      	subs	r4, r2, #1
  403808:	2a00      	cmp	r2, #0
  40380a:	d041      	beq.n	403890 <memset+0x90>
  40380c:	b2cd      	uxtb	r5, r1
  40380e:	4603      	mov	r3, r0
  403810:	e002      	b.n	403818 <memset+0x18>
  403812:	1e62      	subs	r2, r4, #1
  403814:	b3e4      	cbz	r4, 403890 <memset+0x90>
  403816:	4614      	mov	r4, r2
  403818:	f803 5b01 	strb.w	r5, [r3], #1
  40381c:	079a      	lsls	r2, r3, #30
  40381e:	d1f8      	bne.n	403812 <memset+0x12>
  403820:	2c03      	cmp	r4, #3
  403822:	d92e      	bls.n	403882 <memset+0x82>
  403824:	b2cd      	uxtb	r5, r1
  403826:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40382a:	2c0f      	cmp	r4, #15
  40382c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403830:	d919      	bls.n	403866 <memset+0x66>
  403832:	f103 0210 	add.w	r2, r3, #16
  403836:	4626      	mov	r6, r4
  403838:	3e10      	subs	r6, #16
  40383a:	2e0f      	cmp	r6, #15
  40383c:	f842 5c10 	str.w	r5, [r2, #-16]
  403840:	f842 5c0c 	str.w	r5, [r2, #-12]
  403844:	f842 5c08 	str.w	r5, [r2, #-8]
  403848:	f842 5c04 	str.w	r5, [r2, #-4]
  40384c:	f102 0210 	add.w	r2, r2, #16
  403850:	d8f2      	bhi.n	403838 <memset+0x38>
  403852:	f1a4 0210 	sub.w	r2, r4, #16
  403856:	f022 020f 	bic.w	r2, r2, #15
  40385a:	f004 040f 	and.w	r4, r4, #15
  40385e:	3210      	adds	r2, #16
  403860:	2c03      	cmp	r4, #3
  403862:	4413      	add	r3, r2
  403864:	d90d      	bls.n	403882 <memset+0x82>
  403866:	461e      	mov	r6, r3
  403868:	4622      	mov	r2, r4
  40386a:	3a04      	subs	r2, #4
  40386c:	2a03      	cmp	r2, #3
  40386e:	f846 5b04 	str.w	r5, [r6], #4
  403872:	d8fa      	bhi.n	40386a <memset+0x6a>
  403874:	1f22      	subs	r2, r4, #4
  403876:	f022 0203 	bic.w	r2, r2, #3
  40387a:	3204      	adds	r2, #4
  40387c:	4413      	add	r3, r2
  40387e:	f004 0403 	and.w	r4, r4, #3
  403882:	b12c      	cbz	r4, 403890 <memset+0x90>
  403884:	b2c9      	uxtb	r1, r1
  403886:	441c      	add	r4, r3
  403888:	f803 1b01 	strb.w	r1, [r3], #1
  40388c:	42a3      	cmp	r3, r4
  40388e:	d1fb      	bne.n	403888 <memset+0x88>
  403890:	bc70      	pop	{r4, r5, r6}
  403892:	4770      	bx	lr
  403894:	4614      	mov	r4, r2
  403896:	4603      	mov	r3, r0
  403898:	e7c2      	b.n	403820 <memset+0x20>
  40389a:	bf00      	nop

0040389c <setbuf>:
  40389c:	2900      	cmp	r1, #0
  40389e:	bf0c      	ite	eq
  4038a0:	2202      	moveq	r2, #2
  4038a2:	2200      	movne	r2, #0
  4038a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4038a8:	f000 b800 	b.w	4038ac <setvbuf>

004038ac <setvbuf>:
  4038ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4038b0:	4c51      	ldr	r4, [pc, #324]	; (4039f8 <setvbuf+0x14c>)
  4038b2:	6825      	ldr	r5, [r4, #0]
  4038b4:	b083      	sub	sp, #12
  4038b6:	4604      	mov	r4, r0
  4038b8:	460f      	mov	r7, r1
  4038ba:	4690      	mov	r8, r2
  4038bc:	461e      	mov	r6, r3
  4038be:	b115      	cbz	r5, 4038c6 <setvbuf+0x1a>
  4038c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4038c2:	2b00      	cmp	r3, #0
  4038c4:	d079      	beq.n	4039ba <setvbuf+0x10e>
  4038c6:	f1b8 0f02 	cmp.w	r8, #2
  4038ca:	d004      	beq.n	4038d6 <setvbuf+0x2a>
  4038cc:	f1b8 0f01 	cmp.w	r8, #1
  4038d0:	d87f      	bhi.n	4039d2 <setvbuf+0x126>
  4038d2:	2e00      	cmp	r6, #0
  4038d4:	db7d      	blt.n	4039d2 <setvbuf+0x126>
  4038d6:	4621      	mov	r1, r4
  4038d8:	4628      	mov	r0, r5
  4038da:	f001 f987 	bl	404bec <_fflush_r>
  4038de:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4038e0:	b141      	cbz	r1, 4038f4 <setvbuf+0x48>
  4038e2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4038e6:	4299      	cmp	r1, r3
  4038e8:	d002      	beq.n	4038f0 <setvbuf+0x44>
  4038ea:	4628      	mov	r0, r5
  4038ec:	f001 fadc 	bl	404ea8 <_free_r>
  4038f0:	2300      	movs	r3, #0
  4038f2:	6323      	str	r3, [r4, #48]	; 0x30
  4038f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038f8:	2200      	movs	r2, #0
  4038fa:	61a2      	str	r2, [r4, #24]
  4038fc:	6062      	str	r2, [r4, #4]
  4038fe:	061a      	lsls	r2, r3, #24
  403900:	d454      	bmi.n	4039ac <setvbuf+0x100>
  403902:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403906:	f023 0303 	bic.w	r3, r3, #3
  40390a:	f1b8 0f02 	cmp.w	r8, #2
  40390e:	81a3      	strh	r3, [r4, #12]
  403910:	d039      	beq.n	403986 <setvbuf+0xda>
  403912:	ab01      	add	r3, sp, #4
  403914:	466a      	mov	r2, sp
  403916:	4621      	mov	r1, r4
  403918:	4628      	mov	r0, r5
  40391a:	f001 fd63 	bl	4053e4 <__swhatbuf_r>
  40391e:	89a3      	ldrh	r3, [r4, #12]
  403920:	4318      	orrs	r0, r3
  403922:	81a0      	strh	r0, [r4, #12]
  403924:	b326      	cbz	r6, 403970 <setvbuf+0xc4>
  403926:	b327      	cbz	r7, 403972 <setvbuf+0xc6>
  403928:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40392a:	2b00      	cmp	r3, #0
  40392c:	d04d      	beq.n	4039ca <setvbuf+0x11e>
  40392e:	9b00      	ldr	r3, [sp, #0]
  403930:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  403934:	6027      	str	r7, [r4, #0]
  403936:	429e      	cmp	r6, r3
  403938:	bf1c      	itt	ne
  40393a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40393e:	81a0      	strhne	r0, [r4, #12]
  403940:	f1b8 0f01 	cmp.w	r8, #1
  403944:	bf08      	it	eq
  403946:	f040 0001 	orreq.w	r0, r0, #1
  40394a:	b283      	uxth	r3, r0
  40394c:	bf08      	it	eq
  40394e:	81a0      	strheq	r0, [r4, #12]
  403950:	f003 0008 	and.w	r0, r3, #8
  403954:	b280      	uxth	r0, r0
  403956:	6127      	str	r7, [r4, #16]
  403958:	6166      	str	r6, [r4, #20]
  40395a:	b318      	cbz	r0, 4039a4 <setvbuf+0xf8>
  40395c:	f013 0001 	ands.w	r0, r3, #1
  403960:	d02f      	beq.n	4039c2 <setvbuf+0x116>
  403962:	2000      	movs	r0, #0
  403964:	4276      	negs	r6, r6
  403966:	61a6      	str	r6, [r4, #24]
  403968:	60a0      	str	r0, [r4, #8]
  40396a:	b003      	add	sp, #12
  40396c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403970:	9e00      	ldr	r6, [sp, #0]
  403972:	4630      	mov	r0, r6
  403974:	f001 fdaa 	bl	4054cc <malloc>
  403978:	4607      	mov	r7, r0
  40397a:	b368      	cbz	r0, 4039d8 <setvbuf+0x12c>
  40397c:	89a3      	ldrh	r3, [r4, #12]
  40397e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403982:	81a3      	strh	r3, [r4, #12]
  403984:	e7d0      	b.n	403928 <setvbuf+0x7c>
  403986:	2000      	movs	r0, #0
  403988:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40398c:	f043 0302 	orr.w	r3, r3, #2
  403990:	2500      	movs	r5, #0
  403992:	2101      	movs	r1, #1
  403994:	81a3      	strh	r3, [r4, #12]
  403996:	60a5      	str	r5, [r4, #8]
  403998:	6022      	str	r2, [r4, #0]
  40399a:	6122      	str	r2, [r4, #16]
  40399c:	6161      	str	r1, [r4, #20]
  40399e:	b003      	add	sp, #12
  4039a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4039a4:	60a0      	str	r0, [r4, #8]
  4039a6:	b003      	add	sp, #12
  4039a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4039ac:	6921      	ldr	r1, [r4, #16]
  4039ae:	4628      	mov	r0, r5
  4039b0:	f001 fa7a 	bl	404ea8 <_free_r>
  4039b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039b8:	e7a3      	b.n	403902 <setvbuf+0x56>
  4039ba:	4628      	mov	r0, r5
  4039bc:	f001 f9aa 	bl	404d14 <__sinit>
  4039c0:	e781      	b.n	4038c6 <setvbuf+0x1a>
  4039c2:	60a6      	str	r6, [r4, #8]
  4039c4:	b003      	add	sp, #12
  4039c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4039ca:	4628      	mov	r0, r5
  4039cc:	f001 f9a2 	bl	404d14 <__sinit>
  4039d0:	e7ad      	b.n	40392e <setvbuf+0x82>
  4039d2:	f04f 30ff 	mov.w	r0, #4294967295
  4039d6:	e7e2      	b.n	40399e <setvbuf+0xf2>
  4039d8:	f8dd 9000 	ldr.w	r9, [sp]
  4039dc:	45b1      	cmp	r9, r6
  4039de:	d006      	beq.n	4039ee <setvbuf+0x142>
  4039e0:	4648      	mov	r0, r9
  4039e2:	f001 fd73 	bl	4054cc <malloc>
  4039e6:	4607      	mov	r7, r0
  4039e8:	b108      	cbz	r0, 4039ee <setvbuf+0x142>
  4039ea:	464e      	mov	r6, r9
  4039ec:	e7c6      	b.n	40397c <setvbuf+0xd0>
  4039ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039f2:	f04f 30ff 	mov.w	r0, #4294967295
  4039f6:	e7c7      	b.n	403988 <setvbuf+0xdc>
  4039f8:	20400448 	.word	0x20400448
  4039fc:	00000000 	.word	0x00000000

00403a00 <strlen>:
  403a00:	f890 f000 	pld	[r0]
  403a04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403a08:	f020 0107 	bic.w	r1, r0, #7
  403a0c:	f06f 0c00 	mvn.w	ip, #0
  403a10:	f010 0407 	ands.w	r4, r0, #7
  403a14:	f891 f020 	pld	[r1, #32]
  403a18:	f040 8049 	bne.w	403aae <strlen+0xae>
  403a1c:	f04f 0400 	mov.w	r4, #0
  403a20:	f06f 0007 	mvn.w	r0, #7
  403a24:	e9d1 2300 	ldrd	r2, r3, [r1]
  403a28:	f891 f040 	pld	[r1, #64]	; 0x40
  403a2c:	f100 0008 	add.w	r0, r0, #8
  403a30:	fa82 f24c 	uadd8	r2, r2, ip
  403a34:	faa4 f28c 	sel	r2, r4, ip
  403a38:	fa83 f34c 	uadd8	r3, r3, ip
  403a3c:	faa2 f38c 	sel	r3, r2, ip
  403a40:	bb4b      	cbnz	r3, 403a96 <strlen+0x96>
  403a42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403a46:	fa82 f24c 	uadd8	r2, r2, ip
  403a4a:	f100 0008 	add.w	r0, r0, #8
  403a4e:	faa4 f28c 	sel	r2, r4, ip
  403a52:	fa83 f34c 	uadd8	r3, r3, ip
  403a56:	faa2 f38c 	sel	r3, r2, ip
  403a5a:	b9e3      	cbnz	r3, 403a96 <strlen+0x96>
  403a5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403a60:	fa82 f24c 	uadd8	r2, r2, ip
  403a64:	f100 0008 	add.w	r0, r0, #8
  403a68:	faa4 f28c 	sel	r2, r4, ip
  403a6c:	fa83 f34c 	uadd8	r3, r3, ip
  403a70:	faa2 f38c 	sel	r3, r2, ip
  403a74:	b97b      	cbnz	r3, 403a96 <strlen+0x96>
  403a76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403a7a:	f101 0120 	add.w	r1, r1, #32
  403a7e:	fa82 f24c 	uadd8	r2, r2, ip
  403a82:	f100 0008 	add.w	r0, r0, #8
  403a86:	faa4 f28c 	sel	r2, r4, ip
  403a8a:	fa83 f34c 	uadd8	r3, r3, ip
  403a8e:	faa2 f38c 	sel	r3, r2, ip
  403a92:	2b00      	cmp	r3, #0
  403a94:	d0c6      	beq.n	403a24 <strlen+0x24>
  403a96:	2a00      	cmp	r2, #0
  403a98:	bf04      	itt	eq
  403a9a:	3004      	addeq	r0, #4
  403a9c:	461a      	moveq	r2, r3
  403a9e:	ba12      	rev	r2, r2
  403aa0:	fab2 f282 	clz	r2, r2
  403aa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403aa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403aac:	4770      	bx	lr
  403aae:	e9d1 2300 	ldrd	r2, r3, [r1]
  403ab2:	f004 0503 	and.w	r5, r4, #3
  403ab6:	f1c4 0000 	rsb	r0, r4, #0
  403aba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403abe:	f014 0f04 	tst.w	r4, #4
  403ac2:	f891 f040 	pld	[r1, #64]	; 0x40
  403ac6:	fa0c f505 	lsl.w	r5, ip, r5
  403aca:	ea62 0205 	orn	r2, r2, r5
  403ace:	bf1c      	itt	ne
  403ad0:	ea63 0305 	ornne	r3, r3, r5
  403ad4:	4662      	movne	r2, ip
  403ad6:	f04f 0400 	mov.w	r4, #0
  403ada:	e7a9      	b.n	403a30 <strlen+0x30>

00403adc <__sprint_r.part.0>:
  403adc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403ae2:	049c      	lsls	r4, r3, #18
  403ae4:	4692      	mov	sl, r2
  403ae6:	d52c      	bpl.n	403b42 <__sprint_r.part.0+0x66>
  403ae8:	6893      	ldr	r3, [r2, #8]
  403aea:	6812      	ldr	r2, [r2, #0]
  403aec:	b33b      	cbz	r3, 403b3e <__sprint_r.part.0+0x62>
  403aee:	460f      	mov	r7, r1
  403af0:	4680      	mov	r8, r0
  403af2:	f102 0908 	add.w	r9, r2, #8
  403af6:	e919 0060 	ldmdb	r9, {r5, r6}
  403afa:	08b6      	lsrs	r6, r6, #2
  403afc:	d017      	beq.n	403b2e <__sprint_r.part.0+0x52>
  403afe:	3d04      	subs	r5, #4
  403b00:	2400      	movs	r4, #0
  403b02:	e001      	b.n	403b08 <__sprint_r.part.0+0x2c>
  403b04:	42a6      	cmp	r6, r4
  403b06:	d010      	beq.n	403b2a <__sprint_r.part.0+0x4e>
  403b08:	463a      	mov	r2, r7
  403b0a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403b0e:	4640      	mov	r0, r8
  403b10:	f001 f96a 	bl	404de8 <_fputwc_r>
  403b14:	1c43      	adds	r3, r0, #1
  403b16:	f104 0401 	add.w	r4, r4, #1
  403b1a:	d1f3      	bne.n	403b04 <__sprint_r.part.0+0x28>
  403b1c:	2300      	movs	r3, #0
  403b1e:	f8ca 3008 	str.w	r3, [sl, #8]
  403b22:	f8ca 3004 	str.w	r3, [sl, #4]
  403b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b2a:	f8da 3008 	ldr.w	r3, [sl, #8]
  403b2e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  403b32:	f8ca 3008 	str.w	r3, [sl, #8]
  403b36:	f109 0908 	add.w	r9, r9, #8
  403b3a:	2b00      	cmp	r3, #0
  403b3c:	d1db      	bne.n	403af6 <__sprint_r.part.0+0x1a>
  403b3e:	2000      	movs	r0, #0
  403b40:	e7ec      	b.n	403b1c <__sprint_r.part.0+0x40>
  403b42:	f001 fa99 	bl	405078 <__sfvwrite_r>
  403b46:	2300      	movs	r3, #0
  403b48:	f8ca 3008 	str.w	r3, [sl, #8]
  403b4c:	f8ca 3004 	str.w	r3, [sl, #4]
  403b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403b54 <_vfiprintf_r>:
  403b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b58:	b0ab      	sub	sp, #172	; 0xac
  403b5a:	461c      	mov	r4, r3
  403b5c:	9100      	str	r1, [sp, #0]
  403b5e:	4690      	mov	r8, r2
  403b60:	9304      	str	r3, [sp, #16]
  403b62:	9005      	str	r0, [sp, #20]
  403b64:	b118      	cbz	r0, 403b6e <_vfiprintf_r+0x1a>
  403b66:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403b68:	2b00      	cmp	r3, #0
  403b6a:	f000 80de 	beq.w	403d2a <_vfiprintf_r+0x1d6>
  403b6e:	9800      	ldr	r0, [sp, #0]
  403b70:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  403b74:	b28a      	uxth	r2, r1
  403b76:	0495      	lsls	r5, r2, #18
  403b78:	d407      	bmi.n	403b8a <_vfiprintf_r+0x36>
  403b7a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  403b7c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  403b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403b84:	8182      	strh	r2, [r0, #12]
  403b86:	6643      	str	r3, [r0, #100]	; 0x64
  403b88:	b292      	uxth	r2, r2
  403b8a:	0711      	lsls	r1, r2, #28
  403b8c:	f140 80b1 	bpl.w	403cf2 <_vfiprintf_r+0x19e>
  403b90:	9b00      	ldr	r3, [sp, #0]
  403b92:	691b      	ldr	r3, [r3, #16]
  403b94:	2b00      	cmp	r3, #0
  403b96:	f000 80ac 	beq.w	403cf2 <_vfiprintf_r+0x19e>
  403b9a:	f002 021a 	and.w	r2, r2, #26
  403b9e:	2a0a      	cmp	r2, #10
  403ba0:	f000 80b5 	beq.w	403d0e <_vfiprintf_r+0x1ba>
  403ba4:	2300      	movs	r3, #0
  403ba6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  403baa:	9302      	str	r3, [sp, #8]
  403bac:	930f      	str	r3, [sp, #60]	; 0x3c
  403bae:	930e      	str	r3, [sp, #56]	; 0x38
  403bb0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  403bb4:	46da      	mov	sl, fp
  403bb6:	f898 3000 	ldrb.w	r3, [r8]
  403bba:	4644      	mov	r4, r8
  403bbc:	b1fb      	cbz	r3, 403bfe <_vfiprintf_r+0xaa>
  403bbe:	2b25      	cmp	r3, #37	; 0x25
  403bc0:	d102      	bne.n	403bc8 <_vfiprintf_r+0x74>
  403bc2:	e01c      	b.n	403bfe <_vfiprintf_r+0xaa>
  403bc4:	2b25      	cmp	r3, #37	; 0x25
  403bc6:	d003      	beq.n	403bd0 <_vfiprintf_r+0x7c>
  403bc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403bcc:	2b00      	cmp	r3, #0
  403bce:	d1f9      	bne.n	403bc4 <_vfiprintf_r+0x70>
  403bd0:	ebc8 0504 	rsb	r5, r8, r4
  403bd4:	b19d      	cbz	r5, 403bfe <_vfiprintf_r+0xaa>
  403bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403bd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403bda:	f8ca 8000 	str.w	r8, [sl]
  403bde:	3301      	adds	r3, #1
  403be0:	442a      	add	r2, r5
  403be2:	2b07      	cmp	r3, #7
  403be4:	f8ca 5004 	str.w	r5, [sl, #4]
  403be8:	920f      	str	r2, [sp, #60]	; 0x3c
  403bea:	930e      	str	r3, [sp, #56]	; 0x38
  403bec:	dd7b      	ble.n	403ce6 <_vfiprintf_r+0x192>
  403bee:	2a00      	cmp	r2, #0
  403bf0:	f040 8528 	bne.w	404644 <_vfiprintf_r+0xaf0>
  403bf4:	9b02      	ldr	r3, [sp, #8]
  403bf6:	920e      	str	r2, [sp, #56]	; 0x38
  403bf8:	442b      	add	r3, r5
  403bfa:	46da      	mov	sl, fp
  403bfc:	9302      	str	r3, [sp, #8]
  403bfe:	7823      	ldrb	r3, [r4, #0]
  403c00:	2b00      	cmp	r3, #0
  403c02:	f000 843e 	beq.w	404482 <_vfiprintf_r+0x92e>
  403c06:	2100      	movs	r1, #0
  403c08:	f04f 0300 	mov.w	r3, #0
  403c0c:	f04f 32ff 	mov.w	r2, #4294967295
  403c10:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403c14:	f104 0801 	add.w	r8, r4, #1
  403c18:	7863      	ldrb	r3, [r4, #1]
  403c1a:	9201      	str	r2, [sp, #4]
  403c1c:	4608      	mov	r0, r1
  403c1e:	460e      	mov	r6, r1
  403c20:	460c      	mov	r4, r1
  403c22:	f108 0801 	add.w	r8, r8, #1
  403c26:	f1a3 0220 	sub.w	r2, r3, #32
  403c2a:	2a58      	cmp	r2, #88	; 0x58
  403c2c:	f200 8393 	bhi.w	404356 <_vfiprintf_r+0x802>
  403c30:	e8df f012 	tbh	[pc, r2, lsl #1]
  403c34:	03910346 	.word	0x03910346
  403c38:	034e0391 	.word	0x034e0391
  403c3c:	03910391 	.word	0x03910391
  403c40:	03910391 	.word	0x03910391
  403c44:	03910391 	.word	0x03910391
  403c48:	02670289 	.word	0x02670289
  403c4c:	00800391 	.word	0x00800391
  403c50:	0391026c 	.word	0x0391026c
  403c54:	025901c6 	.word	0x025901c6
  403c58:	02590259 	.word	0x02590259
  403c5c:	02590259 	.word	0x02590259
  403c60:	02590259 	.word	0x02590259
  403c64:	02590259 	.word	0x02590259
  403c68:	03910391 	.word	0x03910391
  403c6c:	03910391 	.word	0x03910391
  403c70:	03910391 	.word	0x03910391
  403c74:	03910391 	.word	0x03910391
  403c78:	03910391 	.word	0x03910391
  403c7c:	039101cb 	.word	0x039101cb
  403c80:	03910391 	.word	0x03910391
  403c84:	03910391 	.word	0x03910391
  403c88:	03910391 	.word	0x03910391
  403c8c:	03910391 	.word	0x03910391
  403c90:	02140391 	.word	0x02140391
  403c94:	03910391 	.word	0x03910391
  403c98:	03910391 	.word	0x03910391
  403c9c:	02ee0391 	.word	0x02ee0391
  403ca0:	03910391 	.word	0x03910391
  403ca4:	03910311 	.word	0x03910311
  403ca8:	03910391 	.word	0x03910391
  403cac:	03910391 	.word	0x03910391
  403cb0:	03910391 	.word	0x03910391
  403cb4:	03910391 	.word	0x03910391
  403cb8:	03340391 	.word	0x03340391
  403cbc:	0391038a 	.word	0x0391038a
  403cc0:	03910391 	.word	0x03910391
  403cc4:	038a0367 	.word	0x038a0367
  403cc8:	03910391 	.word	0x03910391
  403ccc:	0391036c 	.word	0x0391036c
  403cd0:	02950379 	.word	0x02950379
  403cd4:	02e90085 	.word	0x02e90085
  403cd8:	029b0391 	.word	0x029b0391
  403cdc:	02ba0391 	.word	0x02ba0391
  403ce0:	03910391 	.word	0x03910391
  403ce4:	0353      	.short	0x0353
  403ce6:	f10a 0a08 	add.w	sl, sl, #8
  403cea:	9b02      	ldr	r3, [sp, #8]
  403cec:	442b      	add	r3, r5
  403cee:	9302      	str	r3, [sp, #8]
  403cf0:	e785      	b.n	403bfe <_vfiprintf_r+0xaa>
  403cf2:	9900      	ldr	r1, [sp, #0]
  403cf4:	9805      	ldr	r0, [sp, #20]
  403cf6:	f000 fe61 	bl	4049bc <__swsetup_r>
  403cfa:	2800      	cmp	r0, #0
  403cfc:	f040 8558 	bne.w	4047b0 <_vfiprintf_r+0xc5c>
  403d00:	9b00      	ldr	r3, [sp, #0]
  403d02:	899a      	ldrh	r2, [r3, #12]
  403d04:	f002 021a 	and.w	r2, r2, #26
  403d08:	2a0a      	cmp	r2, #10
  403d0a:	f47f af4b 	bne.w	403ba4 <_vfiprintf_r+0x50>
  403d0e:	9900      	ldr	r1, [sp, #0]
  403d10:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  403d14:	2b00      	cmp	r3, #0
  403d16:	f6ff af45 	blt.w	403ba4 <_vfiprintf_r+0x50>
  403d1a:	4623      	mov	r3, r4
  403d1c:	4642      	mov	r2, r8
  403d1e:	9805      	ldr	r0, [sp, #20]
  403d20:	f000 fe16 	bl	404950 <__sbprintf>
  403d24:	b02b      	add	sp, #172	; 0xac
  403d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d2a:	f000 fff3 	bl	404d14 <__sinit>
  403d2e:	e71e      	b.n	403b6e <_vfiprintf_r+0x1a>
  403d30:	4264      	negs	r4, r4
  403d32:	9304      	str	r3, [sp, #16]
  403d34:	f046 0604 	orr.w	r6, r6, #4
  403d38:	f898 3000 	ldrb.w	r3, [r8]
  403d3c:	e771      	b.n	403c22 <_vfiprintf_r+0xce>
  403d3e:	2130      	movs	r1, #48	; 0x30
  403d40:	9804      	ldr	r0, [sp, #16]
  403d42:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  403d46:	9901      	ldr	r1, [sp, #4]
  403d48:	9406      	str	r4, [sp, #24]
  403d4a:	f04f 0300 	mov.w	r3, #0
  403d4e:	2278      	movs	r2, #120	; 0x78
  403d50:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403d54:	2900      	cmp	r1, #0
  403d56:	4603      	mov	r3, r0
  403d58:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  403d5c:	6804      	ldr	r4, [r0, #0]
  403d5e:	f103 0304 	add.w	r3, r3, #4
  403d62:	f04f 0500 	mov.w	r5, #0
  403d66:	f046 0202 	orr.w	r2, r6, #2
  403d6a:	f2c0 8525 	blt.w	4047b8 <_vfiprintf_r+0xc64>
  403d6e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403d72:	ea54 0205 	orrs.w	r2, r4, r5
  403d76:	f046 0602 	orr.w	r6, r6, #2
  403d7a:	9304      	str	r3, [sp, #16]
  403d7c:	f040 84bf 	bne.w	4046fe <_vfiprintf_r+0xbaa>
  403d80:	48b3      	ldr	r0, [pc, #716]	; (404050 <_vfiprintf_r+0x4fc>)
  403d82:	9b01      	ldr	r3, [sp, #4]
  403d84:	2b00      	cmp	r3, #0
  403d86:	f040 841c 	bne.w	4045c2 <_vfiprintf_r+0xa6e>
  403d8a:	4699      	mov	r9, r3
  403d8c:	2300      	movs	r3, #0
  403d8e:	9301      	str	r3, [sp, #4]
  403d90:	9303      	str	r3, [sp, #12]
  403d92:	465f      	mov	r7, fp
  403d94:	9b01      	ldr	r3, [sp, #4]
  403d96:	9a03      	ldr	r2, [sp, #12]
  403d98:	4293      	cmp	r3, r2
  403d9a:	bfb8      	it	lt
  403d9c:	4613      	movlt	r3, r2
  403d9e:	461d      	mov	r5, r3
  403da0:	f1b9 0f00 	cmp.w	r9, #0
  403da4:	d000      	beq.n	403da8 <_vfiprintf_r+0x254>
  403da6:	3501      	adds	r5, #1
  403da8:	f016 0302 	ands.w	r3, r6, #2
  403dac:	9307      	str	r3, [sp, #28]
  403dae:	bf18      	it	ne
  403db0:	3502      	addne	r5, #2
  403db2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  403db6:	9308      	str	r3, [sp, #32]
  403db8:	f040 82f1 	bne.w	40439e <_vfiprintf_r+0x84a>
  403dbc:	9b06      	ldr	r3, [sp, #24]
  403dbe:	1b5c      	subs	r4, r3, r5
  403dc0:	2c00      	cmp	r4, #0
  403dc2:	f340 82ec 	ble.w	40439e <_vfiprintf_r+0x84a>
  403dc6:	2c10      	cmp	r4, #16
  403dc8:	f340 8556 	ble.w	404878 <_vfiprintf_r+0xd24>
  403dcc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 404054 <_vfiprintf_r+0x500>
  403dd0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  403dd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403dd6:	46d4      	mov	ip, sl
  403dd8:	2310      	movs	r3, #16
  403dda:	46c2      	mov	sl, r8
  403ddc:	4670      	mov	r0, lr
  403dde:	46a8      	mov	r8, r5
  403de0:	464d      	mov	r5, r9
  403de2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403de6:	e007      	b.n	403df8 <_vfiprintf_r+0x2a4>
  403de8:	f100 0e02 	add.w	lr, r0, #2
  403dec:	f10c 0c08 	add.w	ip, ip, #8
  403df0:	4608      	mov	r0, r1
  403df2:	3c10      	subs	r4, #16
  403df4:	2c10      	cmp	r4, #16
  403df6:	dd13      	ble.n	403e20 <_vfiprintf_r+0x2cc>
  403df8:	1c41      	adds	r1, r0, #1
  403dfa:	3210      	adds	r2, #16
  403dfc:	2907      	cmp	r1, #7
  403dfe:	920f      	str	r2, [sp, #60]	; 0x3c
  403e00:	f8cc 5000 	str.w	r5, [ip]
  403e04:	f8cc 3004 	str.w	r3, [ip, #4]
  403e08:	910e      	str	r1, [sp, #56]	; 0x38
  403e0a:	dded      	ble.n	403de8 <_vfiprintf_r+0x294>
  403e0c:	2a00      	cmp	r2, #0
  403e0e:	f040 82b7 	bne.w	404380 <_vfiprintf_r+0x82c>
  403e12:	3c10      	subs	r4, #16
  403e14:	2c10      	cmp	r4, #16
  403e16:	4610      	mov	r0, r2
  403e18:	f04f 0e01 	mov.w	lr, #1
  403e1c:	46dc      	mov	ip, fp
  403e1e:	dceb      	bgt.n	403df8 <_vfiprintf_r+0x2a4>
  403e20:	46a9      	mov	r9, r5
  403e22:	4670      	mov	r0, lr
  403e24:	4645      	mov	r5, r8
  403e26:	46d0      	mov	r8, sl
  403e28:	46e2      	mov	sl, ip
  403e2a:	4422      	add	r2, r4
  403e2c:	2807      	cmp	r0, #7
  403e2e:	920f      	str	r2, [sp, #60]	; 0x3c
  403e30:	f8ca 9000 	str.w	r9, [sl]
  403e34:	f8ca 4004 	str.w	r4, [sl, #4]
  403e38:	900e      	str	r0, [sp, #56]	; 0x38
  403e3a:	f300 8375 	bgt.w	404528 <_vfiprintf_r+0x9d4>
  403e3e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  403e42:	f10a 0a08 	add.w	sl, sl, #8
  403e46:	f100 0e01 	add.w	lr, r0, #1
  403e4a:	2b00      	cmp	r3, #0
  403e4c:	f040 82b0 	bne.w	4043b0 <_vfiprintf_r+0x85c>
  403e50:	9b07      	ldr	r3, [sp, #28]
  403e52:	2b00      	cmp	r3, #0
  403e54:	f000 82c3 	beq.w	4043de <_vfiprintf_r+0x88a>
  403e58:	3202      	adds	r2, #2
  403e5a:	a90c      	add	r1, sp, #48	; 0x30
  403e5c:	2302      	movs	r3, #2
  403e5e:	f1be 0f07 	cmp.w	lr, #7
  403e62:	920f      	str	r2, [sp, #60]	; 0x3c
  403e64:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  403e68:	e88a 000a 	stmia.w	sl, {r1, r3}
  403e6c:	f340 8378 	ble.w	404560 <_vfiprintf_r+0xa0c>
  403e70:	2a00      	cmp	r2, #0
  403e72:	f040 840a 	bne.w	40468a <_vfiprintf_r+0xb36>
  403e76:	9b08      	ldr	r3, [sp, #32]
  403e78:	2b80      	cmp	r3, #128	; 0x80
  403e7a:	f04f 0e01 	mov.w	lr, #1
  403e7e:	4610      	mov	r0, r2
  403e80:	46da      	mov	sl, fp
  403e82:	f040 82b0 	bne.w	4043e6 <_vfiprintf_r+0x892>
  403e86:	9b06      	ldr	r3, [sp, #24]
  403e88:	1b5c      	subs	r4, r3, r5
  403e8a:	2c00      	cmp	r4, #0
  403e8c:	f340 82ab 	ble.w	4043e6 <_vfiprintf_r+0x892>
  403e90:	2c10      	cmp	r4, #16
  403e92:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404058 <_vfiprintf_r+0x504>
  403e96:	f340 850b 	ble.w	4048b0 <_vfiprintf_r+0xd5c>
  403e9a:	46d6      	mov	lr, sl
  403e9c:	2310      	movs	r3, #16
  403e9e:	46c2      	mov	sl, r8
  403ea0:	46a8      	mov	r8, r5
  403ea2:	464d      	mov	r5, r9
  403ea4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403ea8:	e007      	b.n	403eba <_vfiprintf_r+0x366>
  403eaa:	f100 0c02 	add.w	ip, r0, #2
  403eae:	f10e 0e08 	add.w	lr, lr, #8
  403eb2:	4608      	mov	r0, r1
  403eb4:	3c10      	subs	r4, #16
  403eb6:	2c10      	cmp	r4, #16
  403eb8:	dd13      	ble.n	403ee2 <_vfiprintf_r+0x38e>
  403eba:	1c41      	adds	r1, r0, #1
  403ebc:	3210      	adds	r2, #16
  403ebe:	2907      	cmp	r1, #7
  403ec0:	920f      	str	r2, [sp, #60]	; 0x3c
  403ec2:	f8ce 5000 	str.w	r5, [lr]
  403ec6:	f8ce 3004 	str.w	r3, [lr, #4]
  403eca:	910e      	str	r1, [sp, #56]	; 0x38
  403ecc:	dded      	ble.n	403eaa <_vfiprintf_r+0x356>
  403ece:	2a00      	cmp	r2, #0
  403ed0:	f040 8315 	bne.w	4044fe <_vfiprintf_r+0x9aa>
  403ed4:	3c10      	subs	r4, #16
  403ed6:	2c10      	cmp	r4, #16
  403ed8:	f04f 0c01 	mov.w	ip, #1
  403edc:	4610      	mov	r0, r2
  403ede:	46de      	mov	lr, fp
  403ee0:	dceb      	bgt.n	403eba <_vfiprintf_r+0x366>
  403ee2:	46a9      	mov	r9, r5
  403ee4:	4645      	mov	r5, r8
  403ee6:	46d0      	mov	r8, sl
  403ee8:	46f2      	mov	sl, lr
  403eea:	4422      	add	r2, r4
  403eec:	f1bc 0f07 	cmp.w	ip, #7
  403ef0:	920f      	str	r2, [sp, #60]	; 0x3c
  403ef2:	f8ca 9000 	str.w	r9, [sl]
  403ef6:	f8ca 4004 	str.w	r4, [sl, #4]
  403efa:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  403efe:	f300 83d2 	bgt.w	4046a6 <_vfiprintf_r+0xb52>
  403f02:	9b01      	ldr	r3, [sp, #4]
  403f04:	9903      	ldr	r1, [sp, #12]
  403f06:	1a5c      	subs	r4, r3, r1
  403f08:	2c00      	cmp	r4, #0
  403f0a:	f10a 0a08 	add.w	sl, sl, #8
  403f0e:	f10c 0e01 	add.w	lr, ip, #1
  403f12:	4660      	mov	r0, ip
  403f14:	f300 826d 	bgt.w	4043f2 <_vfiprintf_r+0x89e>
  403f18:	9903      	ldr	r1, [sp, #12]
  403f1a:	f8ca 7000 	str.w	r7, [sl]
  403f1e:	440a      	add	r2, r1
  403f20:	f1be 0f07 	cmp.w	lr, #7
  403f24:	920f      	str	r2, [sp, #60]	; 0x3c
  403f26:	f8ca 1004 	str.w	r1, [sl, #4]
  403f2a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  403f2e:	f340 82ce 	ble.w	4044ce <_vfiprintf_r+0x97a>
  403f32:	2a00      	cmp	r2, #0
  403f34:	f040 833a 	bne.w	4045ac <_vfiprintf_r+0xa58>
  403f38:	0770      	lsls	r0, r6, #29
  403f3a:	920e      	str	r2, [sp, #56]	; 0x38
  403f3c:	d538      	bpl.n	403fb0 <_vfiprintf_r+0x45c>
  403f3e:	9b06      	ldr	r3, [sp, #24]
  403f40:	1b5c      	subs	r4, r3, r5
  403f42:	2c00      	cmp	r4, #0
  403f44:	dd34      	ble.n	403fb0 <_vfiprintf_r+0x45c>
  403f46:	46da      	mov	sl, fp
  403f48:	2c10      	cmp	r4, #16
  403f4a:	f340 84ab 	ble.w	4048a4 <_vfiprintf_r+0xd50>
  403f4e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 404054 <_vfiprintf_r+0x500>
  403f52:	990e      	ldr	r1, [sp, #56]	; 0x38
  403f54:	464f      	mov	r7, r9
  403f56:	2610      	movs	r6, #16
  403f58:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403f5c:	e006      	b.n	403f6c <_vfiprintf_r+0x418>
  403f5e:	1c88      	adds	r0, r1, #2
  403f60:	f10a 0a08 	add.w	sl, sl, #8
  403f64:	4619      	mov	r1, r3
  403f66:	3c10      	subs	r4, #16
  403f68:	2c10      	cmp	r4, #16
  403f6a:	dd13      	ble.n	403f94 <_vfiprintf_r+0x440>
  403f6c:	1c4b      	adds	r3, r1, #1
  403f6e:	3210      	adds	r2, #16
  403f70:	2b07      	cmp	r3, #7
  403f72:	920f      	str	r2, [sp, #60]	; 0x3c
  403f74:	f8ca 7000 	str.w	r7, [sl]
  403f78:	f8ca 6004 	str.w	r6, [sl, #4]
  403f7c:	930e      	str	r3, [sp, #56]	; 0x38
  403f7e:	ddee      	ble.n	403f5e <_vfiprintf_r+0x40a>
  403f80:	2a00      	cmp	r2, #0
  403f82:	f040 828e 	bne.w	4044a2 <_vfiprintf_r+0x94e>
  403f86:	3c10      	subs	r4, #16
  403f88:	2c10      	cmp	r4, #16
  403f8a:	f04f 0001 	mov.w	r0, #1
  403f8e:	4611      	mov	r1, r2
  403f90:	46da      	mov	sl, fp
  403f92:	dceb      	bgt.n	403f6c <_vfiprintf_r+0x418>
  403f94:	46b9      	mov	r9, r7
  403f96:	4422      	add	r2, r4
  403f98:	2807      	cmp	r0, #7
  403f9a:	920f      	str	r2, [sp, #60]	; 0x3c
  403f9c:	f8ca 9000 	str.w	r9, [sl]
  403fa0:	f8ca 4004 	str.w	r4, [sl, #4]
  403fa4:	900e      	str	r0, [sp, #56]	; 0x38
  403fa6:	f340 829b 	ble.w	4044e0 <_vfiprintf_r+0x98c>
  403faa:	2a00      	cmp	r2, #0
  403fac:	f040 8425 	bne.w	4047fa <_vfiprintf_r+0xca6>
  403fb0:	9b02      	ldr	r3, [sp, #8]
  403fb2:	9a06      	ldr	r2, [sp, #24]
  403fb4:	42aa      	cmp	r2, r5
  403fb6:	bfac      	ite	ge
  403fb8:	189b      	addge	r3, r3, r2
  403fba:	195b      	addlt	r3, r3, r5
  403fbc:	9302      	str	r3, [sp, #8]
  403fbe:	e299      	b.n	4044f4 <_vfiprintf_r+0x9a0>
  403fc0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  403fc4:	f898 3000 	ldrb.w	r3, [r8]
  403fc8:	e62b      	b.n	403c22 <_vfiprintf_r+0xce>
  403fca:	9406      	str	r4, [sp, #24]
  403fcc:	2900      	cmp	r1, #0
  403fce:	f040 84af 	bne.w	404930 <_vfiprintf_r+0xddc>
  403fd2:	f046 0610 	orr.w	r6, r6, #16
  403fd6:	06b3      	lsls	r3, r6, #26
  403fd8:	f140 8312 	bpl.w	404600 <_vfiprintf_r+0xaac>
  403fdc:	9904      	ldr	r1, [sp, #16]
  403fde:	3107      	adds	r1, #7
  403fe0:	f021 0107 	bic.w	r1, r1, #7
  403fe4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403fe8:	3108      	adds	r1, #8
  403fea:	9104      	str	r1, [sp, #16]
  403fec:	4614      	mov	r4, r2
  403fee:	461d      	mov	r5, r3
  403ff0:	2a00      	cmp	r2, #0
  403ff2:	f173 0300 	sbcs.w	r3, r3, #0
  403ff6:	f2c0 8386 	blt.w	404706 <_vfiprintf_r+0xbb2>
  403ffa:	9b01      	ldr	r3, [sp, #4]
  403ffc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  404000:	2b00      	cmp	r3, #0
  404002:	f2c0 831a 	blt.w	40463a <_vfiprintf_r+0xae6>
  404006:	ea54 0305 	orrs.w	r3, r4, r5
  40400a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40400e:	f000 80ed 	beq.w	4041ec <_vfiprintf_r+0x698>
  404012:	2d00      	cmp	r5, #0
  404014:	bf08      	it	eq
  404016:	2c0a      	cmpeq	r4, #10
  404018:	f0c0 80ed 	bcc.w	4041f6 <_vfiprintf_r+0x6a2>
  40401c:	465f      	mov	r7, fp
  40401e:	4620      	mov	r0, r4
  404020:	4629      	mov	r1, r5
  404022:	220a      	movs	r2, #10
  404024:	2300      	movs	r3, #0
  404026:	f002 fa47 	bl	4064b8 <__aeabi_uldivmod>
  40402a:	3230      	adds	r2, #48	; 0x30
  40402c:	f807 2d01 	strb.w	r2, [r7, #-1]!
  404030:	4620      	mov	r0, r4
  404032:	4629      	mov	r1, r5
  404034:	2300      	movs	r3, #0
  404036:	220a      	movs	r2, #10
  404038:	f002 fa3e 	bl	4064b8 <__aeabi_uldivmod>
  40403c:	4604      	mov	r4, r0
  40403e:	460d      	mov	r5, r1
  404040:	ea54 0305 	orrs.w	r3, r4, r5
  404044:	d1eb      	bne.n	40401e <_vfiprintf_r+0x4ca>
  404046:	ebc7 030b 	rsb	r3, r7, fp
  40404a:	9303      	str	r3, [sp, #12]
  40404c:	e6a2      	b.n	403d94 <_vfiprintf_r+0x240>
  40404e:	bf00      	nop
  404050:	00407764 	.word	0x00407764
  404054:	00407780 	.word	0x00407780
  404058:	00407740 	.word	0x00407740
  40405c:	9406      	str	r4, [sp, #24]
  40405e:	2900      	cmp	r1, #0
  404060:	f040 8462 	bne.w	404928 <_vfiprintf_r+0xdd4>
  404064:	f046 0610 	orr.w	r6, r6, #16
  404068:	f016 0320 	ands.w	r3, r6, #32
  40406c:	f000 82ae 	beq.w	4045cc <_vfiprintf_r+0xa78>
  404070:	9b04      	ldr	r3, [sp, #16]
  404072:	3307      	adds	r3, #7
  404074:	f023 0307 	bic.w	r3, r3, #7
  404078:	f04f 0200 	mov.w	r2, #0
  40407c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404080:	e9d3 4500 	ldrd	r4, r5, [r3]
  404084:	f103 0208 	add.w	r2, r3, #8
  404088:	9b01      	ldr	r3, [sp, #4]
  40408a:	9204      	str	r2, [sp, #16]
  40408c:	2b00      	cmp	r3, #0
  40408e:	f2c0 8174 	blt.w	40437a <_vfiprintf_r+0x826>
  404092:	ea54 0305 	orrs.w	r3, r4, r5
  404096:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40409a:	f040 816e 	bne.w	40437a <_vfiprintf_r+0x826>
  40409e:	9b01      	ldr	r3, [sp, #4]
  4040a0:	2b00      	cmp	r3, #0
  4040a2:	f000 8430 	beq.w	404906 <_vfiprintf_r+0xdb2>
  4040a6:	f04f 0900 	mov.w	r9, #0
  4040aa:	2400      	movs	r4, #0
  4040ac:	2500      	movs	r5, #0
  4040ae:	465f      	mov	r7, fp
  4040b0:	08e2      	lsrs	r2, r4, #3
  4040b2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4040b6:	08e9      	lsrs	r1, r5, #3
  4040b8:	f004 0307 	and.w	r3, r4, #7
  4040bc:	460d      	mov	r5, r1
  4040be:	4614      	mov	r4, r2
  4040c0:	3330      	adds	r3, #48	; 0x30
  4040c2:	ea54 0205 	orrs.w	r2, r4, r5
  4040c6:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4040ca:	d1f1      	bne.n	4040b0 <_vfiprintf_r+0x55c>
  4040cc:	07f4      	lsls	r4, r6, #31
  4040ce:	d5ba      	bpl.n	404046 <_vfiprintf_r+0x4f2>
  4040d0:	2b30      	cmp	r3, #48	; 0x30
  4040d2:	d0b8      	beq.n	404046 <_vfiprintf_r+0x4f2>
  4040d4:	2230      	movs	r2, #48	; 0x30
  4040d6:	1e7b      	subs	r3, r7, #1
  4040d8:	f807 2c01 	strb.w	r2, [r7, #-1]
  4040dc:	ebc3 020b 	rsb	r2, r3, fp
  4040e0:	9203      	str	r2, [sp, #12]
  4040e2:	461f      	mov	r7, r3
  4040e4:	e656      	b.n	403d94 <_vfiprintf_r+0x240>
  4040e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4040ea:	2400      	movs	r4, #0
  4040ec:	f818 3b01 	ldrb.w	r3, [r8], #1
  4040f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4040f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4040f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4040fc:	2a09      	cmp	r2, #9
  4040fe:	d9f5      	bls.n	4040ec <_vfiprintf_r+0x598>
  404100:	e591      	b.n	403c26 <_vfiprintf_r+0xd2>
  404102:	f898 3000 	ldrb.w	r3, [r8]
  404106:	2101      	movs	r1, #1
  404108:	202b      	movs	r0, #43	; 0x2b
  40410a:	e58a      	b.n	403c22 <_vfiprintf_r+0xce>
  40410c:	f898 3000 	ldrb.w	r3, [r8]
  404110:	2b2a      	cmp	r3, #42	; 0x2a
  404112:	f108 0501 	add.w	r5, r8, #1
  404116:	f000 83dd 	beq.w	4048d4 <_vfiprintf_r+0xd80>
  40411a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40411e:	2a09      	cmp	r2, #9
  404120:	46a8      	mov	r8, r5
  404122:	bf98      	it	ls
  404124:	2500      	movls	r5, #0
  404126:	f200 83ce 	bhi.w	4048c6 <_vfiprintf_r+0xd72>
  40412a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40412e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404132:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  404136:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40413a:	2a09      	cmp	r2, #9
  40413c:	d9f5      	bls.n	40412a <_vfiprintf_r+0x5d6>
  40413e:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  404142:	9201      	str	r2, [sp, #4]
  404144:	e56f      	b.n	403c26 <_vfiprintf_r+0xd2>
  404146:	9a04      	ldr	r2, [sp, #16]
  404148:	6814      	ldr	r4, [r2, #0]
  40414a:	4613      	mov	r3, r2
  40414c:	2c00      	cmp	r4, #0
  40414e:	f103 0304 	add.w	r3, r3, #4
  404152:	f6ff aded 	blt.w	403d30 <_vfiprintf_r+0x1dc>
  404156:	9304      	str	r3, [sp, #16]
  404158:	f898 3000 	ldrb.w	r3, [r8]
  40415c:	e561      	b.n	403c22 <_vfiprintf_r+0xce>
  40415e:	9406      	str	r4, [sp, #24]
  404160:	2900      	cmp	r1, #0
  404162:	d081      	beq.n	404068 <_vfiprintf_r+0x514>
  404164:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404168:	e77e      	b.n	404068 <_vfiprintf_r+0x514>
  40416a:	9a04      	ldr	r2, [sp, #16]
  40416c:	9406      	str	r4, [sp, #24]
  40416e:	6817      	ldr	r7, [r2, #0]
  404170:	f04f 0300 	mov.w	r3, #0
  404174:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404178:	1d14      	adds	r4, r2, #4
  40417a:	9b01      	ldr	r3, [sp, #4]
  40417c:	2f00      	cmp	r7, #0
  40417e:	f000 8386 	beq.w	40488e <_vfiprintf_r+0xd3a>
  404182:	2b00      	cmp	r3, #0
  404184:	f2c0 835f 	blt.w	404846 <_vfiprintf_r+0xcf2>
  404188:	461a      	mov	r2, r3
  40418a:	2100      	movs	r1, #0
  40418c:	4638      	mov	r0, r7
  40418e:	f001 fc5f 	bl	405a50 <memchr>
  404192:	2800      	cmp	r0, #0
  404194:	f000 838f 	beq.w	4048b6 <_vfiprintf_r+0xd62>
  404198:	1bc3      	subs	r3, r0, r7
  40419a:	9303      	str	r3, [sp, #12]
  40419c:	2300      	movs	r3, #0
  40419e:	9404      	str	r4, [sp, #16]
  4041a0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4041a4:	9301      	str	r3, [sp, #4]
  4041a6:	e5f5      	b.n	403d94 <_vfiprintf_r+0x240>
  4041a8:	9406      	str	r4, [sp, #24]
  4041aa:	2900      	cmp	r1, #0
  4041ac:	f040 83b9 	bne.w	404922 <_vfiprintf_r+0xdce>
  4041b0:	f016 0920 	ands.w	r9, r6, #32
  4041b4:	d135      	bne.n	404222 <_vfiprintf_r+0x6ce>
  4041b6:	f016 0310 	ands.w	r3, r6, #16
  4041ba:	d103      	bne.n	4041c4 <_vfiprintf_r+0x670>
  4041bc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4041c0:	f040 832a 	bne.w	404818 <_vfiprintf_r+0xcc4>
  4041c4:	9a04      	ldr	r2, [sp, #16]
  4041c6:	4613      	mov	r3, r2
  4041c8:	6814      	ldr	r4, [r2, #0]
  4041ca:	9a01      	ldr	r2, [sp, #4]
  4041cc:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4041d0:	2a00      	cmp	r2, #0
  4041d2:	f103 0304 	add.w	r3, r3, #4
  4041d6:	f04f 0500 	mov.w	r5, #0
  4041da:	f2c0 8332 	blt.w	404842 <_vfiprintf_r+0xcee>
  4041de:	ea54 0205 	orrs.w	r2, r4, r5
  4041e2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4041e6:	9304      	str	r3, [sp, #16]
  4041e8:	f47f af13 	bne.w	404012 <_vfiprintf_r+0x4be>
  4041ec:	9b01      	ldr	r3, [sp, #4]
  4041ee:	2b00      	cmp	r3, #0
  4041f0:	f43f adcc 	beq.w	403d8c <_vfiprintf_r+0x238>
  4041f4:	2400      	movs	r4, #0
  4041f6:	af2a      	add	r7, sp, #168	; 0xa8
  4041f8:	3430      	adds	r4, #48	; 0x30
  4041fa:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4041fe:	ebc7 030b 	rsb	r3, r7, fp
  404202:	9303      	str	r3, [sp, #12]
  404204:	e5c6      	b.n	403d94 <_vfiprintf_r+0x240>
  404206:	f046 0620 	orr.w	r6, r6, #32
  40420a:	f898 3000 	ldrb.w	r3, [r8]
  40420e:	e508      	b.n	403c22 <_vfiprintf_r+0xce>
  404210:	9406      	str	r4, [sp, #24]
  404212:	2900      	cmp	r1, #0
  404214:	f040 836e 	bne.w	4048f4 <_vfiprintf_r+0xda0>
  404218:	f046 0610 	orr.w	r6, r6, #16
  40421c:	f016 0920 	ands.w	r9, r6, #32
  404220:	d0c9      	beq.n	4041b6 <_vfiprintf_r+0x662>
  404222:	9b04      	ldr	r3, [sp, #16]
  404224:	3307      	adds	r3, #7
  404226:	f023 0307 	bic.w	r3, r3, #7
  40422a:	f04f 0200 	mov.w	r2, #0
  40422e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404232:	e9d3 4500 	ldrd	r4, r5, [r3]
  404236:	f103 0208 	add.w	r2, r3, #8
  40423a:	9b01      	ldr	r3, [sp, #4]
  40423c:	9204      	str	r2, [sp, #16]
  40423e:	2b00      	cmp	r3, #0
  404240:	f2c0 81f9 	blt.w	404636 <_vfiprintf_r+0xae2>
  404244:	ea54 0305 	orrs.w	r3, r4, r5
  404248:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40424c:	f04f 0900 	mov.w	r9, #0
  404250:	f47f aedf 	bne.w	404012 <_vfiprintf_r+0x4be>
  404254:	e7ca      	b.n	4041ec <_vfiprintf_r+0x698>
  404256:	9406      	str	r4, [sp, #24]
  404258:	2900      	cmp	r1, #0
  40425a:	f040 8351 	bne.w	404900 <_vfiprintf_r+0xdac>
  40425e:	06b2      	lsls	r2, r6, #26
  404260:	48ae      	ldr	r0, [pc, #696]	; (40451c <_vfiprintf_r+0x9c8>)
  404262:	d541      	bpl.n	4042e8 <_vfiprintf_r+0x794>
  404264:	9a04      	ldr	r2, [sp, #16]
  404266:	3207      	adds	r2, #7
  404268:	f022 0207 	bic.w	r2, r2, #7
  40426c:	e9d2 4500 	ldrd	r4, r5, [r2]
  404270:	f102 0108 	add.w	r1, r2, #8
  404274:	9104      	str	r1, [sp, #16]
  404276:	f016 0901 	ands.w	r9, r6, #1
  40427a:	f000 8177 	beq.w	40456c <_vfiprintf_r+0xa18>
  40427e:	ea54 0205 	orrs.w	r2, r4, r5
  404282:	f040 8226 	bne.w	4046d2 <_vfiprintf_r+0xb7e>
  404286:	f04f 0300 	mov.w	r3, #0
  40428a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40428e:	9b01      	ldr	r3, [sp, #4]
  404290:	2b00      	cmp	r3, #0
  404292:	f2c0 8196 	blt.w	4045c2 <_vfiprintf_r+0xa6e>
  404296:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40429a:	e572      	b.n	403d82 <_vfiprintf_r+0x22e>
  40429c:	9a04      	ldr	r2, [sp, #16]
  40429e:	9406      	str	r4, [sp, #24]
  4042a0:	6813      	ldr	r3, [r2, #0]
  4042a2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4042a6:	4613      	mov	r3, r2
  4042a8:	f04f 0100 	mov.w	r1, #0
  4042ac:	2501      	movs	r5, #1
  4042ae:	3304      	adds	r3, #4
  4042b0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4042b4:	9304      	str	r3, [sp, #16]
  4042b6:	9503      	str	r5, [sp, #12]
  4042b8:	af10      	add	r7, sp, #64	; 0x40
  4042ba:	2300      	movs	r3, #0
  4042bc:	9301      	str	r3, [sp, #4]
  4042be:	e573      	b.n	403da8 <_vfiprintf_r+0x254>
  4042c0:	f898 3000 	ldrb.w	r3, [r8]
  4042c4:	2800      	cmp	r0, #0
  4042c6:	f47f acac 	bne.w	403c22 <_vfiprintf_r+0xce>
  4042ca:	2101      	movs	r1, #1
  4042cc:	2020      	movs	r0, #32
  4042ce:	e4a8      	b.n	403c22 <_vfiprintf_r+0xce>
  4042d0:	f046 0601 	orr.w	r6, r6, #1
  4042d4:	f898 3000 	ldrb.w	r3, [r8]
  4042d8:	e4a3      	b.n	403c22 <_vfiprintf_r+0xce>
  4042da:	9406      	str	r4, [sp, #24]
  4042dc:	2900      	cmp	r1, #0
  4042de:	f040 830c 	bne.w	4048fa <_vfiprintf_r+0xda6>
  4042e2:	06b2      	lsls	r2, r6, #26
  4042e4:	488e      	ldr	r0, [pc, #568]	; (404520 <_vfiprintf_r+0x9cc>)
  4042e6:	d4bd      	bmi.n	404264 <_vfiprintf_r+0x710>
  4042e8:	9904      	ldr	r1, [sp, #16]
  4042ea:	06f7      	lsls	r7, r6, #27
  4042ec:	460a      	mov	r2, r1
  4042ee:	f100 819d 	bmi.w	40462c <_vfiprintf_r+0xad8>
  4042f2:	0675      	lsls	r5, r6, #25
  4042f4:	f140 819a 	bpl.w	40462c <_vfiprintf_r+0xad8>
  4042f8:	3204      	adds	r2, #4
  4042fa:	880c      	ldrh	r4, [r1, #0]
  4042fc:	9204      	str	r2, [sp, #16]
  4042fe:	2500      	movs	r5, #0
  404300:	e7b9      	b.n	404276 <_vfiprintf_r+0x722>
  404302:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  404306:	f898 3000 	ldrb.w	r3, [r8]
  40430a:	e48a      	b.n	403c22 <_vfiprintf_r+0xce>
  40430c:	f898 3000 	ldrb.w	r3, [r8]
  404310:	2b6c      	cmp	r3, #108	; 0x6c
  404312:	bf03      	ittte	eq
  404314:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  404318:	f046 0620 	orreq.w	r6, r6, #32
  40431c:	f108 0801 	addeq.w	r8, r8, #1
  404320:	f046 0610 	orrne.w	r6, r6, #16
  404324:	e47d      	b.n	403c22 <_vfiprintf_r+0xce>
  404326:	2900      	cmp	r1, #0
  404328:	f040 8309 	bne.w	40493e <_vfiprintf_r+0xdea>
  40432c:	06b4      	lsls	r4, r6, #26
  40432e:	f140 821c 	bpl.w	40476a <_vfiprintf_r+0xc16>
  404332:	9a04      	ldr	r2, [sp, #16]
  404334:	9902      	ldr	r1, [sp, #8]
  404336:	6813      	ldr	r3, [r2, #0]
  404338:	17cd      	asrs	r5, r1, #31
  40433a:	4608      	mov	r0, r1
  40433c:	3204      	adds	r2, #4
  40433e:	4629      	mov	r1, r5
  404340:	9204      	str	r2, [sp, #16]
  404342:	e9c3 0100 	strd	r0, r1, [r3]
  404346:	e436      	b.n	403bb6 <_vfiprintf_r+0x62>
  404348:	9406      	str	r4, [sp, #24]
  40434a:	2900      	cmp	r1, #0
  40434c:	f43f ae43 	beq.w	403fd6 <_vfiprintf_r+0x482>
  404350:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404354:	e63f      	b.n	403fd6 <_vfiprintf_r+0x482>
  404356:	9406      	str	r4, [sp, #24]
  404358:	2900      	cmp	r1, #0
  40435a:	f040 82ed 	bne.w	404938 <_vfiprintf_r+0xde4>
  40435e:	2b00      	cmp	r3, #0
  404360:	f000 808f 	beq.w	404482 <_vfiprintf_r+0x92e>
  404364:	2501      	movs	r5, #1
  404366:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40436a:	f04f 0300 	mov.w	r3, #0
  40436e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404372:	9503      	str	r5, [sp, #12]
  404374:	af10      	add	r7, sp, #64	; 0x40
  404376:	e7a0      	b.n	4042ba <_vfiprintf_r+0x766>
  404378:	9304      	str	r3, [sp, #16]
  40437a:	f04f 0900 	mov.w	r9, #0
  40437e:	e696      	b.n	4040ae <_vfiprintf_r+0x55a>
  404380:	aa0d      	add	r2, sp, #52	; 0x34
  404382:	9900      	ldr	r1, [sp, #0]
  404384:	9309      	str	r3, [sp, #36]	; 0x24
  404386:	4648      	mov	r0, r9
  404388:	f7ff fba8 	bl	403adc <__sprint_r.part.0>
  40438c:	2800      	cmp	r0, #0
  40438e:	d17f      	bne.n	404490 <_vfiprintf_r+0x93c>
  404390:	980e      	ldr	r0, [sp, #56]	; 0x38
  404392:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404394:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404396:	f100 0e01 	add.w	lr, r0, #1
  40439a:	46dc      	mov	ip, fp
  40439c:	e529      	b.n	403df2 <_vfiprintf_r+0x29e>
  40439e:	980e      	ldr	r0, [sp, #56]	; 0x38
  4043a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4043a2:	f100 0e01 	add.w	lr, r0, #1
  4043a6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4043aa:	2b00      	cmp	r3, #0
  4043ac:	f43f ad50 	beq.w	403e50 <_vfiprintf_r+0x2fc>
  4043b0:	3201      	adds	r2, #1
  4043b2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4043b6:	2301      	movs	r3, #1
  4043b8:	f1be 0f07 	cmp.w	lr, #7
  4043bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4043be:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4043c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4043c6:	f340 80bf 	ble.w	404548 <_vfiprintf_r+0x9f4>
  4043ca:	2a00      	cmp	r2, #0
  4043cc:	f040 814e 	bne.w	40466c <_vfiprintf_r+0xb18>
  4043d0:	9907      	ldr	r1, [sp, #28]
  4043d2:	2900      	cmp	r1, #0
  4043d4:	f040 80be 	bne.w	404554 <_vfiprintf_r+0xa00>
  4043d8:	469e      	mov	lr, r3
  4043da:	4610      	mov	r0, r2
  4043dc:	46da      	mov	sl, fp
  4043de:	9b08      	ldr	r3, [sp, #32]
  4043e0:	2b80      	cmp	r3, #128	; 0x80
  4043e2:	f43f ad50 	beq.w	403e86 <_vfiprintf_r+0x332>
  4043e6:	9b01      	ldr	r3, [sp, #4]
  4043e8:	9903      	ldr	r1, [sp, #12]
  4043ea:	1a5c      	subs	r4, r3, r1
  4043ec:	2c00      	cmp	r4, #0
  4043ee:	f77f ad93 	ble.w	403f18 <_vfiprintf_r+0x3c4>
  4043f2:	2c10      	cmp	r4, #16
  4043f4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 404524 <_vfiprintf_r+0x9d0>
  4043f8:	dd25      	ble.n	404446 <_vfiprintf_r+0x8f2>
  4043fa:	46d4      	mov	ip, sl
  4043fc:	2310      	movs	r3, #16
  4043fe:	46c2      	mov	sl, r8
  404400:	46a8      	mov	r8, r5
  404402:	464d      	mov	r5, r9
  404404:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404408:	e007      	b.n	40441a <_vfiprintf_r+0x8c6>
  40440a:	f100 0e02 	add.w	lr, r0, #2
  40440e:	f10c 0c08 	add.w	ip, ip, #8
  404412:	4608      	mov	r0, r1
  404414:	3c10      	subs	r4, #16
  404416:	2c10      	cmp	r4, #16
  404418:	dd11      	ble.n	40443e <_vfiprintf_r+0x8ea>
  40441a:	1c41      	adds	r1, r0, #1
  40441c:	3210      	adds	r2, #16
  40441e:	2907      	cmp	r1, #7
  404420:	920f      	str	r2, [sp, #60]	; 0x3c
  404422:	f8cc 5000 	str.w	r5, [ip]
  404426:	f8cc 3004 	str.w	r3, [ip, #4]
  40442a:	910e      	str	r1, [sp, #56]	; 0x38
  40442c:	dded      	ble.n	40440a <_vfiprintf_r+0x8b6>
  40442e:	b9d2      	cbnz	r2, 404466 <_vfiprintf_r+0x912>
  404430:	3c10      	subs	r4, #16
  404432:	2c10      	cmp	r4, #16
  404434:	f04f 0e01 	mov.w	lr, #1
  404438:	4610      	mov	r0, r2
  40443a:	46dc      	mov	ip, fp
  40443c:	dced      	bgt.n	40441a <_vfiprintf_r+0x8c6>
  40443e:	46a9      	mov	r9, r5
  404440:	4645      	mov	r5, r8
  404442:	46d0      	mov	r8, sl
  404444:	46e2      	mov	sl, ip
  404446:	4422      	add	r2, r4
  404448:	f1be 0f07 	cmp.w	lr, #7
  40444c:	920f      	str	r2, [sp, #60]	; 0x3c
  40444e:	f8ca 9000 	str.w	r9, [sl]
  404452:	f8ca 4004 	str.w	r4, [sl, #4]
  404456:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40445a:	dc2e      	bgt.n	4044ba <_vfiprintf_r+0x966>
  40445c:	f10a 0a08 	add.w	sl, sl, #8
  404460:	f10e 0e01 	add.w	lr, lr, #1
  404464:	e558      	b.n	403f18 <_vfiprintf_r+0x3c4>
  404466:	aa0d      	add	r2, sp, #52	; 0x34
  404468:	9900      	ldr	r1, [sp, #0]
  40446a:	9301      	str	r3, [sp, #4]
  40446c:	4648      	mov	r0, r9
  40446e:	f7ff fb35 	bl	403adc <__sprint_r.part.0>
  404472:	b968      	cbnz	r0, 404490 <_vfiprintf_r+0x93c>
  404474:	980e      	ldr	r0, [sp, #56]	; 0x38
  404476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404478:	9b01      	ldr	r3, [sp, #4]
  40447a:	f100 0e01 	add.w	lr, r0, #1
  40447e:	46dc      	mov	ip, fp
  404480:	e7c8      	b.n	404414 <_vfiprintf_r+0x8c0>
  404482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404484:	b123      	cbz	r3, 404490 <_vfiprintf_r+0x93c>
  404486:	9805      	ldr	r0, [sp, #20]
  404488:	9900      	ldr	r1, [sp, #0]
  40448a:	aa0d      	add	r2, sp, #52	; 0x34
  40448c:	f7ff fb26 	bl	403adc <__sprint_r.part.0>
  404490:	9b00      	ldr	r3, [sp, #0]
  404492:	899b      	ldrh	r3, [r3, #12]
  404494:	065a      	lsls	r2, r3, #25
  404496:	f100 818b 	bmi.w	4047b0 <_vfiprintf_r+0xc5c>
  40449a:	9802      	ldr	r0, [sp, #8]
  40449c:	b02b      	add	sp, #172	; 0xac
  40449e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044a2:	aa0d      	add	r2, sp, #52	; 0x34
  4044a4:	9900      	ldr	r1, [sp, #0]
  4044a6:	4648      	mov	r0, r9
  4044a8:	f7ff fb18 	bl	403adc <__sprint_r.part.0>
  4044ac:	2800      	cmp	r0, #0
  4044ae:	d1ef      	bne.n	404490 <_vfiprintf_r+0x93c>
  4044b0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4044b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4044b4:	1c48      	adds	r0, r1, #1
  4044b6:	46da      	mov	sl, fp
  4044b8:	e555      	b.n	403f66 <_vfiprintf_r+0x412>
  4044ba:	2a00      	cmp	r2, #0
  4044bc:	f040 80fb 	bne.w	4046b6 <_vfiprintf_r+0xb62>
  4044c0:	9a03      	ldr	r2, [sp, #12]
  4044c2:	921b      	str	r2, [sp, #108]	; 0x6c
  4044c4:	2301      	movs	r3, #1
  4044c6:	920f      	str	r2, [sp, #60]	; 0x3c
  4044c8:	971a      	str	r7, [sp, #104]	; 0x68
  4044ca:	930e      	str	r3, [sp, #56]	; 0x38
  4044cc:	46da      	mov	sl, fp
  4044ce:	f10a 0a08 	add.w	sl, sl, #8
  4044d2:	0771      	lsls	r1, r6, #29
  4044d4:	d504      	bpl.n	4044e0 <_vfiprintf_r+0x98c>
  4044d6:	9b06      	ldr	r3, [sp, #24]
  4044d8:	1b5c      	subs	r4, r3, r5
  4044da:	2c00      	cmp	r4, #0
  4044dc:	f73f ad34 	bgt.w	403f48 <_vfiprintf_r+0x3f4>
  4044e0:	9b02      	ldr	r3, [sp, #8]
  4044e2:	9906      	ldr	r1, [sp, #24]
  4044e4:	42a9      	cmp	r1, r5
  4044e6:	bfac      	ite	ge
  4044e8:	185b      	addge	r3, r3, r1
  4044ea:	195b      	addlt	r3, r3, r5
  4044ec:	9302      	str	r3, [sp, #8]
  4044ee:	2a00      	cmp	r2, #0
  4044f0:	f040 80b3 	bne.w	40465a <_vfiprintf_r+0xb06>
  4044f4:	2300      	movs	r3, #0
  4044f6:	930e      	str	r3, [sp, #56]	; 0x38
  4044f8:	46da      	mov	sl, fp
  4044fa:	f7ff bb5c 	b.w	403bb6 <_vfiprintf_r+0x62>
  4044fe:	aa0d      	add	r2, sp, #52	; 0x34
  404500:	9900      	ldr	r1, [sp, #0]
  404502:	9307      	str	r3, [sp, #28]
  404504:	4648      	mov	r0, r9
  404506:	f7ff fae9 	bl	403adc <__sprint_r.part.0>
  40450a:	2800      	cmp	r0, #0
  40450c:	d1c0      	bne.n	404490 <_vfiprintf_r+0x93c>
  40450e:	980e      	ldr	r0, [sp, #56]	; 0x38
  404510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404512:	9b07      	ldr	r3, [sp, #28]
  404514:	f100 0c01 	add.w	ip, r0, #1
  404518:	46de      	mov	lr, fp
  40451a:	e4cb      	b.n	403eb4 <_vfiprintf_r+0x360>
  40451c:	00407750 	.word	0x00407750
  404520:	00407764 	.word	0x00407764
  404524:	00407740 	.word	0x00407740
  404528:	2a00      	cmp	r2, #0
  40452a:	f040 8133 	bne.w	404794 <_vfiprintf_r+0xc40>
  40452e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  404532:	2b00      	cmp	r3, #0
  404534:	f000 80f5 	beq.w	404722 <_vfiprintf_r+0xbce>
  404538:	2301      	movs	r3, #1
  40453a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40453e:	461a      	mov	r2, r3
  404540:	931b      	str	r3, [sp, #108]	; 0x6c
  404542:	469e      	mov	lr, r3
  404544:	911a      	str	r1, [sp, #104]	; 0x68
  404546:	46da      	mov	sl, fp
  404548:	4670      	mov	r0, lr
  40454a:	f10a 0a08 	add.w	sl, sl, #8
  40454e:	f10e 0e01 	add.w	lr, lr, #1
  404552:	e47d      	b.n	403e50 <_vfiprintf_r+0x2fc>
  404554:	a90c      	add	r1, sp, #48	; 0x30
  404556:	2202      	movs	r2, #2
  404558:	469e      	mov	lr, r3
  40455a:	911a      	str	r1, [sp, #104]	; 0x68
  40455c:	921b      	str	r2, [sp, #108]	; 0x6c
  40455e:	46da      	mov	sl, fp
  404560:	4670      	mov	r0, lr
  404562:	f10a 0a08 	add.w	sl, sl, #8
  404566:	f10e 0e01 	add.w	lr, lr, #1
  40456a:	e738      	b.n	4043de <_vfiprintf_r+0x88a>
  40456c:	9b01      	ldr	r3, [sp, #4]
  40456e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404572:	2b00      	cmp	r3, #0
  404574:	f2c0 812a 	blt.w	4047cc <_vfiprintf_r+0xc78>
  404578:	ea54 0305 	orrs.w	r3, r4, r5
  40457c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404580:	f43f abff 	beq.w	403d82 <_vfiprintf_r+0x22e>
  404584:	465f      	mov	r7, fp
  404586:	0923      	lsrs	r3, r4, #4
  404588:	f004 010f 	and.w	r1, r4, #15
  40458c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404590:	092a      	lsrs	r2, r5, #4
  404592:	461c      	mov	r4, r3
  404594:	4615      	mov	r5, r2
  404596:	5c43      	ldrb	r3, [r0, r1]
  404598:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40459c:	ea54 0305 	orrs.w	r3, r4, r5
  4045a0:	d1f1      	bne.n	404586 <_vfiprintf_r+0xa32>
  4045a2:	ebc7 030b 	rsb	r3, r7, fp
  4045a6:	9303      	str	r3, [sp, #12]
  4045a8:	f7ff bbf4 	b.w	403d94 <_vfiprintf_r+0x240>
  4045ac:	aa0d      	add	r2, sp, #52	; 0x34
  4045ae:	9900      	ldr	r1, [sp, #0]
  4045b0:	9805      	ldr	r0, [sp, #20]
  4045b2:	f7ff fa93 	bl	403adc <__sprint_r.part.0>
  4045b6:	2800      	cmp	r0, #0
  4045b8:	f47f af6a 	bne.w	404490 <_vfiprintf_r+0x93c>
  4045bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045be:	46da      	mov	sl, fp
  4045c0:	e787      	b.n	4044d2 <_vfiprintf_r+0x97e>
  4045c2:	f04f 0900 	mov.w	r9, #0
  4045c6:	2400      	movs	r4, #0
  4045c8:	2500      	movs	r5, #0
  4045ca:	e7db      	b.n	404584 <_vfiprintf_r+0xa30>
  4045cc:	f016 0210 	ands.w	r2, r6, #16
  4045d0:	f000 80b2 	beq.w	404738 <_vfiprintf_r+0xbe4>
  4045d4:	9904      	ldr	r1, [sp, #16]
  4045d6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4045da:	460a      	mov	r2, r1
  4045dc:	680c      	ldr	r4, [r1, #0]
  4045de:	9901      	ldr	r1, [sp, #4]
  4045e0:	2900      	cmp	r1, #0
  4045e2:	f102 0204 	add.w	r2, r2, #4
  4045e6:	f04f 0500 	mov.w	r5, #0
  4045ea:	f2c0 8159 	blt.w	4048a0 <_vfiprintf_r+0xd4c>
  4045ee:	ea54 0105 	orrs.w	r1, r4, r5
  4045f2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4045f6:	9204      	str	r2, [sp, #16]
  4045f8:	f43f ad51 	beq.w	40409e <_vfiprintf_r+0x54a>
  4045fc:	4699      	mov	r9, r3
  4045fe:	e556      	b.n	4040ae <_vfiprintf_r+0x55a>
  404600:	06f7      	lsls	r7, r6, #27
  404602:	d40a      	bmi.n	40461a <_vfiprintf_r+0xac6>
  404604:	0675      	lsls	r5, r6, #25
  404606:	d508      	bpl.n	40461a <_vfiprintf_r+0xac6>
  404608:	9904      	ldr	r1, [sp, #16]
  40460a:	f9b1 4000 	ldrsh.w	r4, [r1]
  40460e:	3104      	adds	r1, #4
  404610:	17e5      	asrs	r5, r4, #31
  404612:	4622      	mov	r2, r4
  404614:	462b      	mov	r3, r5
  404616:	9104      	str	r1, [sp, #16]
  404618:	e4ea      	b.n	403ff0 <_vfiprintf_r+0x49c>
  40461a:	9a04      	ldr	r2, [sp, #16]
  40461c:	6814      	ldr	r4, [r2, #0]
  40461e:	4613      	mov	r3, r2
  404620:	3304      	adds	r3, #4
  404622:	17e5      	asrs	r5, r4, #31
  404624:	9304      	str	r3, [sp, #16]
  404626:	4622      	mov	r2, r4
  404628:	462b      	mov	r3, r5
  40462a:	e4e1      	b.n	403ff0 <_vfiprintf_r+0x49c>
  40462c:	6814      	ldr	r4, [r2, #0]
  40462e:	3204      	adds	r2, #4
  404630:	9204      	str	r2, [sp, #16]
  404632:	2500      	movs	r5, #0
  404634:	e61f      	b.n	404276 <_vfiprintf_r+0x722>
  404636:	f04f 0900 	mov.w	r9, #0
  40463a:	ea54 0305 	orrs.w	r3, r4, r5
  40463e:	f47f ace8 	bne.w	404012 <_vfiprintf_r+0x4be>
  404642:	e5d8      	b.n	4041f6 <_vfiprintf_r+0x6a2>
  404644:	aa0d      	add	r2, sp, #52	; 0x34
  404646:	9900      	ldr	r1, [sp, #0]
  404648:	9805      	ldr	r0, [sp, #20]
  40464a:	f7ff fa47 	bl	403adc <__sprint_r.part.0>
  40464e:	2800      	cmp	r0, #0
  404650:	f47f af1e 	bne.w	404490 <_vfiprintf_r+0x93c>
  404654:	46da      	mov	sl, fp
  404656:	f7ff bb48 	b.w	403cea <_vfiprintf_r+0x196>
  40465a:	aa0d      	add	r2, sp, #52	; 0x34
  40465c:	9900      	ldr	r1, [sp, #0]
  40465e:	9805      	ldr	r0, [sp, #20]
  404660:	f7ff fa3c 	bl	403adc <__sprint_r.part.0>
  404664:	2800      	cmp	r0, #0
  404666:	f43f af45 	beq.w	4044f4 <_vfiprintf_r+0x9a0>
  40466a:	e711      	b.n	404490 <_vfiprintf_r+0x93c>
  40466c:	aa0d      	add	r2, sp, #52	; 0x34
  40466e:	9900      	ldr	r1, [sp, #0]
  404670:	9805      	ldr	r0, [sp, #20]
  404672:	f7ff fa33 	bl	403adc <__sprint_r.part.0>
  404676:	2800      	cmp	r0, #0
  404678:	f47f af0a 	bne.w	404490 <_vfiprintf_r+0x93c>
  40467c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40467e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404680:	f100 0e01 	add.w	lr, r0, #1
  404684:	46da      	mov	sl, fp
  404686:	f7ff bbe3 	b.w	403e50 <_vfiprintf_r+0x2fc>
  40468a:	aa0d      	add	r2, sp, #52	; 0x34
  40468c:	9900      	ldr	r1, [sp, #0]
  40468e:	9805      	ldr	r0, [sp, #20]
  404690:	f7ff fa24 	bl	403adc <__sprint_r.part.0>
  404694:	2800      	cmp	r0, #0
  404696:	f47f aefb 	bne.w	404490 <_vfiprintf_r+0x93c>
  40469a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40469c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40469e:	f100 0e01 	add.w	lr, r0, #1
  4046a2:	46da      	mov	sl, fp
  4046a4:	e69b      	b.n	4043de <_vfiprintf_r+0x88a>
  4046a6:	2a00      	cmp	r2, #0
  4046a8:	f040 80d8 	bne.w	40485c <_vfiprintf_r+0xd08>
  4046ac:	f04f 0e01 	mov.w	lr, #1
  4046b0:	4610      	mov	r0, r2
  4046b2:	46da      	mov	sl, fp
  4046b4:	e697      	b.n	4043e6 <_vfiprintf_r+0x892>
  4046b6:	aa0d      	add	r2, sp, #52	; 0x34
  4046b8:	9900      	ldr	r1, [sp, #0]
  4046ba:	9805      	ldr	r0, [sp, #20]
  4046bc:	f7ff fa0e 	bl	403adc <__sprint_r.part.0>
  4046c0:	2800      	cmp	r0, #0
  4046c2:	f47f aee5 	bne.w	404490 <_vfiprintf_r+0x93c>
  4046c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4046c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4046ca:	f103 0e01 	add.w	lr, r3, #1
  4046ce:	46da      	mov	sl, fp
  4046d0:	e422      	b.n	403f18 <_vfiprintf_r+0x3c4>
  4046d2:	2230      	movs	r2, #48	; 0x30
  4046d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  4046d8:	9a01      	ldr	r2, [sp, #4]
  4046da:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4046de:	2a00      	cmp	r2, #0
  4046e0:	f04f 0300 	mov.w	r3, #0
  4046e4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4046e8:	f046 0302 	orr.w	r3, r6, #2
  4046ec:	f2c0 80cb 	blt.w	404886 <_vfiprintf_r+0xd32>
  4046f0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4046f4:	f046 0602 	orr.w	r6, r6, #2
  4046f8:	f04f 0900 	mov.w	r9, #0
  4046fc:	e742      	b.n	404584 <_vfiprintf_r+0xa30>
  4046fe:	f04f 0900 	mov.w	r9, #0
  404702:	4890      	ldr	r0, [pc, #576]	; (404944 <_vfiprintf_r+0xdf0>)
  404704:	e73e      	b.n	404584 <_vfiprintf_r+0xa30>
  404706:	9b01      	ldr	r3, [sp, #4]
  404708:	4264      	negs	r4, r4
  40470a:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40470e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404712:	2b00      	cmp	r3, #0
  404714:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404718:	f6ff ac7b 	blt.w	404012 <_vfiprintf_r+0x4be>
  40471c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404720:	e477      	b.n	404012 <_vfiprintf_r+0x4be>
  404722:	9b07      	ldr	r3, [sp, #28]
  404724:	2b00      	cmp	r3, #0
  404726:	d072      	beq.n	40480e <_vfiprintf_r+0xcba>
  404728:	ab0c      	add	r3, sp, #48	; 0x30
  40472a:	2202      	movs	r2, #2
  40472c:	931a      	str	r3, [sp, #104]	; 0x68
  40472e:	921b      	str	r2, [sp, #108]	; 0x6c
  404730:	f04f 0e01 	mov.w	lr, #1
  404734:	46da      	mov	sl, fp
  404736:	e713      	b.n	404560 <_vfiprintf_r+0xa0c>
  404738:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40473c:	d048      	beq.n	4047d0 <_vfiprintf_r+0xc7c>
  40473e:	9904      	ldr	r1, [sp, #16]
  404740:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404744:	460b      	mov	r3, r1
  404746:	880c      	ldrh	r4, [r1, #0]
  404748:	9901      	ldr	r1, [sp, #4]
  40474a:	2900      	cmp	r1, #0
  40474c:	f103 0304 	add.w	r3, r3, #4
  404750:	f04f 0500 	mov.w	r5, #0
  404754:	f6ff ae10 	blt.w	404378 <_vfiprintf_r+0x824>
  404758:	ea54 0105 	orrs.w	r1, r4, r5
  40475c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404760:	9304      	str	r3, [sp, #16]
  404762:	f43f ac9c 	beq.w	40409e <_vfiprintf_r+0x54a>
  404766:	4691      	mov	r9, r2
  404768:	e4a1      	b.n	4040ae <_vfiprintf_r+0x55a>
  40476a:	06f0      	lsls	r0, r6, #27
  40476c:	d40a      	bmi.n	404784 <_vfiprintf_r+0xc30>
  40476e:	0671      	lsls	r1, r6, #25
  404770:	d508      	bpl.n	404784 <_vfiprintf_r+0xc30>
  404772:	9a04      	ldr	r2, [sp, #16]
  404774:	6813      	ldr	r3, [r2, #0]
  404776:	3204      	adds	r2, #4
  404778:	9204      	str	r2, [sp, #16]
  40477a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40477e:	801a      	strh	r2, [r3, #0]
  404780:	f7ff ba19 	b.w	403bb6 <_vfiprintf_r+0x62>
  404784:	9a04      	ldr	r2, [sp, #16]
  404786:	6813      	ldr	r3, [r2, #0]
  404788:	3204      	adds	r2, #4
  40478a:	9204      	str	r2, [sp, #16]
  40478c:	9a02      	ldr	r2, [sp, #8]
  40478e:	601a      	str	r2, [r3, #0]
  404790:	f7ff ba11 	b.w	403bb6 <_vfiprintf_r+0x62>
  404794:	aa0d      	add	r2, sp, #52	; 0x34
  404796:	9900      	ldr	r1, [sp, #0]
  404798:	9805      	ldr	r0, [sp, #20]
  40479a:	f7ff f99f 	bl	403adc <__sprint_r.part.0>
  40479e:	2800      	cmp	r0, #0
  4047a0:	f47f ae76 	bne.w	404490 <_vfiprintf_r+0x93c>
  4047a4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4047a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4047a8:	f100 0e01 	add.w	lr, r0, #1
  4047ac:	46da      	mov	sl, fp
  4047ae:	e5fa      	b.n	4043a6 <_vfiprintf_r+0x852>
  4047b0:	f04f 30ff 	mov.w	r0, #4294967295
  4047b4:	f7ff bab6 	b.w	403d24 <_vfiprintf_r+0x1d0>
  4047b8:	4862      	ldr	r0, [pc, #392]	; (404944 <_vfiprintf_r+0xdf0>)
  4047ba:	4616      	mov	r6, r2
  4047bc:	ea54 0205 	orrs.w	r2, r4, r5
  4047c0:	9304      	str	r3, [sp, #16]
  4047c2:	f04f 0900 	mov.w	r9, #0
  4047c6:	f47f aedd 	bne.w	404584 <_vfiprintf_r+0xa30>
  4047ca:	e6fc      	b.n	4045c6 <_vfiprintf_r+0xa72>
  4047cc:	9b04      	ldr	r3, [sp, #16]
  4047ce:	e7f5      	b.n	4047bc <_vfiprintf_r+0xc68>
  4047d0:	9a04      	ldr	r2, [sp, #16]
  4047d2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4047d6:	4613      	mov	r3, r2
  4047d8:	6814      	ldr	r4, [r2, #0]
  4047da:	9a01      	ldr	r2, [sp, #4]
  4047dc:	2a00      	cmp	r2, #0
  4047de:	f103 0304 	add.w	r3, r3, #4
  4047e2:	f04f 0500 	mov.w	r5, #0
  4047e6:	f6ff adc7 	blt.w	404378 <_vfiprintf_r+0x824>
  4047ea:	ea54 0205 	orrs.w	r2, r4, r5
  4047ee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4047f2:	9304      	str	r3, [sp, #16]
  4047f4:	f47f ac5b 	bne.w	4040ae <_vfiprintf_r+0x55a>
  4047f8:	e451      	b.n	40409e <_vfiprintf_r+0x54a>
  4047fa:	aa0d      	add	r2, sp, #52	; 0x34
  4047fc:	9900      	ldr	r1, [sp, #0]
  4047fe:	9805      	ldr	r0, [sp, #20]
  404800:	f7ff f96c 	bl	403adc <__sprint_r.part.0>
  404804:	2800      	cmp	r0, #0
  404806:	f47f ae43 	bne.w	404490 <_vfiprintf_r+0x93c>
  40480a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40480c:	e668      	b.n	4044e0 <_vfiprintf_r+0x98c>
  40480e:	4610      	mov	r0, r2
  404810:	f04f 0e01 	mov.w	lr, #1
  404814:	46da      	mov	sl, fp
  404816:	e5e6      	b.n	4043e6 <_vfiprintf_r+0x892>
  404818:	9904      	ldr	r1, [sp, #16]
  40481a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40481e:	460a      	mov	r2, r1
  404820:	880c      	ldrh	r4, [r1, #0]
  404822:	9901      	ldr	r1, [sp, #4]
  404824:	2900      	cmp	r1, #0
  404826:	f102 0204 	add.w	r2, r2, #4
  40482a:	f04f 0500 	mov.w	r5, #0
  40482e:	db4e      	blt.n	4048ce <_vfiprintf_r+0xd7a>
  404830:	ea54 0105 	orrs.w	r1, r4, r5
  404834:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404838:	9204      	str	r2, [sp, #16]
  40483a:	4699      	mov	r9, r3
  40483c:	f47f abe9 	bne.w	404012 <_vfiprintf_r+0x4be>
  404840:	e4d4      	b.n	4041ec <_vfiprintf_r+0x698>
  404842:	9304      	str	r3, [sp, #16]
  404844:	e6f9      	b.n	40463a <_vfiprintf_r+0xae6>
  404846:	4638      	mov	r0, r7
  404848:	9404      	str	r4, [sp, #16]
  40484a:	f7ff f8d9 	bl	403a00 <strlen>
  40484e:	2300      	movs	r3, #0
  404850:	9003      	str	r0, [sp, #12]
  404852:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  404856:	9301      	str	r3, [sp, #4]
  404858:	f7ff ba9c 	b.w	403d94 <_vfiprintf_r+0x240>
  40485c:	aa0d      	add	r2, sp, #52	; 0x34
  40485e:	9900      	ldr	r1, [sp, #0]
  404860:	9805      	ldr	r0, [sp, #20]
  404862:	f7ff f93b 	bl	403adc <__sprint_r.part.0>
  404866:	2800      	cmp	r0, #0
  404868:	f47f ae12 	bne.w	404490 <_vfiprintf_r+0x93c>
  40486c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40486e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404870:	f100 0e01 	add.w	lr, r0, #1
  404874:	46da      	mov	sl, fp
  404876:	e5b6      	b.n	4043e6 <_vfiprintf_r+0x892>
  404878:	980e      	ldr	r0, [sp, #56]	; 0x38
  40487a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40487c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40494c <_vfiprintf_r+0xdf8>
  404880:	3001      	adds	r0, #1
  404882:	f7ff bad2 	b.w	403e2a <_vfiprintf_r+0x2d6>
  404886:	461e      	mov	r6, r3
  404888:	f04f 0900 	mov.w	r9, #0
  40488c:	e67a      	b.n	404584 <_vfiprintf_r+0xa30>
  40488e:	2b06      	cmp	r3, #6
  404890:	bf28      	it	cs
  404892:	2306      	movcs	r3, #6
  404894:	9303      	str	r3, [sp, #12]
  404896:	9404      	str	r4, [sp, #16]
  404898:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40489c:	4f2a      	ldr	r7, [pc, #168]	; (404948 <_vfiprintf_r+0xdf4>)
  40489e:	e50c      	b.n	4042ba <_vfiprintf_r+0x766>
  4048a0:	9204      	str	r2, [sp, #16]
  4048a2:	e56a      	b.n	40437a <_vfiprintf_r+0x826>
  4048a4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4048a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40494c <_vfiprintf_r+0xdf8>
  4048aa:	3001      	adds	r0, #1
  4048ac:	f7ff bb73 	b.w	403f96 <_vfiprintf_r+0x442>
  4048b0:	46f4      	mov	ip, lr
  4048b2:	f7ff bb1a 	b.w	403eea <_vfiprintf_r+0x396>
  4048b6:	9b01      	ldr	r3, [sp, #4]
  4048b8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4048bc:	9303      	str	r3, [sp, #12]
  4048be:	9404      	str	r4, [sp, #16]
  4048c0:	9001      	str	r0, [sp, #4]
  4048c2:	f7ff ba67 	b.w	403d94 <_vfiprintf_r+0x240>
  4048c6:	2200      	movs	r2, #0
  4048c8:	9201      	str	r2, [sp, #4]
  4048ca:	f7ff b9ac 	b.w	403c26 <_vfiprintf_r+0xd2>
  4048ce:	9204      	str	r2, [sp, #16]
  4048d0:	4699      	mov	r9, r3
  4048d2:	e6b2      	b.n	40463a <_vfiprintf_r+0xae6>
  4048d4:	9a04      	ldr	r2, [sp, #16]
  4048d6:	6813      	ldr	r3, [r2, #0]
  4048d8:	9301      	str	r3, [sp, #4]
  4048da:	3204      	adds	r2, #4
  4048dc:	2b00      	cmp	r3, #0
  4048de:	9204      	str	r2, [sp, #16]
  4048e0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4048e4:	46a8      	mov	r8, r5
  4048e6:	f6bf a99c 	bge.w	403c22 <_vfiprintf_r+0xce>
  4048ea:	f04f 32ff 	mov.w	r2, #4294967295
  4048ee:	9201      	str	r2, [sp, #4]
  4048f0:	f7ff b997 	b.w	403c22 <_vfiprintf_r+0xce>
  4048f4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048f8:	e48e      	b.n	404218 <_vfiprintf_r+0x6c4>
  4048fa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048fe:	e4f0      	b.n	4042e2 <_vfiprintf_r+0x78e>
  404900:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404904:	e4ab      	b.n	40425e <_vfiprintf_r+0x70a>
  404906:	4699      	mov	r9, r3
  404908:	07f3      	lsls	r3, r6, #31
  40490a:	d505      	bpl.n	404918 <_vfiprintf_r+0xdc4>
  40490c:	af2a      	add	r7, sp, #168	; 0xa8
  40490e:	2330      	movs	r3, #48	; 0x30
  404910:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404914:	f7ff bb97 	b.w	404046 <_vfiprintf_r+0x4f2>
  404918:	9b01      	ldr	r3, [sp, #4]
  40491a:	9303      	str	r3, [sp, #12]
  40491c:	465f      	mov	r7, fp
  40491e:	f7ff ba39 	b.w	403d94 <_vfiprintf_r+0x240>
  404922:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404926:	e443      	b.n	4041b0 <_vfiprintf_r+0x65c>
  404928:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40492c:	f7ff bb9a 	b.w	404064 <_vfiprintf_r+0x510>
  404930:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404934:	f7ff bb4d 	b.w	403fd2 <_vfiprintf_r+0x47e>
  404938:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40493c:	e50f      	b.n	40435e <_vfiprintf_r+0x80a>
  40493e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404942:	e4f3      	b.n	40432c <_vfiprintf_r+0x7d8>
  404944:	00407764 	.word	0x00407764
  404948:	00407778 	.word	0x00407778
  40494c:	00407780 	.word	0x00407780

00404950 <__sbprintf>:
  404950:	b5f0      	push	{r4, r5, r6, r7, lr}
  404952:	460c      	mov	r4, r1
  404954:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  404958:	8989      	ldrh	r1, [r1, #12]
  40495a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40495c:	89e5      	ldrh	r5, [r4, #14]
  40495e:	9619      	str	r6, [sp, #100]	; 0x64
  404960:	f021 0102 	bic.w	r1, r1, #2
  404964:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404966:	f8ad 500e 	strh.w	r5, [sp, #14]
  40496a:	2500      	movs	r5, #0
  40496c:	69e7      	ldr	r7, [r4, #28]
  40496e:	f8ad 100c 	strh.w	r1, [sp, #12]
  404972:	9609      	str	r6, [sp, #36]	; 0x24
  404974:	9506      	str	r5, [sp, #24]
  404976:	ae1a      	add	r6, sp, #104	; 0x68
  404978:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40497c:	4669      	mov	r1, sp
  40497e:	9600      	str	r6, [sp, #0]
  404980:	9604      	str	r6, [sp, #16]
  404982:	9502      	str	r5, [sp, #8]
  404984:	9505      	str	r5, [sp, #20]
  404986:	9707      	str	r7, [sp, #28]
  404988:	4606      	mov	r6, r0
  40498a:	f7ff f8e3 	bl	403b54 <_vfiprintf_r>
  40498e:	1e05      	subs	r5, r0, #0
  404990:	db07      	blt.n	4049a2 <__sbprintf+0x52>
  404992:	4630      	mov	r0, r6
  404994:	4669      	mov	r1, sp
  404996:	f000 f929 	bl	404bec <_fflush_r>
  40499a:	2800      	cmp	r0, #0
  40499c:	bf18      	it	ne
  40499e:	f04f 35ff 	movne.w	r5, #4294967295
  4049a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4049a6:	065b      	lsls	r3, r3, #25
  4049a8:	d503      	bpl.n	4049b2 <__sbprintf+0x62>
  4049aa:	89a3      	ldrh	r3, [r4, #12]
  4049ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4049b0:	81a3      	strh	r3, [r4, #12]
  4049b2:	4628      	mov	r0, r5
  4049b4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4049b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049ba:	bf00      	nop

004049bc <__swsetup_r>:
  4049bc:	b538      	push	{r3, r4, r5, lr}
  4049be:	4b30      	ldr	r3, [pc, #192]	; (404a80 <__swsetup_r+0xc4>)
  4049c0:	681b      	ldr	r3, [r3, #0]
  4049c2:	4605      	mov	r5, r0
  4049c4:	460c      	mov	r4, r1
  4049c6:	b113      	cbz	r3, 4049ce <__swsetup_r+0x12>
  4049c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4049ca:	2a00      	cmp	r2, #0
  4049cc:	d038      	beq.n	404a40 <__swsetup_r+0x84>
  4049ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4049d2:	b293      	uxth	r3, r2
  4049d4:	0718      	lsls	r0, r3, #28
  4049d6:	d50c      	bpl.n	4049f2 <__swsetup_r+0x36>
  4049d8:	6920      	ldr	r0, [r4, #16]
  4049da:	b1a8      	cbz	r0, 404a08 <__swsetup_r+0x4c>
  4049dc:	f013 0201 	ands.w	r2, r3, #1
  4049e0:	d01e      	beq.n	404a20 <__swsetup_r+0x64>
  4049e2:	6963      	ldr	r3, [r4, #20]
  4049e4:	2200      	movs	r2, #0
  4049e6:	425b      	negs	r3, r3
  4049e8:	61a3      	str	r3, [r4, #24]
  4049ea:	60a2      	str	r2, [r4, #8]
  4049ec:	b1f0      	cbz	r0, 404a2c <__swsetup_r+0x70>
  4049ee:	2000      	movs	r0, #0
  4049f0:	bd38      	pop	{r3, r4, r5, pc}
  4049f2:	06d9      	lsls	r1, r3, #27
  4049f4:	d53c      	bpl.n	404a70 <__swsetup_r+0xb4>
  4049f6:	0758      	lsls	r0, r3, #29
  4049f8:	d426      	bmi.n	404a48 <__swsetup_r+0x8c>
  4049fa:	6920      	ldr	r0, [r4, #16]
  4049fc:	f042 0308 	orr.w	r3, r2, #8
  404a00:	81a3      	strh	r3, [r4, #12]
  404a02:	b29b      	uxth	r3, r3
  404a04:	2800      	cmp	r0, #0
  404a06:	d1e9      	bne.n	4049dc <__swsetup_r+0x20>
  404a08:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404a0c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404a10:	d0e4      	beq.n	4049dc <__swsetup_r+0x20>
  404a12:	4628      	mov	r0, r5
  404a14:	4621      	mov	r1, r4
  404a16:	f000 fd15 	bl	405444 <__smakebuf_r>
  404a1a:	89a3      	ldrh	r3, [r4, #12]
  404a1c:	6920      	ldr	r0, [r4, #16]
  404a1e:	e7dd      	b.n	4049dc <__swsetup_r+0x20>
  404a20:	0799      	lsls	r1, r3, #30
  404a22:	bf58      	it	pl
  404a24:	6962      	ldrpl	r2, [r4, #20]
  404a26:	60a2      	str	r2, [r4, #8]
  404a28:	2800      	cmp	r0, #0
  404a2a:	d1e0      	bne.n	4049ee <__swsetup_r+0x32>
  404a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a30:	061a      	lsls	r2, r3, #24
  404a32:	d5dd      	bpl.n	4049f0 <__swsetup_r+0x34>
  404a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404a38:	81a3      	strh	r3, [r4, #12]
  404a3a:	f04f 30ff 	mov.w	r0, #4294967295
  404a3e:	bd38      	pop	{r3, r4, r5, pc}
  404a40:	4618      	mov	r0, r3
  404a42:	f000 f967 	bl	404d14 <__sinit>
  404a46:	e7c2      	b.n	4049ce <__swsetup_r+0x12>
  404a48:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a4a:	b151      	cbz	r1, 404a62 <__swsetup_r+0xa6>
  404a4c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a50:	4299      	cmp	r1, r3
  404a52:	d004      	beq.n	404a5e <__swsetup_r+0xa2>
  404a54:	4628      	mov	r0, r5
  404a56:	f000 fa27 	bl	404ea8 <_free_r>
  404a5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a5e:	2300      	movs	r3, #0
  404a60:	6323      	str	r3, [r4, #48]	; 0x30
  404a62:	2300      	movs	r3, #0
  404a64:	6920      	ldr	r0, [r4, #16]
  404a66:	6063      	str	r3, [r4, #4]
  404a68:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404a6c:	6020      	str	r0, [r4, #0]
  404a6e:	e7c5      	b.n	4049fc <__swsetup_r+0x40>
  404a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404a74:	2309      	movs	r3, #9
  404a76:	602b      	str	r3, [r5, #0]
  404a78:	f04f 30ff 	mov.w	r0, #4294967295
  404a7c:	81a2      	strh	r2, [r4, #12]
  404a7e:	bd38      	pop	{r3, r4, r5, pc}
  404a80:	20400448 	.word	0x20400448

00404a84 <register_fini>:
  404a84:	4b02      	ldr	r3, [pc, #8]	; (404a90 <register_fini+0xc>)
  404a86:	b113      	cbz	r3, 404a8e <register_fini+0xa>
  404a88:	4802      	ldr	r0, [pc, #8]	; (404a94 <register_fini+0x10>)
  404a8a:	f000 b805 	b.w	404a98 <atexit>
  404a8e:	4770      	bx	lr
  404a90:	00000000 	.word	0x00000000
  404a94:	00404d29 	.word	0x00404d29

00404a98 <atexit>:
  404a98:	2300      	movs	r3, #0
  404a9a:	4601      	mov	r1, r0
  404a9c:	461a      	mov	r2, r3
  404a9e:	4618      	mov	r0, r3
  404aa0:	f001 bc12 	b.w	4062c8 <__register_exitproc>

00404aa4 <__sflush_r>:
  404aa4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404aa8:	b29a      	uxth	r2, r3
  404aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404aae:	460d      	mov	r5, r1
  404ab0:	0711      	lsls	r1, r2, #28
  404ab2:	4680      	mov	r8, r0
  404ab4:	d43c      	bmi.n	404b30 <__sflush_r+0x8c>
  404ab6:	686a      	ldr	r2, [r5, #4]
  404ab8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404abc:	2a00      	cmp	r2, #0
  404abe:	81ab      	strh	r3, [r5, #12]
  404ac0:	dd73      	ble.n	404baa <__sflush_r+0x106>
  404ac2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404ac4:	2c00      	cmp	r4, #0
  404ac6:	d04b      	beq.n	404b60 <__sflush_r+0xbc>
  404ac8:	b29b      	uxth	r3, r3
  404aca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  404ace:	2100      	movs	r1, #0
  404ad0:	b292      	uxth	r2, r2
  404ad2:	f8d8 6000 	ldr.w	r6, [r8]
  404ad6:	f8c8 1000 	str.w	r1, [r8]
  404ada:	2a00      	cmp	r2, #0
  404adc:	d069      	beq.n	404bb2 <__sflush_r+0x10e>
  404ade:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404ae0:	075f      	lsls	r7, r3, #29
  404ae2:	d505      	bpl.n	404af0 <__sflush_r+0x4c>
  404ae4:	6869      	ldr	r1, [r5, #4]
  404ae6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404ae8:	1a52      	subs	r2, r2, r1
  404aea:	b10b      	cbz	r3, 404af0 <__sflush_r+0x4c>
  404aec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404aee:	1ad2      	subs	r2, r2, r3
  404af0:	2300      	movs	r3, #0
  404af2:	69e9      	ldr	r1, [r5, #28]
  404af4:	4640      	mov	r0, r8
  404af6:	47a0      	blx	r4
  404af8:	1c44      	adds	r4, r0, #1
  404afa:	d03c      	beq.n	404b76 <__sflush_r+0xd2>
  404afc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404b00:	692a      	ldr	r2, [r5, #16]
  404b02:	602a      	str	r2, [r5, #0]
  404b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404b08:	2200      	movs	r2, #0
  404b0a:	81ab      	strh	r3, [r5, #12]
  404b0c:	04db      	lsls	r3, r3, #19
  404b0e:	606a      	str	r2, [r5, #4]
  404b10:	d449      	bmi.n	404ba6 <__sflush_r+0x102>
  404b12:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404b14:	f8c8 6000 	str.w	r6, [r8]
  404b18:	b311      	cbz	r1, 404b60 <__sflush_r+0xbc>
  404b1a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404b1e:	4299      	cmp	r1, r3
  404b20:	d002      	beq.n	404b28 <__sflush_r+0x84>
  404b22:	4640      	mov	r0, r8
  404b24:	f000 f9c0 	bl	404ea8 <_free_r>
  404b28:	2000      	movs	r0, #0
  404b2a:	6328      	str	r0, [r5, #48]	; 0x30
  404b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b30:	692e      	ldr	r6, [r5, #16]
  404b32:	b1ae      	cbz	r6, 404b60 <__sflush_r+0xbc>
  404b34:	682c      	ldr	r4, [r5, #0]
  404b36:	602e      	str	r6, [r5, #0]
  404b38:	0790      	lsls	r0, r2, #30
  404b3a:	bf0c      	ite	eq
  404b3c:	696b      	ldreq	r3, [r5, #20]
  404b3e:	2300      	movne	r3, #0
  404b40:	1ba4      	subs	r4, r4, r6
  404b42:	60ab      	str	r3, [r5, #8]
  404b44:	e00a      	b.n	404b5c <__sflush_r+0xb8>
  404b46:	4623      	mov	r3, r4
  404b48:	4632      	mov	r2, r6
  404b4a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404b4c:	69e9      	ldr	r1, [r5, #28]
  404b4e:	4640      	mov	r0, r8
  404b50:	47b8      	blx	r7
  404b52:	2800      	cmp	r0, #0
  404b54:	eba4 0400 	sub.w	r4, r4, r0
  404b58:	4406      	add	r6, r0
  404b5a:	dd04      	ble.n	404b66 <__sflush_r+0xc2>
  404b5c:	2c00      	cmp	r4, #0
  404b5e:	dcf2      	bgt.n	404b46 <__sflush_r+0xa2>
  404b60:	2000      	movs	r0, #0
  404b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b66:	89ab      	ldrh	r3, [r5, #12]
  404b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b6c:	81ab      	strh	r3, [r5, #12]
  404b6e:	f04f 30ff 	mov.w	r0, #4294967295
  404b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b76:	f8d8 2000 	ldr.w	r2, [r8]
  404b7a:	2a1d      	cmp	r2, #29
  404b7c:	d8f3      	bhi.n	404b66 <__sflush_r+0xc2>
  404b7e:	4b1a      	ldr	r3, [pc, #104]	; (404be8 <__sflush_r+0x144>)
  404b80:	40d3      	lsrs	r3, r2
  404b82:	f003 0301 	and.w	r3, r3, #1
  404b86:	f083 0401 	eor.w	r4, r3, #1
  404b8a:	2b00      	cmp	r3, #0
  404b8c:	d0eb      	beq.n	404b66 <__sflush_r+0xc2>
  404b8e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404b92:	6929      	ldr	r1, [r5, #16]
  404b94:	6029      	str	r1, [r5, #0]
  404b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404b9a:	04d9      	lsls	r1, r3, #19
  404b9c:	606c      	str	r4, [r5, #4]
  404b9e:	81ab      	strh	r3, [r5, #12]
  404ba0:	d5b7      	bpl.n	404b12 <__sflush_r+0x6e>
  404ba2:	2a00      	cmp	r2, #0
  404ba4:	d1b5      	bne.n	404b12 <__sflush_r+0x6e>
  404ba6:	6528      	str	r0, [r5, #80]	; 0x50
  404ba8:	e7b3      	b.n	404b12 <__sflush_r+0x6e>
  404baa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404bac:	2a00      	cmp	r2, #0
  404bae:	dc88      	bgt.n	404ac2 <__sflush_r+0x1e>
  404bb0:	e7d6      	b.n	404b60 <__sflush_r+0xbc>
  404bb2:	2301      	movs	r3, #1
  404bb4:	69e9      	ldr	r1, [r5, #28]
  404bb6:	4640      	mov	r0, r8
  404bb8:	47a0      	blx	r4
  404bba:	1c43      	adds	r3, r0, #1
  404bbc:	4602      	mov	r2, r0
  404bbe:	d002      	beq.n	404bc6 <__sflush_r+0x122>
  404bc0:	89ab      	ldrh	r3, [r5, #12]
  404bc2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404bc4:	e78c      	b.n	404ae0 <__sflush_r+0x3c>
  404bc6:	f8d8 3000 	ldr.w	r3, [r8]
  404bca:	2b00      	cmp	r3, #0
  404bcc:	d0f8      	beq.n	404bc0 <__sflush_r+0x11c>
  404bce:	2b1d      	cmp	r3, #29
  404bd0:	d001      	beq.n	404bd6 <__sflush_r+0x132>
  404bd2:	2b16      	cmp	r3, #22
  404bd4:	d102      	bne.n	404bdc <__sflush_r+0x138>
  404bd6:	f8c8 6000 	str.w	r6, [r8]
  404bda:	e7c1      	b.n	404b60 <__sflush_r+0xbc>
  404bdc:	89ab      	ldrh	r3, [r5, #12]
  404bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404be2:	81ab      	strh	r3, [r5, #12]
  404be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404be8:	20400001 	.word	0x20400001

00404bec <_fflush_r>:
  404bec:	b510      	push	{r4, lr}
  404bee:	4604      	mov	r4, r0
  404bf0:	b082      	sub	sp, #8
  404bf2:	b108      	cbz	r0, 404bf8 <_fflush_r+0xc>
  404bf4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404bf6:	b153      	cbz	r3, 404c0e <_fflush_r+0x22>
  404bf8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  404bfc:	b908      	cbnz	r0, 404c02 <_fflush_r+0x16>
  404bfe:	b002      	add	sp, #8
  404c00:	bd10      	pop	{r4, pc}
  404c02:	4620      	mov	r0, r4
  404c04:	b002      	add	sp, #8
  404c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404c0a:	f7ff bf4b 	b.w	404aa4 <__sflush_r>
  404c0e:	9101      	str	r1, [sp, #4]
  404c10:	f000 f880 	bl	404d14 <__sinit>
  404c14:	9901      	ldr	r1, [sp, #4]
  404c16:	e7ef      	b.n	404bf8 <_fflush_r+0xc>

00404c18 <_cleanup_r>:
  404c18:	4901      	ldr	r1, [pc, #4]	; (404c20 <_cleanup_r+0x8>)
  404c1a:	f000 bbaf 	b.w	40537c <_fwalk_reent>
  404c1e:	bf00      	nop
  404c20:	00406391 	.word	0x00406391

00404c24 <__sinit.part.1>:
  404c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c28:	4b35      	ldr	r3, [pc, #212]	; (404d00 <__sinit.part.1+0xdc>)
  404c2a:	6845      	ldr	r5, [r0, #4]
  404c2c:	63c3      	str	r3, [r0, #60]	; 0x3c
  404c2e:	2400      	movs	r4, #0
  404c30:	4607      	mov	r7, r0
  404c32:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  404c36:	2304      	movs	r3, #4
  404c38:	2103      	movs	r1, #3
  404c3a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  404c3e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  404c42:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  404c46:	b083      	sub	sp, #12
  404c48:	602c      	str	r4, [r5, #0]
  404c4a:	606c      	str	r4, [r5, #4]
  404c4c:	60ac      	str	r4, [r5, #8]
  404c4e:	666c      	str	r4, [r5, #100]	; 0x64
  404c50:	81ec      	strh	r4, [r5, #14]
  404c52:	612c      	str	r4, [r5, #16]
  404c54:	616c      	str	r4, [r5, #20]
  404c56:	61ac      	str	r4, [r5, #24]
  404c58:	81ab      	strh	r3, [r5, #12]
  404c5a:	4621      	mov	r1, r4
  404c5c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404c60:	2208      	movs	r2, #8
  404c62:	f7fe fdcd 	bl	403800 <memset>
  404c66:	68be      	ldr	r6, [r7, #8]
  404c68:	f8df b098 	ldr.w	fp, [pc, #152]	; 404d04 <__sinit.part.1+0xe0>
  404c6c:	f8df a098 	ldr.w	sl, [pc, #152]	; 404d08 <__sinit.part.1+0xe4>
  404c70:	f8df 9098 	ldr.w	r9, [pc, #152]	; 404d0c <__sinit.part.1+0xe8>
  404c74:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404d10 <__sinit.part.1+0xec>
  404c78:	f8c5 b020 	str.w	fp, [r5, #32]
  404c7c:	2301      	movs	r3, #1
  404c7e:	2209      	movs	r2, #9
  404c80:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404c84:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404c88:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  404c8c:	61ed      	str	r5, [r5, #28]
  404c8e:	4621      	mov	r1, r4
  404c90:	81f3      	strh	r3, [r6, #14]
  404c92:	81b2      	strh	r2, [r6, #12]
  404c94:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  404c98:	6034      	str	r4, [r6, #0]
  404c9a:	6074      	str	r4, [r6, #4]
  404c9c:	60b4      	str	r4, [r6, #8]
  404c9e:	6674      	str	r4, [r6, #100]	; 0x64
  404ca0:	6134      	str	r4, [r6, #16]
  404ca2:	6174      	str	r4, [r6, #20]
  404ca4:	61b4      	str	r4, [r6, #24]
  404ca6:	2208      	movs	r2, #8
  404ca8:	9301      	str	r3, [sp, #4]
  404caa:	f7fe fda9 	bl	403800 <memset>
  404cae:	68fd      	ldr	r5, [r7, #12]
  404cb0:	61f6      	str	r6, [r6, #28]
  404cb2:	2012      	movs	r0, #18
  404cb4:	2202      	movs	r2, #2
  404cb6:	f8c6 b020 	str.w	fp, [r6, #32]
  404cba:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  404cbe:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  404cc2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  404cc6:	4621      	mov	r1, r4
  404cc8:	81a8      	strh	r0, [r5, #12]
  404cca:	81ea      	strh	r2, [r5, #14]
  404ccc:	602c      	str	r4, [r5, #0]
  404cce:	606c      	str	r4, [r5, #4]
  404cd0:	60ac      	str	r4, [r5, #8]
  404cd2:	666c      	str	r4, [r5, #100]	; 0x64
  404cd4:	612c      	str	r4, [r5, #16]
  404cd6:	616c      	str	r4, [r5, #20]
  404cd8:	61ac      	str	r4, [r5, #24]
  404cda:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404cde:	2208      	movs	r2, #8
  404ce0:	f7fe fd8e 	bl	403800 <memset>
  404ce4:	9b01      	ldr	r3, [sp, #4]
  404ce6:	61ed      	str	r5, [r5, #28]
  404ce8:	f8c5 b020 	str.w	fp, [r5, #32]
  404cec:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404cf0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404cf4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  404cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  404cfa:	b003      	add	sp, #12
  404cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d00:	00404c19 	.word	0x00404c19
  404d04:	004060f9 	.word	0x004060f9
  404d08:	0040611d 	.word	0x0040611d
  404d0c:	00406159 	.word	0x00406159
  404d10:	00406179 	.word	0x00406179

00404d14 <__sinit>:
  404d14:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404d16:	b103      	cbz	r3, 404d1a <__sinit+0x6>
  404d18:	4770      	bx	lr
  404d1a:	f7ff bf83 	b.w	404c24 <__sinit.part.1>
  404d1e:	bf00      	nop

00404d20 <__sfp_lock_acquire>:
  404d20:	4770      	bx	lr
  404d22:	bf00      	nop

00404d24 <__sfp_lock_release>:
  404d24:	4770      	bx	lr
  404d26:	bf00      	nop

00404d28 <__libc_fini_array>:
  404d28:	b538      	push	{r3, r4, r5, lr}
  404d2a:	4d07      	ldr	r5, [pc, #28]	; (404d48 <__libc_fini_array+0x20>)
  404d2c:	4c07      	ldr	r4, [pc, #28]	; (404d4c <__libc_fini_array+0x24>)
  404d2e:	1b2c      	subs	r4, r5, r4
  404d30:	10a4      	asrs	r4, r4, #2
  404d32:	d005      	beq.n	404d40 <__libc_fini_array+0x18>
  404d34:	3c01      	subs	r4, #1
  404d36:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404d3a:	4798      	blx	r3
  404d3c:	2c00      	cmp	r4, #0
  404d3e:	d1f9      	bne.n	404d34 <__libc_fini_array+0xc>
  404d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404d44:	f002 bd2e 	b.w	4077a4 <_fini>
  404d48:	004077b4 	.word	0x004077b4
  404d4c:	004077b0 	.word	0x004077b0

00404d50 <__fputwc>:
  404d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d54:	b082      	sub	sp, #8
  404d56:	4680      	mov	r8, r0
  404d58:	4689      	mov	r9, r1
  404d5a:	4614      	mov	r4, r2
  404d5c:	f000 fb3c 	bl	4053d8 <__locale_mb_cur_max>
  404d60:	2801      	cmp	r0, #1
  404d62:	d033      	beq.n	404dcc <__fputwc+0x7c>
  404d64:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404d68:	464a      	mov	r2, r9
  404d6a:	a901      	add	r1, sp, #4
  404d6c:	4640      	mov	r0, r8
  404d6e:	f001 fa5d 	bl	40622c <_wcrtomb_r>
  404d72:	f1b0 3fff 	cmp.w	r0, #4294967295
  404d76:	4682      	mov	sl, r0
  404d78:	d021      	beq.n	404dbe <__fputwc+0x6e>
  404d7a:	b388      	cbz	r0, 404de0 <__fputwc+0x90>
  404d7c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  404d80:	2500      	movs	r5, #0
  404d82:	e008      	b.n	404d96 <__fputwc+0x46>
  404d84:	6823      	ldr	r3, [r4, #0]
  404d86:	1c5a      	adds	r2, r3, #1
  404d88:	6022      	str	r2, [r4, #0]
  404d8a:	701e      	strb	r6, [r3, #0]
  404d8c:	3501      	adds	r5, #1
  404d8e:	4555      	cmp	r5, sl
  404d90:	d226      	bcs.n	404de0 <__fputwc+0x90>
  404d92:	ab01      	add	r3, sp, #4
  404d94:	5d5e      	ldrb	r6, [r3, r5]
  404d96:	68a3      	ldr	r3, [r4, #8]
  404d98:	3b01      	subs	r3, #1
  404d9a:	2b00      	cmp	r3, #0
  404d9c:	60a3      	str	r3, [r4, #8]
  404d9e:	daf1      	bge.n	404d84 <__fputwc+0x34>
  404da0:	69a7      	ldr	r7, [r4, #24]
  404da2:	42bb      	cmp	r3, r7
  404da4:	4631      	mov	r1, r6
  404da6:	4622      	mov	r2, r4
  404da8:	4640      	mov	r0, r8
  404daa:	db01      	blt.n	404db0 <__fputwc+0x60>
  404dac:	2e0a      	cmp	r6, #10
  404dae:	d1e9      	bne.n	404d84 <__fputwc+0x34>
  404db0:	f001 f9e6 	bl	406180 <__swbuf_r>
  404db4:	1c43      	adds	r3, r0, #1
  404db6:	d1e9      	bne.n	404d8c <__fputwc+0x3c>
  404db8:	b002      	add	sp, #8
  404dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404dbe:	89a3      	ldrh	r3, [r4, #12]
  404dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404dc4:	81a3      	strh	r3, [r4, #12]
  404dc6:	b002      	add	sp, #8
  404dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404dcc:	f109 33ff 	add.w	r3, r9, #4294967295
  404dd0:	2bfe      	cmp	r3, #254	; 0xfe
  404dd2:	d8c7      	bhi.n	404d64 <__fputwc+0x14>
  404dd4:	fa5f f689 	uxtb.w	r6, r9
  404dd8:	4682      	mov	sl, r0
  404dda:	f88d 6004 	strb.w	r6, [sp, #4]
  404dde:	e7cf      	b.n	404d80 <__fputwc+0x30>
  404de0:	4648      	mov	r0, r9
  404de2:	b002      	add	sp, #8
  404de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404de8 <_fputwc_r>:
  404de8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404dec:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  404df0:	d10a      	bne.n	404e08 <_fputwc_r+0x20>
  404df2:	b410      	push	{r4}
  404df4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  404df6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404dfa:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  404dfe:	6654      	str	r4, [r2, #100]	; 0x64
  404e00:	8193      	strh	r3, [r2, #12]
  404e02:	bc10      	pop	{r4}
  404e04:	f7ff bfa4 	b.w	404d50 <__fputwc>
  404e08:	f7ff bfa2 	b.w	404d50 <__fputwc>

00404e0c <_malloc_trim_r>:
  404e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e0e:	4f23      	ldr	r7, [pc, #140]	; (404e9c <_malloc_trim_r+0x90>)
  404e10:	460c      	mov	r4, r1
  404e12:	4606      	mov	r6, r0
  404e14:	f000 ff6a 	bl	405cec <__malloc_lock>
  404e18:	68bb      	ldr	r3, [r7, #8]
  404e1a:	685d      	ldr	r5, [r3, #4]
  404e1c:	f025 0503 	bic.w	r5, r5, #3
  404e20:	1b29      	subs	r1, r5, r4
  404e22:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  404e26:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404e2a:	f021 010f 	bic.w	r1, r1, #15
  404e2e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404e32:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404e36:	db07      	blt.n	404e48 <_malloc_trim_r+0x3c>
  404e38:	2100      	movs	r1, #0
  404e3a:	4630      	mov	r0, r6
  404e3c:	f001 f94a 	bl	4060d4 <_sbrk_r>
  404e40:	68bb      	ldr	r3, [r7, #8]
  404e42:	442b      	add	r3, r5
  404e44:	4298      	cmp	r0, r3
  404e46:	d004      	beq.n	404e52 <_malloc_trim_r+0x46>
  404e48:	4630      	mov	r0, r6
  404e4a:	f000 ff51 	bl	405cf0 <__malloc_unlock>
  404e4e:	2000      	movs	r0, #0
  404e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e52:	4261      	negs	r1, r4
  404e54:	4630      	mov	r0, r6
  404e56:	f001 f93d 	bl	4060d4 <_sbrk_r>
  404e5a:	3001      	adds	r0, #1
  404e5c:	d00d      	beq.n	404e7a <_malloc_trim_r+0x6e>
  404e5e:	4b10      	ldr	r3, [pc, #64]	; (404ea0 <_malloc_trim_r+0x94>)
  404e60:	68ba      	ldr	r2, [r7, #8]
  404e62:	6819      	ldr	r1, [r3, #0]
  404e64:	1b2d      	subs	r5, r5, r4
  404e66:	f045 0501 	orr.w	r5, r5, #1
  404e6a:	4630      	mov	r0, r6
  404e6c:	1b09      	subs	r1, r1, r4
  404e6e:	6055      	str	r5, [r2, #4]
  404e70:	6019      	str	r1, [r3, #0]
  404e72:	f000 ff3d 	bl	405cf0 <__malloc_unlock>
  404e76:	2001      	movs	r0, #1
  404e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e7a:	2100      	movs	r1, #0
  404e7c:	4630      	mov	r0, r6
  404e7e:	f001 f929 	bl	4060d4 <_sbrk_r>
  404e82:	68ba      	ldr	r2, [r7, #8]
  404e84:	1a83      	subs	r3, r0, r2
  404e86:	2b0f      	cmp	r3, #15
  404e88:	ddde      	ble.n	404e48 <_malloc_trim_r+0x3c>
  404e8a:	4c06      	ldr	r4, [pc, #24]	; (404ea4 <_malloc_trim_r+0x98>)
  404e8c:	4904      	ldr	r1, [pc, #16]	; (404ea0 <_malloc_trim_r+0x94>)
  404e8e:	6824      	ldr	r4, [r4, #0]
  404e90:	f043 0301 	orr.w	r3, r3, #1
  404e94:	1b00      	subs	r0, r0, r4
  404e96:	6053      	str	r3, [r2, #4]
  404e98:	6008      	str	r0, [r1, #0]
  404e9a:	e7d5      	b.n	404e48 <_malloc_trim_r+0x3c>
  404e9c:	20400470 	.word	0x20400470
  404ea0:	20400968 	.word	0x20400968
  404ea4:	2040087c 	.word	0x2040087c

00404ea8 <_free_r>:
  404ea8:	2900      	cmp	r1, #0
  404eaa:	d045      	beq.n	404f38 <_free_r+0x90>
  404eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404eb0:	460d      	mov	r5, r1
  404eb2:	4680      	mov	r8, r0
  404eb4:	f000 ff1a 	bl	405cec <__malloc_lock>
  404eb8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404ebc:	496a      	ldr	r1, [pc, #424]	; (405068 <_free_r+0x1c0>)
  404ebe:	f027 0301 	bic.w	r3, r7, #1
  404ec2:	f1a5 0408 	sub.w	r4, r5, #8
  404ec6:	18e2      	adds	r2, r4, r3
  404ec8:	688e      	ldr	r6, [r1, #8]
  404eca:	6850      	ldr	r0, [r2, #4]
  404ecc:	42b2      	cmp	r2, r6
  404ece:	f020 0003 	bic.w	r0, r0, #3
  404ed2:	d062      	beq.n	404f9a <_free_r+0xf2>
  404ed4:	07fe      	lsls	r6, r7, #31
  404ed6:	6050      	str	r0, [r2, #4]
  404ed8:	d40b      	bmi.n	404ef2 <_free_r+0x4a>
  404eda:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404ede:	1be4      	subs	r4, r4, r7
  404ee0:	f101 0e08 	add.w	lr, r1, #8
  404ee4:	68a5      	ldr	r5, [r4, #8]
  404ee6:	4575      	cmp	r5, lr
  404ee8:	443b      	add	r3, r7
  404eea:	d06f      	beq.n	404fcc <_free_r+0x124>
  404eec:	68e7      	ldr	r7, [r4, #12]
  404eee:	60ef      	str	r7, [r5, #12]
  404ef0:	60bd      	str	r5, [r7, #8]
  404ef2:	1815      	adds	r5, r2, r0
  404ef4:	686d      	ldr	r5, [r5, #4]
  404ef6:	07ed      	lsls	r5, r5, #31
  404ef8:	d542      	bpl.n	404f80 <_free_r+0xd8>
  404efa:	f043 0201 	orr.w	r2, r3, #1
  404efe:	6062      	str	r2, [r4, #4]
  404f00:	50e3      	str	r3, [r4, r3]
  404f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404f06:	d218      	bcs.n	404f3a <_free_r+0x92>
  404f08:	08db      	lsrs	r3, r3, #3
  404f0a:	1c5a      	adds	r2, r3, #1
  404f0c:	684d      	ldr	r5, [r1, #4]
  404f0e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  404f12:	60a7      	str	r7, [r4, #8]
  404f14:	2001      	movs	r0, #1
  404f16:	109b      	asrs	r3, r3, #2
  404f18:	fa00 f303 	lsl.w	r3, r0, r3
  404f1c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  404f20:	431d      	orrs	r5, r3
  404f22:	3808      	subs	r0, #8
  404f24:	60e0      	str	r0, [r4, #12]
  404f26:	604d      	str	r5, [r1, #4]
  404f28:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  404f2c:	60fc      	str	r4, [r7, #12]
  404f2e:	4640      	mov	r0, r8
  404f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404f34:	f000 bedc 	b.w	405cf0 <__malloc_unlock>
  404f38:	4770      	bx	lr
  404f3a:	0a5a      	lsrs	r2, r3, #9
  404f3c:	2a04      	cmp	r2, #4
  404f3e:	d853      	bhi.n	404fe8 <_free_r+0x140>
  404f40:	099a      	lsrs	r2, r3, #6
  404f42:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404f46:	007f      	lsls	r7, r7, #1
  404f48:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404f4c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  404f50:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  404f54:	4944      	ldr	r1, [pc, #272]	; (405068 <_free_r+0x1c0>)
  404f56:	3808      	subs	r0, #8
  404f58:	4290      	cmp	r0, r2
  404f5a:	d04d      	beq.n	404ff8 <_free_r+0x150>
  404f5c:	6851      	ldr	r1, [r2, #4]
  404f5e:	f021 0103 	bic.w	r1, r1, #3
  404f62:	428b      	cmp	r3, r1
  404f64:	d202      	bcs.n	404f6c <_free_r+0xc4>
  404f66:	6892      	ldr	r2, [r2, #8]
  404f68:	4290      	cmp	r0, r2
  404f6a:	d1f7      	bne.n	404f5c <_free_r+0xb4>
  404f6c:	68d0      	ldr	r0, [r2, #12]
  404f6e:	60e0      	str	r0, [r4, #12]
  404f70:	60a2      	str	r2, [r4, #8]
  404f72:	6084      	str	r4, [r0, #8]
  404f74:	60d4      	str	r4, [r2, #12]
  404f76:	4640      	mov	r0, r8
  404f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404f7c:	f000 beb8 	b.w	405cf0 <__malloc_unlock>
  404f80:	6895      	ldr	r5, [r2, #8]
  404f82:	4f3a      	ldr	r7, [pc, #232]	; (40506c <_free_r+0x1c4>)
  404f84:	42bd      	cmp	r5, r7
  404f86:	4403      	add	r3, r0
  404f88:	d03f      	beq.n	40500a <_free_r+0x162>
  404f8a:	68d0      	ldr	r0, [r2, #12]
  404f8c:	60e8      	str	r0, [r5, #12]
  404f8e:	f043 0201 	orr.w	r2, r3, #1
  404f92:	6085      	str	r5, [r0, #8]
  404f94:	6062      	str	r2, [r4, #4]
  404f96:	50e3      	str	r3, [r4, r3]
  404f98:	e7b3      	b.n	404f02 <_free_r+0x5a>
  404f9a:	07ff      	lsls	r7, r7, #31
  404f9c:	4403      	add	r3, r0
  404f9e:	d407      	bmi.n	404fb0 <_free_r+0x108>
  404fa0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404fa4:	1aa4      	subs	r4, r4, r2
  404fa6:	4413      	add	r3, r2
  404fa8:	68a0      	ldr	r0, [r4, #8]
  404faa:	68e2      	ldr	r2, [r4, #12]
  404fac:	60c2      	str	r2, [r0, #12]
  404fae:	6090      	str	r0, [r2, #8]
  404fb0:	4a2f      	ldr	r2, [pc, #188]	; (405070 <_free_r+0x1c8>)
  404fb2:	6812      	ldr	r2, [r2, #0]
  404fb4:	f043 0001 	orr.w	r0, r3, #1
  404fb8:	4293      	cmp	r3, r2
  404fba:	6060      	str	r0, [r4, #4]
  404fbc:	608c      	str	r4, [r1, #8]
  404fbe:	d3b6      	bcc.n	404f2e <_free_r+0x86>
  404fc0:	4b2c      	ldr	r3, [pc, #176]	; (405074 <_free_r+0x1cc>)
  404fc2:	4640      	mov	r0, r8
  404fc4:	6819      	ldr	r1, [r3, #0]
  404fc6:	f7ff ff21 	bl	404e0c <_malloc_trim_r>
  404fca:	e7b0      	b.n	404f2e <_free_r+0x86>
  404fcc:	1811      	adds	r1, r2, r0
  404fce:	6849      	ldr	r1, [r1, #4]
  404fd0:	07c9      	lsls	r1, r1, #31
  404fd2:	d444      	bmi.n	40505e <_free_r+0x1b6>
  404fd4:	6891      	ldr	r1, [r2, #8]
  404fd6:	68d2      	ldr	r2, [r2, #12]
  404fd8:	60ca      	str	r2, [r1, #12]
  404fda:	4403      	add	r3, r0
  404fdc:	f043 0001 	orr.w	r0, r3, #1
  404fe0:	6091      	str	r1, [r2, #8]
  404fe2:	6060      	str	r0, [r4, #4]
  404fe4:	50e3      	str	r3, [r4, r3]
  404fe6:	e7a2      	b.n	404f2e <_free_r+0x86>
  404fe8:	2a14      	cmp	r2, #20
  404fea:	d817      	bhi.n	40501c <_free_r+0x174>
  404fec:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404ff0:	007f      	lsls	r7, r7, #1
  404ff2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404ff6:	e7a9      	b.n	404f4c <_free_r+0xa4>
  404ff8:	10aa      	asrs	r2, r5, #2
  404ffa:	684b      	ldr	r3, [r1, #4]
  404ffc:	2501      	movs	r5, #1
  404ffe:	fa05 f202 	lsl.w	r2, r5, r2
  405002:	4313      	orrs	r3, r2
  405004:	604b      	str	r3, [r1, #4]
  405006:	4602      	mov	r2, r0
  405008:	e7b1      	b.n	404f6e <_free_r+0xc6>
  40500a:	f043 0201 	orr.w	r2, r3, #1
  40500e:	614c      	str	r4, [r1, #20]
  405010:	610c      	str	r4, [r1, #16]
  405012:	60e5      	str	r5, [r4, #12]
  405014:	60a5      	str	r5, [r4, #8]
  405016:	6062      	str	r2, [r4, #4]
  405018:	50e3      	str	r3, [r4, r3]
  40501a:	e788      	b.n	404f2e <_free_r+0x86>
  40501c:	2a54      	cmp	r2, #84	; 0x54
  40501e:	d806      	bhi.n	40502e <_free_r+0x186>
  405020:	0b1a      	lsrs	r2, r3, #12
  405022:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405026:	007f      	lsls	r7, r7, #1
  405028:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40502c:	e78e      	b.n	404f4c <_free_r+0xa4>
  40502e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405032:	d806      	bhi.n	405042 <_free_r+0x19a>
  405034:	0bda      	lsrs	r2, r3, #15
  405036:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40503a:	007f      	lsls	r7, r7, #1
  40503c:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405040:	e784      	b.n	404f4c <_free_r+0xa4>
  405042:	f240 5054 	movw	r0, #1364	; 0x554
  405046:	4282      	cmp	r2, r0
  405048:	d806      	bhi.n	405058 <_free_r+0x1b0>
  40504a:	0c9a      	lsrs	r2, r3, #18
  40504c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405050:	007f      	lsls	r7, r7, #1
  405052:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405056:	e779      	b.n	404f4c <_free_r+0xa4>
  405058:	27fe      	movs	r7, #254	; 0xfe
  40505a:	257e      	movs	r5, #126	; 0x7e
  40505c:	e776      	b.n	404f4c <_free_r+0xa4>
  40505e:	f043 0201 	orr.w	r2, r3, #1
  405062:	6062      	str	r2, [r4, #4]
  405064:	50e3      	str	r3, [r4, r3]
  405066:	e762      	b.n	404f2e <_free_r+0x86>
  405068:	20400470 	.word	0x20400470
  40506c:	20400478 	.word	0x20400478
  405070:	20400878 	.word	0x20400878
  405074:	20400964 	.word	0x20400964

00405078 <__sfvwrite_r>:
  405078:	6893      	ldr	r3, [r2, #8]
  40507a:	2b00      	cmp	r3, #0
  40507c:	d076      	beq.n	40516c <__sfvwrite_r+0xf4>
  40507e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405082:	898b      	ldrh	r3, [r1, #12]
  405084:	b085      	sub	sp, #20
  405086:	460c      	mov	r4, r1
  405088:	0719      	lsls	r1, r3, #28
  40508a:	9001      	str	r0, [sp, #4]
  40508c:	4616      	mov	r6, r2
  40508e:	d529      	bpl.n	4050e4 <__sfvwrite_r+0x6c>
  405090:	6922      	ldr	r2, [r4, #16]
  405092:	b33a      	cbz	r2, 4050e4 <__sfvwrite_r+0x6c>
  405094:	f003 0802 	and.w	r8, r3, #2
  405098:	fa1f f088 	uxth.w	r0, r8
  40509c:	6835      	ldr	r5, [r6, #0]
  40509e:	2800      	cmp	r0, #0
  4050a0:	d02f      	beq.n	405102 <__sfvwrite_r+0x8a>
  4050a2:	f04f 0900 	mov.w	r9, #0
  4050a6:	4fb4      	ldr	r7, [pc, #720]	; (405378 <__sfvwrite_r+0x300>)
  4050a8:	46c8      	mov	r8, r9
  4050aa:	46b2      	mov	sl, r6
  4050ac:	45b8      	cmp	r8, r7
  4050ae:	4643      	mov	r3, r8
  4050b0:	464a      	mov	r2, r9
  4050b2:	bf28      	it	cs
  4050b4:	463b      	movcs	r3, r7
  4050b6:	9801      	ldr	r0, [sp, #4]
  4050b8:	f1b8 0f00 	cmp.w	r8, #0
  4050bc:	d050      	beq.n	405160 <__sfvwrite_r+0xe8>
  4050be:	69e1      	ldr	r1, [r4, #28]
  4050c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4050c2:	47b0      	blx	r6
  4050c4:	2800      	cmp	r0, #0
  4050c6:	dd71      	ble.n	4051ac <__sfvwrite_r+0x134>
  4050c8:	f8da 3008 	ldr.w	r3, [sl, #8]
  4050cc:	1a1b      	subs	r3, r3, r0
  4050ce:	4481      	add	r9, r0
  4050d0:	ebc0 0808 	rsb	r8, r0, r8
  4050d4:	f8ca 3008 	str.w	r3, [sl, #8]
  4050d8:	2b00      	cmp	r3, #0
  4050da:	d1e7      	bne.n	4050ac <__sfvwrite_r+0x34>
  4050dc:	2000      	movs	r0, #0
  4050de:	b005      	add	sp, #20
  4050e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050e4:	4621      	mov	r1, r4
  4050e6:	9801      	ldr	r0, [sp, #4]
  4050e8:	f7ff fc68 	bl	4049bc <__swsetup_r>
  4050ec:	2800      	cmp	r0, #0
  4050ee:	f040 813a 	bne.w	405366 <__sfvwrite_r+0x2ee>
  4050f2:	89a3      	ldrh	r3, [r4, #12]
  4050f4:	6835      	ldr	r5, [r6, #0]
  4050f6:	f003 0802 	and.w	r8, r3, #2
  4050fa:	fa1f f088 	uxth.w	r0, r8
  4050fe:	2800      	cmp	r0, #0
  405100:	d1cf      	bne.n	4050a2 <__sfvwrite_r+0x2a>
  405102:	f013 0901 	ands.w	r9, r3, #1
  405106:	d15b      	bne.n	4051c0 <__sfvwrite_r+0x148>
  405108:	464f      	mov	r7, r9
  40510a:	9602      	str	r6, [sp, #8]
  40510c:	b31f      	cbz	r7, 405156 <__sfvwrite_r+0xde>
  40510e:	059a      	lsls	r2, r3, #22
  405110:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405114:	d52c      	bpl.n	405170 <__sfvwrite_r+0xf8>
  405116:	4547      	cmp	r7, r8
  405118:	46c2      	mov	sl, r8
  40511a:	f0c0 80a4 	bcc.w	405266 <__sfvwrite_r+0x1ee>
  40511e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405122:	f040 80b1 	bne.w	405288 <__sfvwrite_r+0x210>
  405126:	6820      	ldr	r0, [r4, #0]
  405128:	4652      	mov	r2, sl
  40512a:	4649      	mov	r1, r9
  40512c:	f000 fd7a 	bl	405c24 <memmove>
  405130:	68a0      	ldr	r0, [r4, #8]
  405132:	6823      	ldr	r3, [r4, #0]
  405134:	ebc8 0000 	rsb	r0, r8, r0
  405138:	4453      	add	r3, sl
  40513a:	60a0      	str	r0, [r4, #8]
  40513c:	6023      	str	r3, [r4, #0]
  40513e:	4638      	mov	r0, r7
  405140:	9a02      	ldr	r2, [sp, #8]
  405142:	6893      	ldr	r3, [r2, #8]
  405144:	1a1b      	subs	r3, r3, r0
  405146:	4481      	add	r9, r0
  405148:	1a3f      	subs	r7, r7, r0
  40514a:	6093      	str	r3, [r2, #8]
  40514c:	2b00      	cmp	r3, #0
  40514e:	d0c5      	beq.n	4050dc <__sfvwrite_r+0x64>
  405150:	89a3      	ldrh	r3, [r4, #12]
  405152:	2f00      	cmp	r7, #0
  405154:	d1db      	bne.n	40510e <__sfvwrite_r+0x96>
  405156:	f8d5 9000 	ldr.w	r9, [r5]
  40515a:	686f      	ldr	r7, [r5, #4]
  40515c:	3508      	adds	r5, #8
  40515e:	e7d5      	b.n	40510c <__sfvwrite_r+0x94>
  405160:	f8d5 9000 	ldr.w	r9, [r5]
  405164:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405168:	3508      	adds	r5, #8
  40516a:	e79f      	b.n	4050ac <__sfvwrite_r+0x34>
  40516c:	2000      	movs	r0, #0
  40516e:	4770      	bx	lr
  405170:	6820      	ldr	r0, [r4, #0]
  405172:	6923      	ldr	r3, [r4, #16]
  405174:	4298      	cmp	r0, r3
  405176:	d803      	bhi.n	405180 <__sfvwrite_r+0x108>
  405178:	6961      	ldr	r1, [r4, #20]
  40517a:	428f      	cmp	r7, r1
  40517c:	f080 80b7 	bcs.w	4052ee <__sfvwrite_r+0x276>
  405180:	45b8      	cmp	r8, r7
  405182:	bf28      	it	cs
  405184:	46b8      	movcs	r8, r7
  405186:	4642      	mov	r2, r8
  405188:	4649      	mov	r1, r9
  40518a:	f000 fd4b 	bl	405c24 <memmove>
  40518e:	68a3      	ldr	r3, [r4, #8]
  405190:	6822      	ldr	r2, [r4, #0]
  405192:	ebc8 0303 	rsb	r3, r8, r3
  405196:	4442      	add	r2, r8
  405198:	60a3      	str	r3, [r4, #8]
  40519a:	6022      	str	r2, [r4, #0]
  40519c:	2b00      	cmp	r3, #0
  40519e:	d149      	bne.n	405234 <__sfvwrite_r+0x1bc>
  4051a0:	4621      	mov	r1, r4
  4051a2:	9801      	ldr	r0, [sp, #4]
  4051a4:	f7ff fd22 	bl	404bec <_fflush_r>
  4051a8:	2800      	cmp	r0, #0
  4051aa:	d043      	beq.n	405234 <__sfvwrite_r+0x1bc>
  4051ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051b4:	f04f 30ff 	mov.w	r0, #4294967295
  4051b8:	81a3      	strh	r3, [r4, #12]
  4051ba:	b005      	add	sp, #20
  4051bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051c0:	4680      	mov	r8, r0
  4051c2:	9002      	str	r0, [sp, #8]
  4051c4:	4682      	mov	sl, r0
  4051c6:	4681      	mov	r9, r0
  4051c8:	f1b9 0f00 	cmp.w	r9, #0
  4051cc:	d02a      	beq.n	405224 <__sfvwrite_r+0x1ac>
  4051ce:	9b02      	ldr	r3, [sp, #8]
  4051d0:	2b00      	cmp	r3, #0
  4051d2:	d04c      	beq.n	40526e <__sfvwrite_r+0x1f6>
  4051d4:	6820      	ldr	r0, [r4, #0]
  4051d6:	6923      	ldr	r3, [r4, #16]
  4051d8:	6962      	ldr	r2, [r4, #20]
  4051da:	45c8      	cmp	r8, r9
  4051dc:	46c3      	mov	fp, r8
  4051de:	bf28      	it	cs
  4051e0:	46cb      	movcs	fp, r9
  4051e2:	4298      	cmp	r0, r3
  4051e4:	465f      	mov	r7, fp
  4051e6:	d904      	bls.n	4051f2 <__sfvwrite_r+0x17a>
  4051e8:	68a3      	ldr	r3, [r4, #8]
  4051ea:	4413      	add	r3, r2
  4051ec:	459b      	cmp	fp, r3
  4051ee:	f300 8090 	bgt.w	405312 <__sfvwrite_r+0x29a>
  4051f2:	4593      	cmp	fp, r2
  4051f4:	db20      	blt.n	405238 <__sfvwrite_r+0x1c0>
  4051f6:	4613      	mov	r3, r2
  4051f8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4051fa:	69e1      	ldr	r1, [r4, #28]
  4051fc:	9801      	ldr	r0, [sp, #4]
  4051fe:	4652      	mov	r2, sl
  405200:	47b8      	blx	r7
  405202:	1e07      	subs	r7, r0, #0
  405204:	ddd2      	ble.n	4051ac <__sfvwrite_r+0x134>
  405206:	ebb8 0807 	subs.w	r8, r8, r7
  40520a:	d023      	beq.n	405254 <__sfvwrite_r+0x1dc>
  40520c:	68b3      	ldr	r3, [r6, #8]
  40520e:	1bdb      	subs	r3, r3, r7
  405210:	44ba      	add	sl, r7
  405212:	ebc7 0909 	rsb	r9, r7, r9
  405216:	60b3      	str	r3, [r6, #8]
  405218:	2b00      	cmp	r3, #0
  40521a:	f43f af5f 	beq.w	4050dc <__sfvwrite_r+0x64>
  40521e:	f1b9 0f00 	cmp.w	r9, #0
  405222:	d1d4      	bne.n	4051ce <__sfvwrite_r+0x156>
  405224:	2300      	movs	r3, #0
  405226:	f8d5 a000 	ldr.w	sl, [r5]
  40522a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40522e:	9302      	str	r3, [sp, #8]
  405230:	3508      	adds	r5, #8
  405232:	e7c9      	b.n	4051c8 <__sfvwrite_r+0x150>
  405234:	4640      	mov	r0, r8
  405236:	e783      	b.n	405140 <__sfvwrite_r+0xc8>
  405238:	465a      	mov	r2, fp
  40523a:	4651      	mov	r1, sl
  40523c:	f000 fcf2 	bl	405c24 <memmove>
  405240:	68a2      	ldr	r2, [r4, #8]
  405242:	6823      	ldr	r3, [r4, #0]
  405244:	ebcb 0202 	rsb	r2, fp, r2
  405248:	445b      	add	r3, fp
  40524a:	ebb8 0807 	subs.w	r8, r8, r7
  40524e:	60a2      	str	r2, [r4, #8]
  405250:	6023      	str	r3, [r4, #0]
  405252:	d1db      	bne.n	40520c <__sfvwrite_r+0x194>
  405254:	4621      	mov	r1, r4
  405256:	9801      	ldr	r0, [sp, #4]
  405258:	f7ff fcc8 	bl	404bec <_fflush_r>
  40525c:	2800      	cmp	r0, #0
  40525e:	d1a5      	bne.n	4051ac <__sfvwrite_r+0x134>
  405260:	f8cd 8008 	str.w	r8, [sp, #8]
  405264:	e7d2      	b.n	40520c <__sfvwrite_r+0x194>
  405266:	6820      	ldr	r0, [r4, #0]
  405268:	46b8      	mov	r8, r7
  40526a:	46ba      	mov	sl, r7
  40526c:	e75c      	b.n	405128 <__sfvwrite_r+0xb0>
  40526e:	464a      	mov	r2, r9
  405270:	210a      	movs	r1, #10
  405272:	4650      	mov	r0, sl
  405274:	f000 fbec 	bl	405a50 <memchr>
  405278:	2800      	cmp	r0, #0
  40527a:	d06f      	beq.n	40535c <__sfvwrite_r+0x2e4>
  40527c:	3001      	adds	r0, #1
  40527e:	2301      	movs	r3, #1
  405280:	ebca 0800 	rsb	r8, sl, r0
  405284:	9302      	str	r3, [sp, #8]
  405286:	e7a5      	b.n	4051d4 <__sfvwrite_r+0x15c>
  405288:	6962      	ldr	r2, [r4, #20]
  40528a:	6820      	ldr	r0, [r4, #0]
  40528c:	6921      	ldr	r1, [r4, #16]
  40528e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405292:	ebc1 0a00 	rsb	sl, r1, r0
  405296:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40529a:	f10a 0001 	add.w	r0, sl, #1
  40529e:	ea4f 0868 	mov.w	r8, r8, asr #1
  4052a2:	4438      	add	r0, r7
  4052a4:	4540      	cmp	r0, r8
  4052a6:	4642      	mov	r2, r8
  4052a8:	bf84      	itt	hi
  4052aa:	4680      	movhi	r8, r0
  4052ac:	4642      	movhi	r2, r8
  4052ae:	055b      	lsls	r3, r3, #21
  4052b0:	d542      	bpl.n	405338 <__sfvwrite_r+0x2c0>
  4052b2:	4611      	mov	r1, r2
  4052b4:	9801      	ldr	r0, [sp, #4]
  4052b6:	f000 f911 	bl	4054dc <_malloc_r>
  4052ba:	4683      	mov	fp, r0
  4052bc:	2800      	cmp	r0, #0
  4052be:	d055      	beq.n	40536c <__sfvwrite_r+0x2f4>
  4052c0:	4652      	mov	r2, sl
  4052c2:	6921      	ldr	r1, [r4, #16]
  4052c4:	f000 fc14 	bl	405af0 <memcpy>
  4052c8:	89a3      	ldrh	r3, [r4, #12]
  4052ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4052d2:	81a3      	strh	r3, [r4, #12]
  4052d4:	ebca 0308 	rsb	r3, sl, r8
  4052d8:	eb0b 000a 	add.w	r0, fp, sl
  4052dc:	f8c4 8014 	str.w	r8, [r4, #20]
  4052e0:	f8c4 b010 	str.w	fp, [r4, #16]
  4052e4:	6020      	str	r0, [r4, #0]
  4052e6:	60a3      	str	r3, [r4, #8]
  4052e8:	46b8      	mov	r8, r7
  4052ea:	46ba      	mov	sl, r7
  4052ec:	e71c      	b.n	405128 <__sfvwrite_r+0xb0>
  4052ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4052f2:	42bb      	cmp	r3, r7
  4052f4:	bf28      	it	cs
  4052f6:	463b      	movcs	r3, r7
  4052f8:	464a      	mov	r2, r9
  4052fa:	fb93 f3f1 	sdiv	r3, r3, r1
  4052fe:	9801      	ldr	r0, [sp, #4]
  405300:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405302:	fb01 f303 	mul.w	r3, r1, r3
  405306:	69e1      	ldr	r1, [r4, #28]
  405308:	47b0      	blx	r6
  40530a:	2800      	cmp	r0, #0
  40530c:	f73f af18 	bgt.w	405140 <__sfvwrite_r+0xc8>
  405310:	e74c      	b.n	4051ac <__sfvwrite_r+0x134>
  405312:	461a      	mov	r2, r3
  405314:	4651      	mov	r1, sl
  405316:	9303      	str	r3, [sp, #12]
  405318:	f000 fc84 	bl	405c24 <memmove>
  40531c:	6822      	ldr	r2, [r4, #0]
  40531e:	9b03      	ldr	r3, [sp, #12]
  405320:	9801      	ldr	r0, [sp, #4]
  405322:	441a      	add	r2, r3
  405324:	6022      	str	r2, [r4, #0]
  405326:	4621      	mov	r1, r4
  405328:	f7ff fc60 	bl	404bec <_fflush_r>
  40532c:	9b03      	ldr	r3, [sp, #12]
  40532e:	2800      	cmp	r0, #0
  405330:	f47f af3c 	bne.w	4051ac <__sfvwrite_r+0x134>
  405334:	461f      	mov	r7, r3
  405336:	e766      	b.n	405206 <__sfvwrite_r+0x18e>
  405338:	9801      	ldr	r0, [sp, #4]
  40533a:	f000 fcdb 	bl	405cf4 <_realloc_r>
  40533e:	4683      	mov	fp, r0
  405340:	2800      	cmp	r0, #0
  405342:	d1c7      	bne.n	4052d4 <__sfvwrite_r+0x25c>
  405344:	9d01      	ldr	r5, [sp, #4]
  405346:	6921      	ldr	r1, [r4, #16]
  405348:	4628      	mov	r0, r5
  40534a:	f7ff fdad 	bl	404ea8 <_free_r>
  40534e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405352:	220c      	movs	r2, #12
  405354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405358:	602a      	str	r2, [r5, #0]
  40535a:	e729      	b.n	4051b0 <__sfvwrite_r+0x138>
  40535c:	2301      	movs	r3, #1
  40535e:	f109 0801 	add.w	r8, r9, #1
  405362:	9302      	str	r3, [sp, #8]
  405364:	e736      	b.n	4051d4 <__sfvwrite_r+0x15c>
  405366:	f04f 30ff 	mov.w	r0, #4294967295
  40536a:	e6b8      	b.n	4050de <__sfvwrite_r+0x66>
  40536c:	9a01      	ldr	r2, [sp, #4]
  40536e:	230c      	movs	r3, #12
  405370:	6013      	str	r3, [r2, #0]
  405372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405376:	e71b      	b.n	4051b0 <__sfvwrite_r+0x138>
  405378:	7ffffc00 	.word	0x7ffffc00

0040537c <_fwalk_reent>:
  40537c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405380:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405384:	d01f      	beq.n	4053c6 <_fwalk_reent+0x4a>
  405386:	4688      	mov	r8, r1
  405388:	4606      	mov	r6, r0
  40538a:	f04f 0900 	mov.w	r9, #0
  40538e:	687d      	ldr	r5, [r7, #4]
  405390:	68bc      	ldr	r4, [r7, #8]
  405392:	3d01      	subs	r5, #1
  405394:	d411      	bmi.n	4053ba <_fwalk_reent+0x3e>
  405396:	89a3      	ldrh	r3, [r4, #12]
  405398:	2b01      	cmp	r3, #1
  40539a:	f105 35ff 	add.w	r5, r5, #4294967295
  40539e:	d908      	bls.n	4053b2 <_fwalk_reent+0x36>
  4053a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4053a4:	3301      	adds	r3, #1
  4053a6:	4621      	mov	r1, r4
  4053a8:	4630      	mov	r0, r6
  4053aa:	d002      	beq.n	4053b2 <_fwalk_reent+0x36>
  4053ac:	47c0      	blx	r8
  4053ae:	ea49 0900 	orr.w	r9, r9, r0
  4053b2:	1c6b      	adds	r3, r5, #1
  4053b4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4053b8:	d1ed      	bne.n	405396 <_fwalk_reent+0x1a>
  4053ba:	683f      	ldr	r7, [r7, #0]
  4053bc:	2f00      	cmp	r7, #0
  4053be:	d1e6      	bne.n	40538e <_fwalk_reent+0x12>
  4053c0:	4648      	mov	r0, r9
  4053c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4053c6:	46b9      	mov	r9, r7
  4053c8:	4648      	mov	r0, r9
  4053ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4053ce:	bf00      	nop

004053d0 <__locale_charset>:
  4053d0:	4800      	ldr	r0, [pc, #0]	; (4053d4 <__locale_charset+0x4>)
  4053d2:	4770      	bx	lr
  4053d4:	2040044c 	.word	0x2040044c

004053d8 <__locale_mb_cur_max>:
  4053d8:	4b01      	ldr	r3, [pc, #4]	; (4053e0 <__locale_mb_cur_max+0x8>)
  4053da:	6818      	ldr	r0, [r3, #0]
  4053dc:	4770      	bx	lr
  4053de:	bf00      	nop
  4053e0:	2040046c 	.word	0x2040046c

004053e4 <__swhatbuf_r>:
  4053e4:	b570      	push	{r4, r5, r6, lr}
  4053e6:	460d      	mov	r5, r1
  4053e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4053ec:	2900      	cmp	r1, #0
  4053ee:	b090      	sub	sp, #64	; 0x40
  4053f0:	4614      	mov	r4, r2
  4053f2:	461e      	mov	r6, r3
  4053f4:	db14      	blt.n	405420 <__swhatbuf_r+0x3c>
  4053f6:	aa01      	add	r2, sp, #4
  4053f8:	f001 f80c 	bl	406414 <_fstat_r>
  4053fc:	2800      	cmp	r0, #0
  4053fe:	db0f      	blt.n	405420 <__swhatbuf_r+0x3c>
  405400:	9a02      	ldr	r2, [sp, #8]
  405402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405406:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40540a:	fab2 f282 	clz	r2, r2
  40540e:	0952      	lsrs	r2, r2, #5
  405410:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405414:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405418:	6032      	str	r2, [r6, #0]
  40541a:	6023      	str	r3, [r4, #0]
  40541c:	b010      	add	sp, #64	; 0x40
  40541e:	bd70      	pop	{r4, r5, r6, pc}
  405420:	89a8      	ldrh	r0, [r5, #12]
  405422:	f000 0080 	and.w	r0, r0, #128	; 0x80
  405426:	b282      	uxth	r2, r0
  405428:	2000      	movs	r0, #0
  40542a:	6030      	str	r0, [r6, #0]
  40542c:	b11a      	cbz	r2, 405436 <__swhatbuf_r+0x52>
  40542e:	2340      	movs	r3, #64	; 0x40
  405430:	6023      	str	r3, [r4, #0]
  405432:	b010      	add	sp, #64	; 0x40
  405434:	bd70      	pop	{r4, r5, r6, pc}
  405436:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40543a:	4610      	mov	r0, r2
  40543c:	6023      	str	r3, [r4, #0]
  40543e:	b010      	add	sp, #64	; 0x40
  405440:	bd70      	pop	{r4, r5, r6, pc}
  405442:	bf00      	nop

00405444 <__smakebuf_r>:
  405444:	898a      	ldrh	r2, [r1, #12]
  405446:	0792      	lsls	r2, r2, #30
  405448:	460b      	mov	r3, r1
  40544a:	d506      	bpl.n	40545a <__smakebuf_r+0x16>
  40544c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405450:	2101      	movs	r1, #1
  405452:	601a      	str	r2, [r3, #0]
  405454:	611a      	str	r2, [r3, #16]
  405456:	6159      	str	r1, [r3, #20]
  405458:	4770      	bx	lr
  40545a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40545c:	b083      	sub	sp, #12
  40545e:	ab01      	add	r3, sp, #4
  405460:	466a      	mov	r2, sp
  405462:	460c      	mov	r4, r1
  405464:	4605      	mov	r5, r0
  405466:	f7ff ffbd 	bl	4053e4 <__swhatbuf_r>
  40546a:	9900      	ldr	r1, [sp, #0]
  40546c:	4606      	mov	r6, r0
  40546e:	4628      	mov	r0, r5
  405470:	f000 f834 	bl	4054dc <_malloc_r>
  405474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405478:	b1d0      	cbz	r0, 4054b0 <__smakebuf_r+0x6c>
  40547a:	9a01      	ldr	r2, [sp, #4]
  40547c:	4f12      	ldr	r7, [pc, #72]	; (4054c8 <__smakebuf_r+0x84>)
  40547e:	9900      	ldr	r1, [sp, #0]
  405480:	63ef      	str	r7, [r5, #60]	; 0x3c
  405482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405486:	81a3      	strh	r3, [r4, #12]
  405488:	6020      	str	r0, [r4, #0]
  40548a:	6120      	str	r0, [r4, #16]
  40548c:	6161      	str	r1, [r4, #20]
  40548e:	b91a      	cbnz	r2, 405498 <__smakebuf_r+0x54>
  405490:	4333      	orrs	r3, r6
  405492:	81a3      	strh	r3, [r4, #12]
  405494:	b003      	add	sp, #12
  405496:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405498:	4628      	mov	r0, r5
  40549a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40549e:	f000 ffcd 	bl	40643c <_isatty_r>
  4054a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054a6:	2800      	cmp	r0, #0
  4054a8:	d0f2      	beq.n	405490 <__smakebuf_r+0x4c>
  4054aa:	f043 0301 	orr.w	r3, r3, #1
  4054ae:	e7ef      	b.n	405490 <__smakebuf_r+0x4c>
  4054b0:	059a      	lsls	r2, r3, #22
  4054b2:	d4ef      	bmi.n	405494 <__smakebuf_r+0x50>
  4054b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4054b8:	f043 0302 	orr.w	r3, r3, #2
  4054bc:	2101      	movs	r1, #1
  4054be:	81a3      	strh	r3, [r4, #12]
  4054c0:	6022      	str	r2, [r4, #0]
  4054c2:	6122      	str	r2, [r4, #16]
  4054c4:	6161      	str	r1, [r4, #20]
  4054c6:	e7e5      	b.n	405494 <__smakebuf_r+0x50>
  4054c8:	00404c19 	.word	0x00404c19

004054cc <malloc>:
  4054cc:	4b02      	ldr	r3, [pc, #8]	; (4054d8 <malloc+0xc>)
  4054ce:	4601      	mov	r1, r0
  4054d0:	6818      	ldr	r0, [r3, #0]
  4054d2:	f000 b803 	b.w	4054dc <_malloc_r>
  4054d6:	bf00      	nop
  4054d8:	20400448 	.word	0x20400448

004054dc <_malloc_r>:
  4054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054e0:	f101 050b 	add.w	r5, r1, #11
  4054e4:	2d16      	cmp	r5, #22
  4054e6:	b083      	sub	sp, #12
  4054e8:	4606      	mov	r6, r0
  4054ea:	f240 809f 	bls.w	40562c <_malloc_r+0x150>
  4054ee:	f035 0507 	bics.w	r5, r5, #7
  4054f2:	f100 80bf 	bmi.w	405674 <_malloc_r+0x198>
  4054f6:	42a9      	cmp	r1, r5
  4054f8:	f200 80bc 	bhi.w	405674 <_malloc_r+0x198>
  4054fc:	f000 fbf6 	bl	405cec <__malloc_lock>
  405500:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  405504:	f0c0 829c 	bcc.w	405a40 <_malloc_r+0x564>
  405508:	0a6b      	lsrs	r3, r5, #9
  40550a:	f000 80ba 	beq.w	405682 <_malloc_r+0x1a6>
  40550e:	2b04      	cmp	r3, #4
  405510:	f200 8183 	bhi.w	40581a <_malloc_r+0x33e>
  405514:	09a8      	lsrs	r0, r5, #6
  405516:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40551a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40551e:	3038      	adds	r0, #56	; 0x38
  405520:	4fc4      	ldr	r7, [pc, #784]	; (405834 <_malloc_r+0x358>)
  405522:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405526:	f1a3 0108 	sub.w	r1, r3, #8
  40552a:	685c      	ldr	r4, [r3, #4]
  40552c:	42a1      	cmp	r1, r4
  40552e:	d107      	bne.n	405540 <_malloc_r+0x64>
  405530:	e0ac      	b.n	40568c <_malloc_r+0x1b0>
  405532:	2a00      	cmp	r2, #0
  405534:	f280 80ac 	bge.w	405690 <_malloc_r+0x1b4>
  405538:	68e4      	ldr	r4, [r4, #12]
  40553a:	42a1      	cmp	r1, r4
  40553c:	f000 80a6 	beq.w	40568c <_malloc_r+0x1b0>
  405540:	6863      	ldr	r3, [r4, #4]
  405542:	f023 0303 	bic.w	r3, r3, #3
  405546:	1b5a      	subs	r2, r3, r5
  405548:	2a0f      	cmp	r2, #15
  40554a:	ddf2      	ble.n	405532 <_malloc_r+0x56>
  40554c:	49b9      	ldr	r1, [pc, #740]	; (405834 <_malloc_r+0x358>)
  40554e:	693c      	ldr	r4, [r7, #16]
  405550:	f101 0e08 	add.w	lr, r1, #8
  405554:	4574      	cmp	r4, lr
  405556:	f000 81b3 	beq.w	4058c0 <_malloc_r+0x3e4>
  40555a:	6863      	ldr	r3, [r4, #4]
  40555c:	f023 0303 	bic.w	r3, r3, #3
  405560:	1b5a      	subs	r2, r3, r5
  405562:	2a0f      	cmp	r2, #15
  405564:	f300 8199 	bgt.w	40589a <_malloc_r+0x3be>
  405568:	2a00      	cmp	r2, #0
  40556a:	f8c1 e014 	str.w	lr, [r1, #20]
  40556e:	f8c1 e010 	str.w	lr, [r1, #16]
  405572:	f280 809e 	bge.w	4056b2 <_malloc_r+0x1d6>
  405576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40557a:	f080 8167 	bcs.w	40584c <_malloc_r+0x370>
  40557e:	08db      	lsrs	r3, r3, #3
  405580:	f103 0c01 	add.w	ip, r3, #1
  405584:	2201      	movs	r2, #1
  405586:	109b      	asrs	r3, r3, #2
  405588:	fa02 f303 	lsl.w	r3, r2, r3
  40558c:	684a      	ldr	r2, [r1, #4]
  40558e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  405592:	f8c4 8008 	str.w	r8, [r4, #8]
  405596:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40559a:	431a      	orrs	r2, r3
  40559c:	f1a9 0308 	sub.w	r3, r9, #8
  4055a0:	60e3      	str	r3, [r4, #12]
  4055a2:	604a      	str	r2, [r1, #4]
  4055a4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4055a8:	f8c8 400c 	str.w	r4, [r8, #12]
  4055ac:	1083      	asrs	r3, r0, #2
  4055ae:	2401      	movs	r4, #1
  4055b0:	409c      	lsls	r4, r3
  4055b2:	4294      	cmp	r4, r2
  4055b4:	f200 808a 	bhi.w	4056cc <_malloc_r+0x1f0>
  4055b8:	4214      	tst	r4, r2
  4055ba:	d106      	bne.n	4055ca <_malloc_r+0xee>
  4055bc:	f020 0003 	bic.w	r0, r0, #3
  4055c0:	0064      	lsls	r4, r4, #1
  4055c2:	4214      	tst	r4, r2
  4055c4:	f100 0004 	add.w	r0, r0, #4
  4055c8:	d0fa      	beq.n	4055c0 <_malloc_r+0xe4>
  4055ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4055ce:	46cc      	mov	ip, r9
  4055d0:	4680      	mov	r8, r0
  4055d2:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4055d6:	458c      	cmp	ip, r1
  4055d8:	d107      	bne.n	4055ea <_malloc_r+0x10e>
  4055da:	e173      	b.n	4058c4 <_malloc_r+0x3e8>
  4055dc:	2a00      	cmp	r2, #0
  4055de:	f280 8181 	bge.w	4058e4 <_malloc_r+0x408>
  4055e2:	68c9      	ldr	r1, [r1, #12]
  4055e4:	458c      	cmp	ip, r1
  4055e6:	f000 816d 	beq.w	4058c4 <_malloc_r+0x3e8>
  4055ea:	684b      	ldr	r3, [r1, #4]
  4055ec:	f023 0303 	bic.w	r3, r3, #3
  4055f0:	1b5a      	subs	r2, r3, r5
  4055f2:	2a0f      	cmp	r2, #15
  4055f4:	ddf2      	ble.n	4055dc <_malloc_r+0x100>
  4055f6:	460c      	mov	r4, r1
  4055f8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4055fc:	f854 8f08 	ldr.w	r8, [r4, #8]!
  405600:	194b      	adds	r3, r1, r5
  405602:	f045 0501 	orr.w	r5, r5, #1
  405606:	604d      	str	r5, [r1, #4]
  405608:	f042 0101 	orr.w	r1, r2, #1
  40560c:	f8c8 c00c 	str.w	ip, [r8, #12]
  405610:	4630      	mov	r0, r6
  405612:	f8cc 8008 	str.w	r8, [ip, #8]
  405616:	617b      	str	r3, [r7, #20]
  405618:	613b      	str	r3, [r7, #16]
  40561a:	f8c3 e00c 	str.w	lr, [r3, #12]
  40561e:	f8c3 e008 	str.w	lr, [r3, #8]
  405622:	6059      	str	r1, [r3, #4]
  405624:	509a      	str	r2, [r3, r2]
  405626:	f000 fb63 	bl	405cf0 <__malloc_unlock>
  40562a:	e01f      	b.n	40566c <_malloc_r+0x190>
  40562c:	2910      	cmp	r1, #16
  40562e:	d821      	bhi.n	405674 <_malloc_r+0x198>
  405630:	f000 fb5c 	bl	405cec <__malloc_lock>
  405634:	2510      	movs	r5, #16
  405636:	2306      	movs	r3, #6
  405638:	2002      	movs	r0, #2
  40563a:	4f7e      	ldr	r7, [pc, #504]	; (405834 <_malloc_r+0x358>)
  40563c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405640:	f1a3 0208 	sub.w	r2, r3, #8
  405644:	685c      	ldr	r4, [r3, #4]
  405646:	4294      	cmp	r4, r2
  405648:	f000 8145 	beq.w	4058d6 <_malloc_r+0x3fa>
  40564c:	6863      	ldr	r3, [r4, #4]
  40564e:	68e1      	ldr	r1, [r4, #12]
  405650:	68a5      	ldr	r5, [r4, #8]
  405652:	f023 0303 	bic.w	r3, r3, #3
  405656:	4423      	add	r3, r4
  405658:	4630      	mov	r0, r6
  40565a:	685a      	ldr	r2, [r3, #4]
  40565c:	60e9      	str	r1, [r5, #12]
  40565e:	f042 0201 	orr.w	r2, r2, #1
  405662:	608d      	str	r5, [r1, #8]
  405664:	605a      	str	r2, [r3, #4]
  405666:	f000 fb43 	bl	405cf0 <__malloc_unlock>
  40566a:	3408      	adds	r4, #8
  40566c:	4620      	mov	r0, r4
  40566e:	b003      	add	sp, #12
  405670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405674:	2400      	movs	r4, #0
  405676:	230c      	movs	r3, #12
  405678:	4620      	mov	r0, r4
  40567a:	6033      	str	r3, [r6, #0]
  40567c:	b003      	add	sp, #12
  40567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405682:	2380      	movs	r3, #128	; 0x80
  405684:	f04f 0e40 	mov.w	lr, #64	; 0x40
  405688:	203f      	movs	r0, #63	; 0x3f
  40568a:	e749      	b.n	405520 <_malloc_r+0x44>
  40568c:	4670      	mov	r0, lr
  40568e:	e75d      	b.n	40554c <_malloc_r+0x70>
  405690:	4423      	add	r3, r4
  405692:	68e1      	ldr	r1, [r4, #12]
  405694:	685a      	ldr	r2, [r3, #4]
  405696:	68a5      	ldr	r5, [r4, #8]
  405698:	f042 0201 	orr.w	r2, r2, #1
  40569c:	60e9      	str	r1, [r5, #12]
  40569e:	4630      	mov	r0, r6
  4056a0:	608d      	str	r5, [r1, #8]
  4056a2:	605a      	str	r2, [r3, #4]
  4056a4:	f000 fb24 	bl	405cf0 <__malloc_unlock>
  4056a8:	3408      	adds	r4, #8
  4056aa:	4620      	mov	r0, r4
  4056ac:	b003      	add	sp, #12
  4056ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056b2:	4423      	add	r3, r4
  4056b4:	4630      	mov	r0, r6
  4056b6:	685a      	ldr	r2, [r3, #4]
  4056b8:	f042 0201 	orr.w	r2, r2, #1
  4056bc:	605a      	str	r2, [r3, #4]
  4056be:	f000 fb17 	bl	405cf0 <__malloc_unlock>
  4056c2:	3408      	adds	r4, #8
  4056c4:	4620      	mov	r0, r4
  4056c6:	b003      	add	sp, #12
  4056c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056cc:	68bc      	ldr	r4, [r7, #8]
  4056ce:	6863      	ldr	r3, [r4, #4]
  4056d0:	f023 0803 	bic.w	r8, r3, #3
  4056d4:	45a8      	cmp	r8, r5
  4056d6:	d304      	bcc.n	4056e2 <_malloc_r+0x206>
  4056d8:	ebc5 0308 	rsb	r3, r5, r8
  4056dc:	2b0f      	cmp	r3, #15
  4056de:	f300 808c 	bgt.w	4057fa <_malloc_r+0x31e>
  4056e2:	4b55      	ldr	r3, [pc, #340]	; (405838 <_malloc_r+0x35c>)
  4056e4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 405848 <_malloc_r+0x36c>
  4056e8:	681a      	ldr	r2, [r3, #0]
  4056ea:	f8d9 3000 	ldr.w	r3, [r9]
  4056ee:	3301      	adds	r3, #1
  4056f0:	442a      	add	r2, r5
  4056f2:	eb04 0a08 	add.w	sl, r4, r8
  4056f6:	f000 8160 	beq.w	4059ba <_malloc_r+0x4de>
  4056fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4056fe:	320f      	adds	r2, #15
  405700:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  405704:	f022 020f 	bic.w	r2, r2, #15
  405708:	4611      	mov	r1, r2
  40570a:	4630      	mov	r0, r6
  40570c:	9201      	str	r2, [sp, #4]
  40570e:	f000 fce1 	bl	4060d4 <_sbrk_r>
  405712:	f1b0 3fff 	cmp.w	r0, #4294967295
  405716:	4683      	mov	fp, r0
  405718:	9a01      	ldr	r2, [sp, #4]
  40571a:	f000 8158 	beq.w	4059ce <_malloc_r+0x4f2>
  40571e:	4582      	cmp	sl, r0
  405720:	f200 80fc 	bhi.w	40591c <_malloc_r+0x440>
  405724:	4b45      	ldr	r3, [pc, #276]	; (40583c <_malloc_r+0x360>)
  405726:	6819      	ldr	r1, [r3, #0]
  405728:	45da      	cmp	sl, fp
  40572a:	4411      	add	r1, r2
  40572c:	6019      	str	r1, [r3, #0]
  40572e:	f000 8153 	beq.w	4059d8 <_malloc_r+0x4fc>
  405732:	f8d9 0000 	ldr.w	r0, [r9]
  405736:	f8df e110 	ldr.w	lr, [pc, #272]	; 405848 <_malloc_r+0x36c>
  40573a:	3001      	adds	r0, #1
  40573c:	bf1b      	ittet	ne
  40573e:	ebca 0a0b 	rsbne	sl, sl, fp
  405742:	4451      	addne	r1, sl
  405744:	f8ce b000 	streq.w	fp, [lr]
  405748:	6019      	strne	r1, [r3, #0]
  40574a:	f01b 0107 	ands.w	r1, fp, #7
  40574e:	f000 8117 	beq.w	405980 <_malloc_r+0x4a4>
  405752:	f1c1 0008 	rsb	r0, r1, #8
  405756:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40575a:	4483      	add	fp, r0
  40575c:	3108      	adds	r1, #8
  40575e:	445a      	add	r2, fp
  405760:	f3c2 020b 	ubfx	r2, r2, #0, #12
  405764:	ebc2 0901 	rsb	r9, r2, r1
  405768:	4649      	mov	r1, r9
  40576a:	4630      	mov	r0, r6
  40576c:	9301      	str	r3, [sp, #4]
  40576e:	f000 fcb1 	bl	4060d4 <_sbrk_r>
  405772:	1c43      	adds	r3, r0, #1
  405774:	9b01      	ldr	r3, [sp, #4]
  405776:	f000 813f 	beq.w	4059f8 <_malloc_r+0x51c>
  40577a:	ebcb 0200 	rsb	r2, fp, r0
  40577e:	444a      	add	r2, r9
  405780:	f042 0201 	orr.w	r2, r2, #1
  405784:	6819      	ldr	r1, [r3, #0]
  405786:	f8c7 b008 	str.w	fp, [r7, #8]
  40578a:	4449      	add	r1, r9
  40578c:	42bc      	cmp	r4, r7
  40578e:	f8cb 2004 	str.w	r2, [fp, #4]
  405792:	6019      	str	r1, [r3, #0]
  405794:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40583c <_malloc_r+0x360>
  405798:	d016      	beq.n	4057c8 <_malloc_r+0x2ec>
  40579a:	f1b8 0f0f 	cmp.w	r8, #15
  40579e:	f240 80fd 	bls.w	40599c <_malloc_r+0x4c0>
  4057a2:	6862      	ldr	r2, [r4, #4]
  4057a4:	f1a8 030c 	sub.w	r3, r8, #12
  4057a8:	f023 0307 	bic.w	r3, r3, #7
  4057ac:	18e0      	adds	r0, r4, r3
  4057ae:	f002 0201 	and.w	r2, r2, #1
  4057b2:	f04f 0e05 	mov.w	lr, #5
  4057b6:	431a      	orrs	r2, r3
  4057b8:	2b0f      	cmp	r3, #15
  4057ba:	6062      	str	r2, [r4, #4]
  4057bc:	f8c0 e004 	str.w	lr, [r0, #4]
  4057c0:	f8c0 e008 	str.w	lr, [r0, #8]
  4057c4:	f200 811c 	bhi.w	405a00 <_malloc_r+0x524>
  4057c8:	4b1d      	ldr	r3, [pc, #116]	; (405840 <_malloc_r+0x364>)
  4057ca:	68bc      	ldr	r4, [r7, #8]
  4057cc:	681a      	ldr	r2, [r3, #0]
  4057ce:	4291      	cmp	r1, r2
  4057d0:	bf88      	it	hi
  4057d2:	6019      	strhi	r1, [r3, #0]
  4057d4:	4b1b      	ldr	r3, [pc, #108]	; (405844 <_malloc_r+0x368>)
  4057d6:	681a      	ldr	r2, [r3, #0]
  4057d8:	4291      	cmp	r1, r2
  4057da:	6862      	ldr	r2, [r4, #4]
  4057dc:	bf88      	it	hi
  4057de:	6019      	strhi	r1, [r3, #0]
  4057e0:	f022 0203 	bic.w	r2, r2, #3
  4057e4:	4295      	cmp	r5, r2
  4057e6:	eba2 0305 	sub.w	r3, r2, r5
  4057ea:	d801      	bhi.n	4057f0 <_malloc_r+0x314>
  4057ec:	2b0f      	cmp	r3, #15
  4057ee:	dc04      	bgt.n	4057fa <_malloc_r+0x31e>
  4057f0:	4630      	mov	r0, r6
  4057f2:	f000 fa7d 	bl	405cf0 <__malloc_unlock>
  4057f6:	2400      	movs	r4, #0
  4057f8:	e738      	b.n	40566c <_malloc_r+0x190>
  4057fa:	1962      	adds	r2, r4, r5
  4057fc:	f043 0301 	orr.w	r3, r3, #1
  405800:	f045 0501 	orr.w	r5, r5, #1
  405804:	6065      	str	r5, [r4, #4]
  405806:	4630      	mov	r0, r6
  405808:	60ba      	str	r2, [r7, #8]
  40580a:	6053      	str	r3, [r2, #4]
  40580c:	f000 fa70 	bl	405cf0 <__malloc_unlock>
  405810:	3408      	adds	r4, #8
  405812:	4620      	mov	r0, r4
  405814:	b003      	add	sp, #12
  405816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40581a:	2b14      	cmp	r3, #20
  40581c:	d971      	bls.n	405902 <_malloc_r+0x426>
  40581e:	2b54      	cmp	r3, #84	; 0x54
  405820:	f200 80a4 	bhi.w	40596c <_malloc_r+0x490>
  405824:	0b28      	lsrs	r0, r5, #12
  405826:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40582a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40582e:	306e      	adds	r0, #110	; 0x6e
  405830:	e676      	b.n	405520 <_malloc_r+0x44>
  405832:	bf00      	nop
  405834:	20400470 	.word	0x20400470
  405838:	20400964 	.word	0x20400964
  40583c:	20400968 	.word	0x20400968
  405840:	20400960 	.word	0x20400960
  405844:	2040095c 	.word	0x2040095c
  405848:	2040087c 	.word	0x2040087c
  40584c:	0a5a      	lsrs	r2, r3, #9
  40584e:	2a04      	cmp	r2, #4
  405850:	d95e      	bls.n	405910 <_malloc_r+0x434>
  405852:	2a14      	cmp	r2, #20
  405854:	f200 80b3 	bhi.w	4059be <_malloc_r+0x4e2>
  405858:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40585c:	0049      	lsls	r1, r1, #1
  40585e:	325b      	adds	r2, #91	; 0x5b
  405860:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  405864:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  405868:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 405a48 <_malloc_r+0x56c>
  40586c:	f1ac 0c08 	sub.w	ip, ip, #8
  405870:	458c      	cmp	ip, r1
  405872:	f000 8088 	beq.w	405986 <_malloc_r+0x4aa>
  405876:	684a      	ldr	r2, [r1, #4]
  405878:	f022 0203 	bic.w	r2, r2, #3
  40587c:	4293      	cmp	r3, r2
  40587e:	d202      	bcs.n	405886 <_malloc_r+0x3aa>
  405880:	6889      	ldr	r1, [r1, #8]
  405882:	458c      	cmp	ip, r1
  405884:	d1f7      	bne.n	405876 <_malloc_r+0x39a>
  405886:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40588a:	687a      	ldr	r2, [r7, #4]
  40588c:	f8c4 c00c 	str.w	ip, [r4, #12]
  405890:	60a1      	str	r1, [r4, #8]
  405892:	f8cc 4008 	str.w	r4, [ip, #8]
  405896:	60cc      	str	r4, [r1, #12]
  405898:	e688      	b.n	4055ac <_malloc_r+0xd0>
  40589a:	1963      	adds	r3, r4, r5
  40589c:	f042 0701 	orr.w	r7, r2, #1
  4058a0:	f045 0501 	orr.w	r5, r5, #1
  4058a4:	6065      	str	r5, [r4, #4]
  4058a6:	4630      	mov	r0, r6
  4058a8:	614b      	str	r3, [r1, #20]
  4058aa:	610b      	str	r3, [r1, #16]
  4058ac:	f8c3 e00c 	str.w	lr, [r3, #12]
  4058b0:	f8c3 e008 	str.w	lr, [r3, #8]
  4058b4:	605f      	str	r7, [r3, #4]
  4058b6:	509a      	str	r2, [r3, r2]
  4058b8:	3408      	adds	r4, #8
  4058ba:	f000 fa19 	bl	405cf0 <__malloc_unlock>
  4058be:	e6d5      	b.n	40566c <_malloc_r+0x190>
  4058c0:	684a      	ldr	r2, [r1, #4]
  4058c2:	e673      	b.n	4055ac <_malloc_r+0xd0>
  4058c4:	f108 0801 	add.w	r8, r8, #1
  4058c8:	f018 0f03 	tst.w	r8, #3
  4058cc:	f10c 0c08 	add.w	ip, ip, #8
  4058d0:	f47f ae7f 	bne.w	4055d2 <_malloc_r+0xf6>
  4058d4:	e030      	b.n	405938 <_malloc_r+0x45c>
  4058d6:	68dc      	ldr	r4, [r3, #12]
  4058d8:	42a3      	cmp	r3, r4
  4058da:	bf08      	it	eq
  4058dc:	3002      	addeq	r0, #2
  4058de:	f43f ae35 	beq.w	40554c <_malloc_r+0x70>
  4058e2:	e6b3      	b.n	40564c <_malloc_r+0x170>
  4058e4:	440b      	add	r3, r1
  4058e6:	460c      	mov	r4, r1
  4058e8:	685a      	ldr	r2, [r3, #4]
  4058ea:	68c9      	ldr	r1, [r1, #12]
  4058ec:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4058f0:	f042 0201 	orr.w	r2, r2, #1
  4058f4:	605a      	str	r2, [r3, #4]
  4058f6:	4630      	mov	r0, r6
  4058f8:	60e9      	str	r1, [r5, #12]
  4058fa:	608d      	str	r5, [r1, #8]
  4058fc:	f000 f9f8 	bl	405cf0 <__malloc_unlock>
  405900:	e6b4      	b.n	40566c <_malloc_r+0x190>
  405902:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  405906:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40590a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40590e:	e607      	b.n	405520 <_malloc_r+0x44>
  405910:	099a      	lsrs	r2, r3, #6
  405912:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405916:	0049      	lsls	r1, r1, #1
  405918:	3238      	adds	r2, #56	; 0x38
  40591a:	e7a1      	b.n	405860 <_malloc_r+0x384>
  40591c:	42bc      	cmp	r4, r7
  40591e:	4b4a      	ldr	r3, [pc, #296]	; (405a48 <_malloc_r+0x56c>)
  405920:	f43f af00 	beq.w	405724 <_malloc_r+0x248>
  405924:	689c      	ldr	r4, [r3, #8]
  405926:	6862      	ldr	r2, [r4, #4]
  405928:	f022 0203 	bic.w	r2, r2, #3
  40592c:	e75a      	b.n	4057e4 <_malloc_r+0x308>
  40592e:	f859 3908 	ldr.w	r3, [r9], #-8
  405932:	4599      	cmp	r9, r3
  405934:	f040 8082 	bne.w	405a3c <_malloc_r+0x560>
  405938:	f010 0f03 	tst.w	r0, #3
  40593c:	f100 30ff 	add.w	r0, r0, #4294967295
  405940:	d1f5      	bne.n	40592e <_malloc_r+0x452>
  405942:	687b      	ldr	r3, [r7, #4]
  405944:	ea23 0304 	bic.w	r3, r3, r4
  405948:	607b      	str	r3, [r7, #4]
  40594a:	0064      	lsls	r4, r4, #1
  40594c:	429c      	cmp	r4, r3
  40594e:	f63f aebd 	bhi.w	4056cc <_malloc_r+0x1f0>
  405952:	2c00      	cmp	r4, #0
  405954:	f43f aeba 	beq.w	4056cc <_malloc_r+0x1f0>
  405958:	421c      	tst	r4, r3
  40595a:	4640      	mov	r0, r8
  40595c:	f47f ae35 	bne.w	4055ca <_malloc_r+0xee>
  405960:	0064      	lsls	r4, r4, #1
  405962:	421c      	tst	r4, r3
  405964:	f100 0004 	add.w	r0, r0, #4
  405968:	d0fa      	beq.n	405960 <_malloc_r+0x484>
  40596a:	e62e      	b.n	4055ca <_malloc_r+0xee>
  40596c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405970:	d818      	bhi.n	4059a4 <_malloc_r+0x4c8>
  405972:	0be8      	lsrs	r0, r5, #15
  405974:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  405978:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40597c:	3077      	adds	r0, #119	; 0x77
  40597e:	e5cf      	b.n	405520 <_malloc_r+0x44>
  405980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405984:	e6eb      	b.n	40575e <_malloc_r+0x282>
  405986:	2101      	movs	r1, #1
  405988:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40598c:	1092      	asrs	r2, r2, #2
  40598e:	fa01 f202 	lsl.w	r2, r1, r2
  405992:	431a      	orrs	r2, r3
  405994:	f8c8 2004 	str.w	r2, [r8, #4]
  405998:	4661      	mov	r1, ip
  40599a:	e777      	b.n	40588c <_malloc_r+0x3b0>
  40599c:	2301      	movs	r3, #1
  40599e:	f8cb 3004 	str.w	r3, [fp, #4]
  4059a2:	e725      	b.n	4057f0 <_malloc_r+0x314>
  4059a4:	f240 5254 	movw	r2, #1364	; 0x554
  4059a8:	4293      	cmp	r3, r2
  4059aa:	d820      	bhi.n	4059ee <_malloc_r+0x512>
  4059ac:	0ca8      	lsrs	r0, r5, #18
  4059ae:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  4059b2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4059b6:	307c      	adds	r0, #124	; 0x7c
  4059b8:	e5b2      	b.n	405520 <_malloc_r+0x44>
  4059ba:	3210      	adds	r2, #16
  4059bc:	e6a4      	b.n	405708 <_malloc_r+0x22c>
  4059be:	2a54      	cmp	r2, #84	; 0x54
  4059c0:	d826      	bhi.n	405a10 <_malloc_r+0x534>
  4059c2:	0b1a      	lsrs	r2, r3, #12
  4059c4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4059c8:	0049      	lsls	r1, r1, #1
  4059ca:	326e      	adds	r2, #110	; 0x6e
  4059cc:	e748      	b.n	405860 <_malloc_r+0x384>
  4059ce:	68bc      	ldr	r4, [r7, #8]
  4059d0:	6862      	ldr	r2, [r4, #4]
  4059d2:	f022 0203 	bic.w	r2, r2, #3
  4059d6:	e705      	b.n	4057e4 <_malloc_r+0x308>
  4059d8:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4059dc:	2800      	cmp	r0, #0
  4059de:	f47f aea8 	bne.w	405732 <_malloc_r+0x256>
  4059e2:	4442      	add	r2, r8
  4059e4:	68bb      	ldr	r3, [r7, #8]
  4059e6:	f042 0201 	orr.w	r2, r2, #1
  4059ea:	605a      	str	r2, [r3, #4]
  4059ec:	e6ec      	b.n	4057c8 <_malloc_r+0x2ec>
  4059ee:	23fe      	movs	r3, #254	; 0xfe
  4059f0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4059f4:	207e      	movs	r0, #126	; 0x7e
  4059f6:	e593      	b.n	405520 <_malloc_r+0x44>
  4059f8:	2201      	movs	r2, #1
  4059fa:	f04f 0900 	mov.w	r9, #0
  4059fe:	e6c1      	b.n	405784 <_malloc_r+0x2a8>
  405a00:	f104 0108 	add.w	r1, r4, #8
  405a04:	4630      	mov	r0, r6
  405a06:	f7ff fa4f 	bl	404ea8 <_free_r>
  405a0a:	f8d9 1000 	ldr.w	r1, [r9]
  405a0e:	e6db      	b.n	4057c8 <_malloc_r+0x2ec>
  405a10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405a14:	d805      	bhi.n	405a22 <_malloc_r+0x546>
  405a16:	0bda      	lsrs	r2, r3, #15
  405a18:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405a1c:	0049      	lsls	r1, r1, #1
  405a1e:	3277      	adds	r2, #119	; 0x77
  405a20:	e71e      	b.n	405860 <_malloc_r+0x384>
  405a22:	f240 5154 	movw	r1, #1364	; 0x554
  405a26:	428a      	cmp	r2, r1
  405a28:	d805      	bhi.n	405a36 <_malloc_r+0x55a>
  405a2a:	0c9a      	lsrs	r2, r3, #18
  405a2c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405a30:	0049      	lsls	r1, r1, #1
  405a32:	327c      	adds	r2, #124	; 0x7c
  405a34:	e714      	b.n	405860 <_malloc_r+0x384>
  405a36:	21fe      	movs	r1, #254	; 0xfe
  405a38:	227e      	movs	r2, #126	; 0x7e
  405a3a:	e711      	b.n	405860 <_malloc_r+0x384>
  405a3c:	687b      	ldr	r3, [r7, #4]
  405a3e:	e784      	b.n	40594a <_malloc_r+0x46e>
  405a40:	08e8      	lsrs	r0, r5, #3
  405a42:	1c43      	adds	r3, r0, #1
  405a44:	005b      	lsls	r3, r3, #1
  405a46:	e5f8      	b.n	40563a <_malloc_r+0x15e>
  405a48:	20400470 	.word	0x20400470
  405a4c:	00000000 	.word	0x00000000

00405a50 <memchr>:
  405a50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405a54:	2a10      	cmp	r2, #16
  405a56:	db2b      	blt.n	405ab0 <memchr+0x60>
  405a58:	f010 0f07 	tst.w	r0, #7
  405a5c:	d008      	beq.n	405a70 <memchr+0x20>
  405a5e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405a62:	3a01      	subs	r2, #1
  405a64:	428b      	cmp	r3, r1
  405a66:	d02d      	beq.n	405ac4 <memchr+0x74>
  405a68:	f010 0f07 	tst.w	r0, #7
  405a6c:	b342      	cbz	r2, 405ac0 <memchr+0x70>
  405a6e:	d1f6      	bne.n	405a5e <memchr+0xe>
  405a70:	b4f0      	push	{r4, r5, r6, r7}
  405a72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405a76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405a7a:	f022 0407 	bic.w	r4, r2, #7
  405a7e:	f07f 0700 	mvns.w	r7, #0
  405a82:	2300      	movs	r3, #0
  405a84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405a88:	3c08      	subs	r4, #8
  405a8a:	ea85 0501 	eor.w	r5, r5, r1
  405a8e:	ea86 0601 	eor.w	r6, r6, r1
  405a92:	fa85 f547 	uadd8	r5, r5, r7
  405a96:	faa3 f587 	sel	r5, r3, r7
  405a9a:	fa86 f647 	uadd8	r6, r6, r7
  405a9e:	faa5 f687 	sel	r6, r5, r7
  405aa2:	b98e      	cbnz	r6, 405ac8 <memchr+0x78>
  405aa4:	d1ee      	bne.n	405a84 <memchr+0x34>
  405aa6:	bcf0      	pop	{r4, r5, r6, r7}
  405aa8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405aac:	f002 0207 	and.w	r2, r2, #7
  405ab0:	b132      	cbz	r2, 405ac0 <memchr+0x70>
  405ab2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ab6:	3a01      	subs	r2, #1
  405ab8:	ea83 0301 	eor.w	r3, r3, r1
  405abc:	b113      	cbz	r3, 405ac4 <memchr+0x74>
  405abe:	d1f8      	bne.n	405ab2 <memchr+0x62>
  405ac0:	2000      	movs	r0, #0
  405ac2:	4770      	bx	lr
  405ac4:	3801      	subs	r0, #1
  405ac6:	4770      	bx	lr
  405ac8:	2d00      	cmp	r5, #0
  405aca:	bf06      	itte	eq
  405acc:	4635      	moveq	r5, r6
  405ace:	3803      	subeq	r0, #3
  405ad0:	3807      	subne	r0, #7
  405ad2:	f015 0f01 	tst.w	r5, #1
  405ad6:	d107      	bne.n	405ae8 <memchr+0x98>
  405ad8:	3001      	adds	r0, #1
  405ada:	f415 7f80 	tst.w	r5, #256	; 0x100
  405ade:	bf02      	ittt	eq
  405ae0:	3001      	addeq	r0, #1
  405ae2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405ae6:	3001      	addeq	r0, #1
  405ae8:	bcf0      	pop	{r4, r5, r6, r7}
  405aea:	3801      	subs	r0, #1
  405aec:	4770      	bx	lr
  405aee:	bf00      	nop

00405af0 <memcpy>:
  405af0:	4684      	mov	ip, r0
  405af2:	ea41 0300 	orr.w	r3, r1, r0
  405af6:	f013 0303 	ands.w	r3, r3, #3
  405afa:	d16d      	bne.n	405bd8 <memcpy+0xe8>
  405afc:	3a40      	subs	r2, #64	; 0x40
  405afe:	d341      	bcc.n	405b84 <memcpy+0x94>
  405b00:	f851 3b04 	ldr.w	r3, [r1], #4
  405b04:	f840 3b04 	str.w	r3, [r0], #4
  405b08:	f851 3b04 	ldr.w	r3, [r1], #4
  405b0c:	f840 3b04 	str.w	r3, [r0], #4
  405b10:	f851 3b04 	ldr.w	r3, [r1], #4
  405b14:	f840 3b04 	str.w	r3, [r0], #4
  405b18:	f851 3b04 	ldr.w	r3, [r1], #4
  405b1c:	f840 3b04 	str.w	r3, [r0], #4
  405b20:	f851 3b04 	ldr.w	r3, [r1], #4
  405b24:	f840 3b04 	str.w	r3, [r0], #4
  405b28:	f851 3b04 	ldr.w	r3, [r1], #4
  405b2c:	f840 3b04 	str.w	r3, [r0], #4
  405b30:	f851 3b04 	ldr.w	r3, [r1], #4
  405b34:	f840 3b04 	str.w	r3, [r0], #4
  405b38:	f851 3b04 	ldr.w	r3, [r1], #4
  405b3c:	f840 3b04 	str.w	r3, [r0], #4
  405b40:	f851 3b04 	ldr.w	r3, [r1], #4
  405b44:	f840 3b04 	str.w	r3, [r0], #4
  405b48:	f851 3b04 	ldr.w	r3, [r1], #4
  405b4c:	f840 3b04 	str.w	r3, [r0], #4
  405b50:	f851 3b04 	ldr.w	r3, [r1], #4
  405b54:	f840 3b04 	str.w	r3, [r0], #4
  405b58:	f851 3b04 	ldr.w	r3, [r1], #4
  405b5c:	f840 3b04 	str.w	r3, [r0], #4
  405b60:	f851 3b04 	ldr.w	r3, [r1], #4
  405b64:	f840 3b04 	str.w	r3, [r0], #4
  405b68:	f851 3b04 	ldr.w	r3, [r1], #4
  405b6c:	f840 3b04 	str.w	r3, [r0], #4
  405b70:	f851 3b04 	ldr.w	r3, [r1], #4
  405b74:	f840 3b04 	str.w	r3, [r0], #4
  405b78:	f851 3b04 	ldr.w	r3, [r1], #4
  405b7c:	f840 3b04 	str.w	r3, [r0], #4
  405b80:	3a40      	subs	r2, #64	; 0x40
  405b82:	d2bd      	bcs.n	405b00 <memcpy+0x10>
  405b84:	3230      	adds	r2, #48	; 0x30
  405b86:	d311      	bcc.n	405bac <memcpy+0xbc>
  405b88:	f851 3b04 	ldr.w	r3, [r1], #4
  405b8c:	f840 3b04 	str.w	r3, [r0], #4
  405b90:	f851 3b04 	ldr.w	r3, [r1], #4
  405b94:	f840 3b04 	str.w	r3, [r0], #4
  405b98:	f851 3b04 	ldr.w	r3, [r1], #4
  405b9c:	f840 3b04 	str.w	r3, [r0], #4
  405ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ba4:	f840 3b04 	str.w	r3, [r0], #4
  405ba8:	3a10      	subs	r2, #16
  405baa:	d2ed      	bcs.n	405b88 <memcpy+0x98>
  405bac:	320c      	adds	r2, #12
  405bae:	d305      	bcc.n	405bbc <memcpy+0xcc>
  405bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405bb4:	f840 3b04 	str.w	r3, [r0], #4
  405bb8:	3a04      	subs	r2, #4
  405bba:	d2f9      	bcs.n	405bb0 <memcpy+0xc0>
  405bbc:	3204      	adds	r2, #4
  405bbe:	d008      	beq.n	405bd2 <memcpy+0xe2>
  405bc0:	07d2      	lsls	r2, r2, #31
  405bc2:	bf1c      	itt	ne
  405bc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405bc8:	f800 3b01 	strbne.w	r3, [r0], #1
  405bcc:	d301      	bcc.n	405bd2 <memcpy+0xe2>
  405bce:	880b      	ldrh	r3, [r1, #0]
  405bd0:	8003      	strh	r3, [r0, #0]
  405bd2:	4660      	mov	r0, ip
  405bd4:	4770      	bx	lr
  405bd6:	bf00      	nop
  405bd8:	2a08      	cmp	r2, #8
  405bda:	d313      	bcc.n	405c04 <memcpy+0x114>
  405bdc:	078b      	lsls	r3, r1, #30
  405bde:	d08d      	beq.n	405afc <memcpy+0xc>
  405be0:	f010 0303 	ands.w	r3, r0, #3
  405be4:	d08a      	beq.n	405afc <memcpy+0xc>
  405be6:	f1c3 0304 	rsb	r3, r3, #4
  405bea:	1ad2      	subs	r2, r2, r3
  405bec:	07db      	lsls	r3, r3, #31
  405bee:	bf1c      	itt	ne
  405bf0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405bf4:	f800 3b01 	strbne.w	r3, [r0], #1
  405bf8:	d380      	bcc.n	405afc <memcpy+0xc>
  405bfa:	f831 3b02 	ldrh.w	r3, [r1], #2
  405bfe:	f820 3b02 	strh.w	r3, [r0], #2
  405c02:	e77b      	b.n	405afc <memcpy+0xc>
  405c04:	3a04      	subs	r2, #4
  405c06:	d3d9      	bcc.n	405bbc <memcpy+0xcc>
  405c08:	3a01      	subs	r2, #1
  405c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
  405c0e:	f800 3b01 	strb.w	r3, [r0], #1
  405c12:	d2f9      	bcs.n	405c08 <memcpy+0x118>
  405c14:	780b      	ldrb	r3, [r1, #0]
  405c16:	7003      	strb	r3, [r0, #0]
  405c18:	784b      	ldrb	r3, [r1, #1]
  405c1a:	7043      	strb	r3, [r0, #1]
  405c1c:	788b      	ldrb	r3, [r1, #2]
  405c1e:	7083      	strb	r3, [r0, #2]
  405c20:	4660      	mov	r0, ip
  405c22:	4770      	bx	lr

00405c24 <memmove>:
  405c24:	4288      	cmp	r0, r1
  405c26:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c28:	d90d      	bls.n	405c46 <memmove+0x22>
  405c2a:	188b      	adds	r3, r1, r2
  405c2c:	4298      	cmp	r0, r3
  405c2e:	d20a      	bcs.n	405c46 <memmove+0x22>
  405c30:	1881      	adds	r1, r0, r2
  405c32:	2a00      	cmp	r2, #0
  405c34:	d051      	beq.n	405cda <memmove+0xb6>
  405c36:	1a9a      	subs	r2, r3, r2
  405c38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405c3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  405c40:	4293      	cmp	r3, r2
  405c42:	d1f9      	bne.n	405c38 <memmove+0x14>
  405c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c46:	2a0f      	cmp	r2, #15
  405c48:	d948      	bls.n	405cdc <memmove+0xb8>
  405c4a:	ea41 0300 	orr.w	r3, r1, r0
  405c4e:	079b      	lsls	r3, r3, #30
  405c50:	d146      	bne.n	405ce0 <memmove+0xbc>
  405c52:	f100 0410 	add.w	r4, r0, #16
  405c56:	f101 0310 	add.w	r3, r1, #16
  405c5a:	4615      	mov	r5, r2
  405c5c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405c60:	f844 6c10 	str.w	r6, [r4, #-16]
  405c64:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405c68:	f844 6c0c 	str.w	r6, [r4, #-12]
  405c6c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405c70:	f844 6c08 	str.w	r6, [r4, #-8]
  405c74:	3d10      	subs	r5, #16
  405c76:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405c7a:	f844 6c04 	str.w	r6, [r4, #-4]
  405c7e:	2d0f      	cmp	r5, #15
  405c80:	f103 0310 	add.w	r3, r3, #16
  405c84:	f104 0410 	add.w	r4, r4, #16
  405c88:	d8e8      	bhi.n	405c5c <memmove+0x38>
  405c8a:	f1a2 0310 	sub.w	r3, r2, #16
  405c8e:	f023 030f 	bic.w	r3, r3, #15
  405c92:	f002 0e0f 	and.w	lr, r2, #15
  405c96:	3310      	adds	r3, #16
  405c98:	f1be 0f03 	cmp.w	lr, #3
  405c9c:	4419      	add	r1, r3
  405c9e:	4403      	add	r3, r0
  405ca0:	d921      	bls.n	405ce6 <memmove+0xc2>
  405ca2:	1f1e      	subs	r6, r3, #4
  405ca4:	460d      	mov	r5, r1
  405ca6:	4674      	mov	r4, lr
  405ca8:	3c04      	subs	r4, #4
  405caa:	f855 7b04 	ldr.w	r7, [r5], #4
  405cae:	f846 7f04 	str.w	r7, [r6, #4]!
  405cb2:	2c03      	cmp	r4, #3
  405cb4:	d8f8      	bhi.n	405ca8 <memmove+0x84>
  405cb6:	f1ae 0404 	sub.w	r4, lr, #4
  405cba:	f024 0403 	bic.w	r4, r4, #3
  405cbe:	3404      	adds	r4, #4
  405cc0:	4423      	add	r3, r4
  405cc2:	4421      	add	r1, r4
  405cc4:	f002 0203 	and.w	r2, r2, #3
  405cc8:	b162      	cbz	r2, 405ce4 <memmove+0xc0>
  405cca:	3b01      	subs	r3, #1
  405ccc:	440a      	add	r2, r1
  405cce:	f811 4b01 	ldrb.w	r4, [r1], #1
  405cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
  405cd6:	428a      	cmp	r2, r1
  405cd8:	d1f9      	bne.n	405cce <memmove+0xaa>
  405cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cdc:	4603      	mov	r3, r0
  405cde:	e7f3      	b.n	405cc8 <memmove+0xa4>
  405ce0:	4603      	mov	r3, r0
  405ce2:	e7f2      	b.n	405cca <memmove+0xa6>
  405ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ce6:	4672      	mov	r2, lr
  405ce8:	e7ee      	b.n	405cc8 <memmove+0xa4>
  405cea:	bf00      	nop

00405cec <__malloc_lock>:
  405cec:	4770      	bx	lr
  405cee:	bf00      	nop

00405cf0 <__malloc_unlock>:
  405cf0:	4770      	bx	lr
  405cf2:	bf00      	nop

00405cf4 <_realloc_r>:
  405cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cf8:	4617      	mov	r7, r2
  405cfa:	b083      	sub	sp, #12
  405cfc:	2900      	cmp	r1, #0
  405cfe:	f000 80c1 	beq.w	405e84 <_realloc_r+0x190>
  405d02:	460e      	mov	r6, r1
  405d04:	4681      	mov	r9, r0
  405d06:	f107 050b 	add.w	r5, r7, #11
  405d0a:	f7ff ffef 	bl	405cec <__malloc_lock>
  405d0e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  405d12:	2d16      	cmp	r5, #22
  405d14:	f02e 0403 	bic.w	r4, lr, #3
  405d18:	f1a6 0808 	sub.w	r8, r6, #8
  405d1c:	d840      	bhi.n	405da0 <_realloc_r+0xac>
  405d1e:	2210      	movs	r2, #16
  405d20:	4615      	mov	r5, r2
  405d22:	42af      	cmp	r7, r5
  405d24:	d841      	bhi.n	405daa <_realloc_r+0xb6>
  405d26:	4294      	cmp	r4, r2
  405d28:	da75      	bge.n	405e16 <_realloc_r+0x122>
  405d2a:	4bc9      	ldr	r3, [pc, #804]	; (406050 <_realloc_r+0x35c>)
  405d2c:	6899      	ldr	r1, [r3, #8]
  405d2e:	eb08 0004 	add.w	r0, r8, r4
  405d32:	4288      	cmp	r0, r1
  405d34:	6841      	ldr	r1, [r0, #4]
  405d36:	f000 80d9 	beq.w	405eec <_realloc_r+0x1f8>
  405d3a:	f021 0301 	bic.w	r3, r1, #1
  405d3e:	4403      	add	r3, r0
  405d40:	685b      	ldr	r3, [r3, #4]
  405d42:	07db      	lsls	r3, r3, #31
  405d44:	d57d      	bpl.n	405e42 <_realloc_r+0x14e>
  405d46:	f01e 0f01 	tst.w	lr, #1
  405d4a:	d035      	beq.n	405db8 <_realloc_r+0xc4>
  405d4c:	4639      	mov	r1, r7
  405d4e:	4648      	mov	r0, r9
  405d50:	f7ff fbc4 	bl	4054dc <_malloc_r>
  405d54:	4607      	mov	r7, r0
  405d56:	b1e0      	cbz	r0, 405d92 <_realloc_r+0x9e>
  405d58:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405d5c:	f023 0301 	bic.w	r3, r3, #1
  405d60:	4443      	add	r3, r8
  405d62:	f1a0 0208 	sub.w	r2, r0, #8
  405d66:	429a      	cmp	r2, r3
  405d68:	f000 8144 	beq.w	405ff4 <_realloc_r+0x300>
  405d6c:	1f22      	subs	r2, r4, #4
  405d6e:	2a24      	cmp	r2, #36	; 0x24
  405d70:	f200 8131 	bhi.w	405fd6 <_realloc_r+0x2e2>
  405d74:	2a13      	cmp	r2, #19
  405d76:	f200 8104 	bhi.w	405f82 <_realloc_r+0x28e>
  405d7a:	4603      	mov	r3, r0
  405d7c:	4632      	mov	r2, r6
  405d7e:	6811      	ldr	r1, [r2, #0]
  405d80:	6019      	str	r1, [r3, #0]
  405d82:	6851      	ldr	r1, [r2, #4]
  405d84:	6059      	str	r1, [r3, #4]
  405d86:	6892      	ldr	r2, [r2, #8]
  405d88:	609a      	str	r2, [r3, #8]
  405d8a:	4631      	mov	r1, r6
  405d8c:	4648      	mov	r0, r9
  405d8e:	f7ff f88b 	bl	404ea8 <_free_r>
  405d92:	4648      	mov	r0, r9
  405d94:	f7ff ffac 	bl	405cf0 <__malloc_unlock>
  405d98:	4638      	mov	r0, r7
  405d9a:	b003      	add	sp, #12
  405d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405da0:	f025 0507 	bic.w	r5, r5, #7
  405da4:	2d00      	cmp	r5, #0
  405da6:	462a      	mov	r2, r5
  405da8:	dabb      	bge.n	405d22 <_realloc_r+0x2e>
  405daa:	230c      	movs	r3, #12
  405dac:	2000      	movs	r0, #0
  405dae:	f8c9 3000 	str.w	r3, [r9]
  405db2:	b003      	add	sp, #12
  405db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405db8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  405dbc:	ebc3 0a08 	rsb	sl, r3, r8
  405dc0:	f8da 3004 	ldr.w	r3, [sl, #4]
  405dc4:	f023 0c03 	bic.w	ip, r3, #3
  405dc8:	eb04 030c 	add.w	r3, r4, ip
  405dcc:	4293      	cmp	r3, r2
  405dce:	dbbd      	blt.n	405d4c <_realloc_r+0x58>
  405dd0:	4657      	mov	r7, sl
  405dd2:	f8da 100c 	ldr.w	r1, [sl, #12]
  405dd6:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405dda:	1f22      	subs	r2, r4, #4
  405ddc:	2a24      	cmp	r2, #36	; 0x24
  405dde:	60c1      	str	r1, [r0, #12]
  405de0:	6088      	str	r0, [r1, #8]
  405de2:	f200 8117 	bhi.w	406014 <_realloc_r+0x320>
  405de6:	2a13      	cmp	r2, #19
  405de8:	f240 8112 	bls.w	406010 <_realloc_r+0x31c>
  405dec:	6831      	ldr	r1, [r6, #0]
  405dee:	f8ca 1008 	str.w	r1, [sl, #8]
  405df2:	6871      	ldr	r1, [r6, #4]
  405df4:	f8ca 100c 	str.w	r1, [sl, #12]
  405df8:	2a1b      	cmp	r2, #27
  405dfa:	f200 812b 	bhi.w	406054 <_realloc_r+0x360>
  405dfe:	3608      	adds	r6, #8
  405e00:	f10a 0210 	add.w	r2, sl, #16
  405e04:	6831      	ldr	r1, [r6, #0]
  405e06:	6011      	str	r1, [r2, #0]
  405e08:	6871      	ldr	r1, [r6, #4]
  405e0a:	6051      	str	r1, [r2, #4]
  405e0c:	68b1      	ldr	r1, [r6, #8]
  405e0e:	6091      	str	r1, [r2, #8]
  405e10:	463e      	mov	r6, r7
  405e12:	461c      	mov	r4, r3
  405e14:	46d0      	mov	r8, sl
  405e16:	1b63      	subs	r3, r4, r5
  405e18:	2b0f      	cmp	r3, #15
  405e1a:	d81d      	bhi.n	405e58 <_realloc_r+0x164>
  405e1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405e20:	f003 0301 	and.w	r3, r3, #1
  405e24:	4323      	orrs	r3, r4
  405e26:	4444      	add	r4, r8
  405e28:	f8c8 3004 	str.w	r3, [r8, #4]
  405e2c:	6863      	ldr	r3, [r4, #4]
  405e2e:	f043 0301 	orr.w	r3, r3, #1
  405e32:	6063      	str	r3, [r4, #4]
  405e34:	4648      	mov	r0, r9
  405e36:	f7ff ff5b 	bl	405cf0 <__malloc_unlock>
  405e3a:	4630      	mov	r0, r6
  405e3c:	b003      	add	sp, #12
  405e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e42:	f021 0103 	bic.w	r1, r1, #3
  405e46:	4421      	add	r1, r4
  405e48:	4291      	cmp	r1, r2
  405e4a:	db21      	blt.n	405e90 <_realloc_r+0x19c>
  405e4c:	68c3      	ldr	r3, [r0, #12]
  405e4e:	6882      	ldr	r2, [r0, #8]
  405e50:	460c      	mov	r4, r1
  405e52:	60d3      	str	r3, [r2, #12]
  405e54:	609a      	str	r2, [r3, #8]
  405e56:	e7de      	b.n	405e16 <_realloc_r+0x122>
  405e58:	f8d8 2004 	ldr.w	r2, [r8, #4]
  405e5c:	eb08 0105 	add.w	r1, r8, r5
  405e60:	f002 0201 	and.w	r2, r2, #1
  405e64:	4315      	orrs	r5, r2
  405e66:	f043 0201 	orr.w	r2, r3, #1
  405e6a:	440b      	add	r3, r1
  405e6c:	f8c8 5004 	str.w	r5, [r8, #4]
  405e70:	604a      	str	r2, [r1, #4]
  405e72:	685a      	ldr	r2, [r3, #4]
  405e74:	f042 0201 	orr.w	r2, r2, #1
  405e78:	3108      	adds	r1, #8
  405e7a:	605a      	str	r2, [r3, #4]
  405e7c:	4648      	mov	r0, r9
  405e7e:	f7ff f813 	bl	404ea8 <_free_r>
  405e82:	e7d7      	b.n	405e34 <_realloc_r+0x140>
  405e84:	4611      	mov	r1, r2
  405e86:	b003      	add	sp, #12
  405e88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e8c:	f7ff bb26 	b.w	4054dc <_malloc_r>
  405e90:	f01e 0f01 	tst.w	lr, #1
  405e94:	f47f af5a 	bne.w	405d4c <_realloc_r+0x58>
  405e98:	f856 3c08 	ldr.w	r3, [r6, #-8]
  405e9c:	ebc3 0a08 	rsb	sl, r3, r8
  405ea0:	f8da 3004 	ldr.w	r3, [sl, #4]
  405ea4:	f023 0c03 	bic.w	ip, r3, #3
  405ea8:	eb01 0e0c 	add.w	lr, r1, ip
  405eac:	4596      	cmp	lr, r2
  405eae:	db8b      	blt.n	405dc8 <_realloc_r+0xd4>
  405eb0:	68c3      	ldr	r3, [r0, #12]
  405eb2:	6882      	ldr	r2, [r0, #8]
  405eb4:	4657      	mov	r7, sl
  405eb6:	60d3      	str	r3, [r2, #12]
  405eb8:	609a      	str	r2, [r3, #8]
  405eba:	f857 1f08 	ldr.w	r1, [r7, #8]!
  405ebe:	f8da 300c 	ldr.w	r3, [sl, #12]
  405ec2:	60cb      	str	r3, [r1, #12]
  405ec4:	1f22      	subs	r2, r4, #4
  405ec6:	2a24      	cmp	r2, #36	; 0x24
  405ec8:	6099      	str	r1, [r3, #8]
  405eca:	f200 8099 	bhi.w	406000 <_realloc_r+0x30c>
  405ece:	2a13      	cmp	r2, #19
  405ed0:	d962      	bls.n	405f98 <_realloc_r+0x2a4>
  405ed2:	6833      	ldr	r3, [r6, #0]
  405ed4:	f8ca 3008 	str.w	r3, [sl, #8]
  405ed8:	6873      	ldr	r3, [r6, #4]
  405eda:	f8ca 300c 	str.w	r3, [sl, #12]
  405ede:	2a1b      	cmp	r2, #27
  405ee0:	f200 80a0 	bhi.w	406024 <_realloc_r+0x330>
  405ee4:	3608      	adds	r6, #8
  405ee6:	f10a 0310 	add.w	r3, sl, #16
  405eea:	e056      	b.n	405f9a <_realloc_r+0x2a6>
  405eec:	f021 0b03 	bic.w	fp, r1, #3
  405ef0:	44a3      	add	fp, r4
  405ef2:	f105 0010 	add.w	r0, r5, #16
  405ef6:	4583      	cmp	fp, r0
  405ef8:	da59      	bge.n	405fae <_realloc_r+0x2ba>
  405efa:	f01e 0f01 	tst.w	lr, #1
  405efe:	f47f af25 	bne.w	405d4c <_realloc_r+0x58>
  405f02:	f856 1c08 	ldr.w	r1, [r6, #-8]
  405f06:	ebc1 0a08 	rsb	sl, r1, r8
  405f0a:	f8da 1004 	ldr.w	r1, [sl, #4]
  405f0e:	f021 0c03 	bic.w	ip, r1, #3
  405f12:	44e3      	add	fp, ip
  405f14:	4558      	cmp	r0, fp
  405f16:	f73f af57 	bgt.w	405dc8 <_realloc_r+0xd4>
  405f1a:	4657      	mov	r7, sl
  405f1c:	f8da 100c 	ldr.w	r1, [sl, #12]
  405f20:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405f24:	1f22      	subs	r2, r4, #4
  405f26:	2a24      	cmp	r2, #36	; 0x24
  405f28:	60c1      	str	r1, [r0, #12]
  405f2a:	6088      	str	r0, [r1, #8]
  405f2c:	f200 80b4 	bhi.w	406098 <_realloc_r+0x3a4>
  405f30:	2a13      	cmp	r2, #19
  405f32:	f240 80a5 	bls.w	406080 <_realloc_r+0x38c>
  405f36:	6831      	ldr	r1, [r6, #0]
  405f38:	f8ca 1008 	str.w	r1, [sl, #8]
  405f3c:	6871      	ldr	r1, [r6, #4]
  405f3e:	f8ca 100c 	str.w	r1, [sl, #12]
  405f42:	2a1b      	cmp	r2, #27
  405f44:	f200 80af 	bhi.w	4060a6 <_realloc_r+0x3b2>
  405f48:	3608      	adds	r6, #8
  405f4a:	f10a 0210 	add.w	r2, sl, #16
  405f4e:	6831      	ldr	r1, [r6, #0]
  405f50:	6011      	str	r1, [r2, #0]
  405f52:	6871      	ldr	r1, [r6, #4]
  405f54:	6051      	str	r1, [r2, #4]
  405f56:	68b1      	ldr	r1, [r6, #8]
  405f58:	6091      	str	r1, [r2, #8]
  405f5a:	eb0a 0105 	add.w	r1, sl, r5
  405f5e:	ebc5 020b 	rsb	r2, r5, fp
  405f62:	f042 0201 	orr.w	r2, r2, #1
  405f66:	6099      	str	r1, [r3, #8]
  405f68:	604a      	str	r2, [r1, #4]
  405f6a:	f8da 3004 	ldr.w	r3, [sl, #4]
  405f6e:	f003 0301 	and.w	r3, r3, #1
  405f72:	431d      	orrs	r5, r3
  405f74:	4648      	mov	r0, r9
  405f76:	f8ca 5004 	str.w	r5, [sl, #4]
  405f7a:	f7ff feb9 	bl	405cf0 <__malloc_unlock>
  405f7e:	4638      	mov	r0, r7
  405f80:	e75c      	b.n	405e3c <_realloc_r+0x148>
  405f82:	6833      	ldr	r3, [r6, #0]
  405f84:	6003      	str	r3, [r0, #0]
  405f86:	6873      	ldr	r3, [r6, #4]
  405f88:	6043      	str	r3, [r0, #4]
  405f8a:	2a1b      	cmp	r2, #27
  405f8c:	d827      	bhi.n	405fde <_realloc_r+0x2ea>
  405f8e:	f100 0308 	add.w	r3, r0, #8
  405f92:	f106 0208 	add.w	r2, r6, #8
  405f96:	e6f2      	b.n	405d7e <_realloc_r+0x8a>
  405f98:	463b      	mov	r3, r7
  405f9a:	6832      	ldr	r2, [r6, #0]
  405f9c:	601a      	str	r2, [r3, #0]
  405f9e:	6872      	ldr	r2, [r6, #4]
  405fa0:	605a      	str	r2, [r3, #4]
  405fa2:	68b2      	ldr	r2, [r6, #8]
  405fa4:	609a      	str	r2, [r3, #8]
  405fa6:	463e      	mov	r6, r7
  405fa8:	4674      	mov	r4, lr
  405faa:	46d0      	mov	r8, sl
  405fac:	e733      	b.n	405e16 <_realloc_r+0x122>
  405fae:	eb08 0105 	add.w	r1, r8, r5
  405fb2:	ebc5 0b0b 	rsb	fp, r5, fp
  405fb6:	f04b 0201 	orr.w	r2, fp, #1
  405fba:	6099      	str	r1, [r3, #8]
  405fbc:	604a      	str	r2, [r1, #4]
  405fbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405fc2:	f003 0301 	and.w	r3, r3, #1
  405fc6:	431d      	orrs	r5, r3
  405fc8:	4648      	mov	r0, r9
  405fca:	f846 5c04 	str.w	r5, [r6, #-4]
  405fce:	f7ff fe8f 	bl	405cf0 <__malloc_unlock>
  405fd2:	4630      	mov	r0, r6
  405fd4:	e732      	b.n	405e3c <_realloc_r+0x148>
  405fd6:	4631      	mov	r1, r6
  405fd8:	f7ff fe24 	bl	405c24 <memmove>
  405fdc:	e6d5      	b.n	405d8a <_realloc_r+0x96>
  405fde:	68b3      	ldr	r3, [r6, #8]
  405fe0:	6083      	str	r3, [r0, #8]
  405fe2:	68f3      	ldr	r3, [r6, #12]
  405fe4:	60c3      	str	r3, [r0, #12]
  405fe6:	2a24      	cmp	r2, #36	; 0x24
  405fe8:	d028      	beq.n	40603c <_realloc_r+0x348>
  405fea:	f100 0310 	add.w	r3, r0, #16
  405fee:	f106 0210 	add.w	r2, r6, #16
  405ff2:	e6c4      	b.n	405d7e <_realloc_r+0x8a>
  405ff4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405ff8:	f023 0303 	bic.w	r3, r3, #3
  405ffc:	441c      	add	r4, r3
  405ffe:	e70a      	b.n	405e16 <_realloc_r+0x122>
  406000:	4631      	mov	r1, r6
  406002:	4638      	mov	r0, r7
  406004:	4674      	mov	r4, lr
  406006:	46d0      	mov	r8, sl
  406008:	f7ff fe0c 	bl	405c24 <memmove>
  40600c:	463e      	mov	r6, r7
  40600e:	e702      	b.n	405e16 <_realloc_r+0x122>
  406010:	463a      	mov	r2, r7
  406012:	e6f7      	b.n	405e04 <_realloc_r+0x110>
  406014:	4631      	mov	r1, r6
  406016:	4638      	mov	r0, r7
  406018:	461c      	mov	r4, r3
  40601a:	46d0      	mov	r8, sl
  40601c:	f7ff fe02 	bl	405c24 <memmove>
  406020:	463e      	mov	r6, r7
  406022:	e6f8      	b.n	405e16 <_realloc_r+0x122>
  406024:	68b3      	ldr	r3, [r6, #8]
  406026:	f8ca 3010 	str.w	r3, [sl, #16]
  40602a:	68f3      	ldr	r3, [r6, #12]
  40602c:	f8ca 3014 	str.w	r3, [sl, #20]
  406030:	2a24      	cmp	r2, #36	; 0x24
  406032:	d01b      	beq.n	40606c <_realloc_r+0x378>
  406034:	3610      	adds	r6, #16
  406036:	f10a 0318 	add.w	r3, sl, #24
  40603a:	e7ae      	b.n	405f9a <_realloc_r+0x2a6>
  40603c:	6933      	ldr	r3, [r6, #16]
  40603e:	6103      	str	r3, [r0, #16]
  406040:	6973      	ldr	r3, [r6, #20]
  406042:	6143      	str	r3, [r0, #20]
  406044:	f106 0218 	add.w	r2, r6, #24
  406048:	f100 0318 	add.w	r3, r0, #24
  40604c:	e697      	b.n	405d7e <_realloc_r+0x8a>
  40604e:	bf00      	nop
  406050:	20400470 	.word	0x20400470
  406054:	68b1      	ldr	r1, [r6, #8]
  406056:	f8ca 1010 	str.w	r1, [sl, #16]
  40605a:	68f1      	ldr	r1, [r6, #12]
  40605c:	f8ca 1014 	str.w	r1, [sl, #20]
  406060:	2a24      	cmp	r2, #36	; 0x24
  406062:	d00f      	beq.n	406084 <_realloc_r+0x390>
  406064:	3610      	adds	r6, #16
  406066:	f10a 0218 	add.w	r2, sl, #24
  40606a:	e6cb      	b.n	405e04 <_realloc_r+0x110>
  40606c:	6933      	ldr	r3, [r6, #16]
  40606e:	f8ca 3018 	str.w	r3, [sl, #24]
  406072:	6973      	ldr	r3, [r6, #20]
  406074:	f8ca 301c 	str.w	r3, [sl, #28]
  406078:	3618      	adds	r6, #24
  40607a:	f10a 0320 	add.w	r3, sl, #32
  40607e:	e78c      	b.n	405f9a <_realloc_r+0x2a6>
  406080:	463a      	mov	r2, r7
  406082:	e764      	b.n	405f4e <_realloc_r+0x25a>
  406084:	6932      	ldr	r2, [r6, #16]
  406086:	f8ca 2018 	str.w	r2, [sl, #24]
  40608a:	6972      	ldr	r2, [r6, #20]
  40608c:	f8ca 201c 	str.w	r2, [sl, #28]
  406090:	3618      	adds	r6, #24
  406092:	f10a 0220 	add.w	r2, sl, #32
  406096:	e6b5      	b.n	405e04 <_realloc_r+0x110>
  406098:	4631      	mov	r1, r6
  40609a:	4638      	mov	r0, r7
  40609c:	9301      	str	r3, [sp, #4]
  40609e:	f7ff fdc1 	bl	405c24 <memmove>
  4060a2:	9b01      	ldr	r3, [sp, #4]
  4060a4:	e759      	b.n	405f5a <_realloc_r+0x266>
  4060a6:	68b1      	ldr	r1, [r6, #8]
  4060a8:	f8ca 1010 	str.w	r1, [sl, #16]
  4060ac:	68f1      	ldr	r1, [r6, #12]
  4060ae:	f8ca 1014 	str.w	r1, [sl, #20]
  4060b2:	2a24      	cmp	r2, #36	; 0x24
  4060b4:	d003      	beq.n	4060be <_realloc_r+0x3ca>
  4060b6:	3610      	adds	r6, #16
  4060b8:	f10a 0218 	add.w	r2, sl, #24
  4060bc:	e747      	b.n	405f4e <_realloc_r+0x25a>
  4060be:	6932      	ldr	r2, [r6, #16]
  4060c0:	f8ca 2018 	str.w	r2, [sl, #24]
  4060c4:	6972      	ldr	r2, [r6, #20]
  4060c6:	f8ca 201c 	str.w	r2, [sl, #28]
  4060ca:	3618      	adds	r6, #24
  4060cc:	f10a 0220 	add.w	r2, sl, #32
  4060d0:	e73d      	b.n	405f4e <_realloc_r+0x25a>
  4060d2:	bf00      	nop

004060d4 <_sbrk_r>:
  4060d4:	b538      	push	{r3, r4, r5, lr}
  4060d6:	4c07      	ldr	r4, [pc, #28]	; (4060f4 <_sbrk_r+0x20>)
  4060d8:	2300      	movs	r3, #0
  4060da:	4605      	mov	r5, r0
  4060dc:	4608      	mov	r0, r1
  4060de:	6023      	str	r3, [r4, #0]
  4060e0:	f7fd f904 	bl	4032ec <_sbrk>
  4060e4:	1c43      	adds	r3, r0, #1
  4060e6:	d000      	beq.n	4060ea <_sbrk_r+0x16>
  4060e8:	bd38      	pop	{r3, r4, r5, pc}
  4060ea:	6823      	ldr	r3, [r4, #0]
  4060ec:	2b00      	cmp	r3, #0
  4060ee:	d0fb      	beq.n	4060e8 <_sbrk_r+0x14>
  4060f0:	602b      	str	r3, [r5, #0]
  4060f2:	bd38      	pop	{r3, r4, r5, pc}
  4060f4:	2040099c 	.word	0x2040099c

004060f8 <__sread>:
  4060f8:	b510      	push	{r4, lr}
  4060fa:	460c      	mov	r4, r1
  4060fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406100:	f000 f9c4 	bl	40648c <_read_r>
  406104:	2800      	cmp	r0, #0
  406106:	db03      	blt.n	406110 <__sread+0x18>
  406108:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40610a:	4403      	add	r3, r0
  40610c:	6523      	str	r3, [r4, #80]	; 0x50
  40610e:	bd10      	pop	{r4, pc}
  406110:	89a3      	ldrh	r3, [r4, #12]
  406112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406116:	81a3      	strh	r3, [r4, #12]
  406118:	bd10      	pop	{r4, pc}
  40611a:	bf00      	nop

0040611c <__swrite>:
  40611c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406120:	4616      	mov	r6, r2
  406122:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406126:	461f      	mov	r7, r3
  406128:	05d3      	lsls	r3, r2, #23
  40612a:	460c      	mov	r4, r1
  40612c:	4605      	mov	r5, r0
  40612e:	d507      	bpl.n	406140 <__swrite+0x24>
  406130:	2200      	movs	r2, #0
  406132:	2302      	movs	r3, #2
  406134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406138:	f000 f992 	bl	406460 <_lseek_r>
  40613c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406144:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406148:	81a2      	strh	r2, [r4, #12]
  40614a:	463b      	mov	r3, r7
  40614c:	4632      	mov	r2, r6
  40614e:	4628      	mov	r0, r5
  406150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406154:	f000 b8a2 	b.w	40629c <_write_r>

00406158 <__sseek>:
  406158:	b510      	push	{r4, lr}
  40615a:	460c      	mov	r4, r1
  40615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406160:	f000 f97e 	bl	406460 <_lseek_r>
  406164:	89a3      	ldrh	r3, [r4, #12]
  406166:	1c42      	adds	r2, r0, #1
  406168:	bf0e      	itee	eq
  40616a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40616e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406172:	6520      	strne	r0, [r4, #80]	; 0x50
  406174:	81a3      	strh	r3, [r4, #12]
  406176:	bd10      	pop	{r4, pc}

00406178 <__sclose>:
  406178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40617c:	f000 b8f6 	b.w	40636c <_close_r>

00406180 <__swbuf_r>:
  406180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406182:	460e      	mov	r6, r1
  406184:	4614      	mov	r4, r2
  406186:	4607      	mov	r7, r0
  406188:	b110      	cbz	r0, 406190 <__swbuf_r+0x10>
  40618a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40618c:	2b00      	cmp	r3, #0
  40618e:	d04a      	beq.n	406226 <__swbuf_r+0xa6>
  406190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406194:	69a3      	ldr	r3, [r4, #24]
  406196:	60a3      	str	r3, [r4, #8]
  406198:	b291      	uxth	r1, r2
  40619a:	0708      	lsls	r0, r1, #28
  40619c:	d538      	bpl.n	406210 <__swbuf_r+0x90>
  40619e:	6923      	ldr	r3, [r4, #16]
  4061a0:	2b00      	cmp	r3, #0
  4061a2:	d035      	beq.n	406210 <__swbuf_r+0x90>
  4061a4:	0489      	lsls	r1, r1, #18
  4061a6:	b2f5      	uxtb	r5, r6
  4061a8:	d515      	bpl.n	4061d6 <__swbuf_r+0x56>
  4061aa:	6822      	ldr	r2, [r4, #0]
  4061ac:	6961      	ldr	r1, [r4, #20]
  4061ae:	1ad3      	subs	r3, r2, r3
  4061b0:	428b      	cmp	r3, r1
  4061b2:	da1c      	bge.n	4061ee <__swbuf_r+0x6e>
  4061b4:	3301      	adds	r3, #1
  4061b6:	68a1      	ldr	r1, [r4, #8]
  4061b8:	1c50      	adds	r0, r2, #1
  4061ba:	3901      	subs	r1, #1
  4061bc:	60a1      	str	r1, [r4, #8]
  4061be:	6020      	str	r0, [r4, #0]
  4061c0:	7016      	strb	r6, [r2, #0]
  4061c2:	6962      	ldr	r2, [r4, #20]
  4061c4:	429a      	cmp	r2, r3
  4061c6:	d01a      	beq.n	4061fe <__swbuf_r+0x7e>
  4061c8:	89a3      	ldrh	r3, [r4, #12]
  4061ca:	07db      	lsls	r3, r3, #31
  4061cc:	d501      	bpl.n	4061d2 <__swbuf_r+0x52>
  4061ce:	2d0a      	cmp	r5, #10
  4061d0:	d015      	beq.n	4061fe <__swbuf_r+0x7e>
  4061d2:	4628      	mov	r0, r5
  4061d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4061d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4061d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4061dc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4061e0:	81a2      	strh	r2, [r4, #12]
  4061e2:	6822      	ldr	r2, [r4, #0]
  4061e4:	6661      	str	r1, [r4, #100]	; 0x64
  4061e6:	6961      	ldr	r1, [r4, #20]
  4061e8:	1ad3      	subs	r3, r2, r3
  4061ea:	428b      	cmp	r3, r1
  4061ec:	dbe2      	blt.n	4061b4 <__swbuf_r+0x34>
  4061ee:	4621      	mov	r1, r4
  4061f0:	4638      	mov	r0, r7
  4061f2:	f7fe fcfb 	bl	404bec <_fflush_r>
  4061f6:	b940      	cbnz	r0, 40620a <__swbuf_r+0x8a>
  4061f8:	6822      	ldr	r2, [r4, #0]
  4061fa:	2301      	movs	r3, #1
  4061fc:	e7db      	b.n	4061b6 <__swbuf_r+0x36>
  4061fe:	4621      	mov	r1, r4
  406200:	4638      	mov	r0, r7
  406202:	f7fe fcf3 	bl	404bec <_fflush_r>
  406206:	2800      	cmp	r0, #0
  406208:	d0e3      	beq.n	4061d2 <__swbuf_r+0x52>
  40620a:	f04f 30ff 	mov.w	r0, #4294967295
  40620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406210:	4621      	mov	r1, r4
  406212:	4638      	mov	r0, r7
  406214:	f7fe fbd2 	bl	4049bc <__swsetup_r>
  406218:	2800      	cmp	r0, #0
  40621a:	d1f6      	bne.n	40620a <__swbuf_r+0x8a>
  40621c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406220:	6923      	ldr	r3, [r4, #16]
  406222:	b291      	uxth	r1, r2
  406224:	e7be      	b.n	4061a4 <__swbuf_r+0x24>
  406226:	f7fe fd75 	bl	404d14 <__sinit>
  40622a:	e7b1      	b.n	406190 <__swbuf_r+0x10>

0040622c <_wcrtomb_r>:
  40622c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406230:	4605      	mov	r5, r0
  406232:	b086      	sub	sp, #24
  406234:	461e      	mov	r6, r3
  406236:	460c      	mov	r4, r1
  406238:	b1a1      	cbz	r1, 406264 <_wcrtomb_r+0x38>
  40623a:	4b10      	ldr	r3, [pc, #64]	; (40627c <_wcrtomb_r+0x50>)
  40623c:	4617      	mov	r7, r2
  40623e:	f8d3 8000 	ldr.w	r8, [r3]
  406242:	f7ff f8c5 	bl	4053d0 <__locale_charset>
  406246:	9600      	str	r6, [sp, #0]
  406248:	4603      	mov	r3, r0
  40624a:	463a      	mov	r2, r7
  40624c:	4621      	mov	r1, r4
  40624e:	4628      	mov	r0, r5
  406250:	47c0      	blx	r8
  406252:	1c43      	adds	r3, r0, #1
  406254:	d103      	bne.n	40625e <_wcrtomb_r+0x32>
  406256:	2200      	movs	r2, #0
  406258:	238a      	movs	r3, #138	; 0x8a
  40625a:	6032      	str	r2, [r6, #0]
  40625c:	602b      	str	r3, [r5, #0]
  40625e:	b006      	add	sp, #24
  406260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406264:	4b05      	ldr	r3, [pc, #20]	; (40627c <_wcrtomb_r+0x50>)
  406266:	681f      	ldr	r7, [r3, #0]
  406268:	f7ff f8b2 	bl	4053d0 <__locale_charset>
  40626c:	9600      	str	r6, [sp, #0]
  40626e:	4603      	mov	r3, r0
  406270:	4622      	mov	r2, r4
  406272:	a903      	add	r1, sp, #12
  406274:	4628      	mov	r0, r5
  406276:	47b8      	blx	r7
  406278:	e7eb      	b.n	406252 <_wcrtomb_r+0x26>
  40627a:	bf00      	nop
  40627c:	20400880 	.word	0x20400880

00406280 <__ascii_wctomb>:
  406280:	b121      	cbz	r1, 40628c <__ascii_wctomb+0xc>
  406282:	2aff      	cmp	r2, #255	; 0xff
  406284:	d804      	bhi.n	406290 <__ascii_wctomb+0x10>
  406286:	700a      	strb	r2, [r1, #0]
  406288:	2001      	movs	r0, #1
  40628a:	4770      	bx	lr
  40628c:	4608      	mov	r0, r1
  40628e:	4770      	bx	lr
  406290:	238a      	movs	r3, #138	; 0x8a
  406292:	6003      	str	r3, [r0, #0]
  406294:	f04f 30ff 	mov.w	r0, #4294967295
  406298:	4770      	bx	lr
  40629a:	bf00      	nop

0040629c <_write_r>:
  40629c:	b570      	push	{r4, r5, r6, lr}
  40629e:	460d      	mov	r5, r1
  4062a0:	4c08      	ldr	r4, [pc, #32]	; (4062c4 <_write_r+0x28>)
  4062a2:	4611      	mov	r1, r2
  4062a4:	4606      	mov	r6, r0
  4062a6:	461a      	mov	r2, r3
  4062a8:	4628      	mov	r0, r5
  4062aa:	2300      	movs	r3, #0
  4062ac:	6023      	str	r3, [r4, #0]
  4062ae:	f7fc f9df 	bl	402670 <_write>
  4062b2:	1c43      	adds	r3, r0, #1
  4062b4:	d000      	beq.n	4062b8 <_write_r+0x1c>
  4062b6:	bd70      	pop	{r4, r5, r6, pc}
  4062b8:	6823      	ldr	r3, [r4, #0]
  4062ba:	2b00      	cmp	r3, #0
  4062bc:	d0fb      	beq.n	4062b6 <_write_r+0x1a>
  4062be:	6033      	str	r3, [r6, #0]
  4062c0:	bd70      	pop	{r4, r5, r6, pc}
  4062c2:	bf00      	nop
  4062c4:	2040099c 	.word	0x2040099c

004062c8 <__register_exitproc>:
  4062c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4062cc:	4c25      	ldr	r4, [pc, #148]	; (406364 <__register_exitproc+0x9c>)
  4062ce:	6825      	ldr	r5, [r4, #0]
  4062d0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4062d4:	4606      	mov	r6, r0
  4062d6:	4688      	mov	r8, r1
  4062d8:	4692      	mov	sl, r2
  4062da:	4699      	mov	r9, r3
  4062dc:	b3c4      	cbz	r4, 406350 <__register_exitproc+0x88>
  4062de:	6860      	ldr	r0, [r4, #4]
  4062e0:	281f      	cmp	r0, #31
  4062e2:	dc17      	bgt.n	406314 <__register_exitproc+0x4c>
  4062e4:	1c43      	adds	r3, r0, #1
  4062e6:	b176      	cbz	r6, 406306 <__register_exitproc+0x3e>
  4062e8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4062ec:	2201      	movs	r2, #1
  4062ee:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4062f2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4062f6:	4082      	lsls	r2, r0
  4062f8:	4311      	orrs	r1, r2
  4062fa:	2e02      	cmp	r6, #2
  4062fc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  406300:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406304:	d01e      	beq.n	406344 <__register_exitproc+0x7c>
  406306:	3002      	adds	r0, #2
  406308:	6063      	str	r3, [r4, #4]
  40630a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40630e:	2000      	movs	r0, #0
  406310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406314:	4b14      	ldr	r3, [pc, #80]	; (406368 <__register_exitproc+0xa0>)
  406316:	b303      	cbz	r3, 40635a <__register_exitproc+0x92>
  406318:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40631c:	f7ff f8d6 	bl	4054cc <malloc>
  406320:	4604      	mov	r4, r0
  406322:	b1d0      	cbz	r0, 40635a <__register_exitproc+0x92>
  406324:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406328:	2700      	movs	r7, #0
  40632a:	e880 0088 	stmia.w	r0, {r3, r7}
  40632e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406332:	4638      	mov	r0, r7
  406334:	2301      	movs	r3, #1
  406336:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40633a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40633e:	2e00      	cmp	r6, #0
  406340:	d0e1      	beq.n	406306 <__register_exitproc+0x3e>
  406342:	e7d1      	b.n	4062e8 <__register_exitproc+0x20>
  406344:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406348:	430a      	orrs	r2, r1
  40634a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40634e:	e7da      	b.n	406306 <__register_exitproc+0x3e>
  406350:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406354:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406358:	e7c1      	b.n	4062de <__register_exitproc+0x16>
  40635a:	f04f 30ff 	mov.w	r0, #4294967295
  40635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406362:	bf00      	nop
  406364:	0040773c 	.word	0x0040773c
  406368:	004054cd 	.word	0x004054cd

0040636c <_close_r>:
  40636c:	b538      	push	{r3, r4, r5, lr}
  40636e:	4c07      	ldr	r4, [pc, #28]	; (40638c <_close_r+0x20>)
  406370:	2300      	movs	r3, #0
  406372:	4605      	mov	r5, r0
  406374:	4608      	mov	r0, r1
  406376:	6023      	str	r3, [r4, #0]
  406378:	f7fc ffd2 	bl	403320 <_close>
  40637c:	1c43      	adds	r3, r0, #1
  40637e:	d000      	beq.n	406382 <_close_r+0x16>
  406380:	bd38      	pop	{r3, r4, r5, pc}
  406382:	6823      	ldr	r3, [r4, #0]
  406384:	2b00      	cmp	r3, #0
  406386:	d0fb      	beq.n	406380 <_close_r+0x14>
  406388:	602b      	str	r3, [r5, #0]
  40638a:	bd38      	pop	{r3, r4, r5, pc}
  40638c:	2040099c 	.word	0x2040099c

00406390 <_fclose_r>:
  406390:	2900      	cmp	r1, #0
  406392:	d03d      	beq.n	406410 <_fclose_r+0x80>
  406394:	b570      	push	{r4, r5, r6, lr}
  406396:	4605      	mov	r5, r0
  406398:	460c      	mov	r4, r1
  40639a:	b108      	cbz	r0, 4063a0 <_fclose_r+0x10>
  40639c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40639e:	b37b      	cbz	r3, 406400 <_fclose_r+0x70>
  4063a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063a4:	b90b      	cbnz	r3, 4063aa <_fclose_r+0x1a>
  4063a6:	2000      	movs	r0, #0
  4063a8:	bd70      	pop	{r4, r5, r6, pc}
  4063aa:	4621      	mov	r1, r4
  4063ac:	4628      	mov	r0, r5
  4063ae:	f7fe fb79 	bl	404aa4 <__sflush_r>
  4063b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4063b4:	4606      	mov	r6, r0
  4063b6:	b133      	cbz	r3, 4063c6 <_fclose_r+0x36>
  4063b8:	69e1      	ldr	r1, [r4, #28]
  4063ba:	4628      	mov	r0, r5
  4063bc:	4798      	blx	r3
  4063be:	2800      	cmp	r0, #0
  4063c0:	bfb8      	it	lt
  4063c2:	f04f 36ff 	movlt.w	r6, #4294967295
  4063c6:	89a3      	ldrh	r3, [r4, #12]
  4063c8:	061b      	lsls	r3, r3, #24
  4063ca:	d41c      	bmi.n	406406 <_fclose_r+0x76>
  4063cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4063ce:	b141      	cbz	r1, 4063e2 <_fclose_r+0x52>
  4063d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4063d4:	4299      	cmp	r1, r3
  4063d6:	d002      	beq.n	4063de <_fclose_r+0x4e>
  4063d8:	4628      	mov	r0, r5
  4063da:	f7fe fd65 	bl	404ea8 <_free_r>
  4063de:	2300      	movs	r3, #0
  4063e0:	6323      	str	r3, [r4, #48]	; 0x30
  4063e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4063e4:	b121      	cbz	r1, 4063f0 <_fclose_r+0x60>
  4063e6:	4628      	mov	r0, r5
  4063e8:	f7fe fd5e 	bl	404ea8 <_free_r>
  4063ec:	2300      	movs	r3, #0
  4063ee:	6463      	str	r3, [r4, #68]	; 0x44
  4063f0:	f7fe fc96 	bl	404d20 <__sfp_lock_acquire>
  4063f4:	2300      	movs	r3, #0
  4063f6:	81a3      	strh	r3, [r4, #12]
  4063f8:	f7fe fc94 	bl	404d24 <__sfp_lock_release>
  4063fc:	4630      	mov	r0, r6
  4063fe:	bd70      	pop	{r4, r5, r6, pc}
  406400:	f7fe fc88 	bl	404d14 <__sinit>
  406404:	e7cc      	b.n	4063a0 <_fclose_r+0x10>
  406406:	6921      	ldr	r1, [r4, #16]
  406408:	4628      	mov	r0, r5
  40640a:	f7fe fd4d 	bl	404ea8 <_free_r>
  40640e:	e7dd      	b.n	4063cc <_fclose_r+0x3c>
  406410:	2000      	movs	r0, #0
  406412:	4770      	bx	lr

00406414 <_fstat_r>:
  406414:	b538      	push	{r3, r4, r5, lr}
  406416:	460b      	mov	r3, r1
  406418:	4c07      	ldr	r4, [pc, #28]	; (406438 <_fstat_r+0x24>)
  40641a:	4605      	mov	r5, r0
  40641c:	4611      	mov	r1, r2
  40641e:	4618      	mov	r0, r3
  406420:	2300      	movs	r3, #0
  406422:	6023      	str	r3, [r4, #0]
  406424:	f7fc ff80 	bl	403328 <_fstat>
  406428:	1c43      	adds	r3, r0, #1
  40642a:	d000      	beq.n	40642e <_fstat_r+0x1a>
  40642c:	bd38      	pop	{r3, r4, r5, pc}
  40642e:	6823      	ldr	r3, [r4, #0]
  406430:	2b00      	cmp	r3, #0
  406432:	d0fb      	beq.n	40642c <_fstat_r+0x18>
  406434:	602b      	str	r3, [r5, #0]
  406436:	bd38      	pop	{r3, r4, r5, pc}
  406438:	2040099c 	.word	0x2040099c

0040643c <_isatty_r>:
  40643c:	b538      	push	{r3, r4, r5, lr}
  40643e:	4c07      	ldr	r4, [pc, #28]	; (40645c <_isatty_r+0x20>)
  406440:	2300      	movs	r3, #0
  406442:	4605      	mov	r5, r0
  406444:	4608      	mov	r0, r1
  406446:	6023      	str	r3, [r4, #0]
  406448:	f7fc ff74 	bl	403334 <_isatty>
  40644c:	1c43      	adds	r3, r0, #1
  40644e:	d000      	beq.n	406452 <_isatty_r+0x16>
  406450:	bd38      	pop	{r3, r4, r5, pc}
  406452:	6823      	ldr	r3, [r4, #0]
  406454:	2b00      	cmp	r3, #0
  406456:	d0fb      	beq.n	406450 <_isatty_r+0x14>
  406458:	602b      	str	r3, [r5, #0]
  40645a:	bd38      	pop	{r3, r4, r5, pc}
  40645c:	2040099c 	.word	0x2040099c

00406460 <_lseek_r>:
  406460:	b570      	push	{r4, r5, r6, lr}
  406462:	460d      	mov	r5, r1
  406464:	4c08      	ldr	r4, [pc, #32]	; (406488 <_lseek_r+0x28>)
  406466:	4611      	mov	r1, r2
  406468:	4606      	mov	r6, r0
  40646a:	461a      	mov	r2, r3
  40646c:	4628      	mov	r0, r5
  40646e:	2300      	movs	r3, #0
  406470:	6023      	str	r3, [r4, #0]
  406472:	f7fc ff61 	bl	403338 <_lseek>
  406476:	1c43      	adds	r3, r0, #1
  406478:	d000      	beq.n	40647c <_lseek_r+0x1c>
  40647a:	bd70      	pop	{r4, r5, r6, pc}
  40647c:	6823      	ldr	r3, [r4, #0]
  40647e:	2b00      	cmp	r3, #0
  406480:	d0fb      	beq.n	40647a <_lseek_r+0x1a>
  406482:	6033      	str	r3, [r6, #0]
  406484:	bd70      	pop	{r4, r5, r6, pc}
  406486:	bf00      	nop
  406488:	2040099c 	.word	0x2040099c

0040648c <_read_r>:
  40648c:	b570      	push	{r4, r5, r6, lr}
  40648e:	460d      	mov	r5, r1
  406490:	4c08      	ldr	r4, [pc, #32]	; (4064b4 <_read_r+0x28>)
  406492:	4611      	mov	r1, r2
  406494:	4606      	mov	r6, r0
  406496:	461a      	mov	r2, r3
  406498:	4628      	mov	r0, r5
  40649a:	2300      	movs	r3, #0
  40649c:	6023      	str	r3, [r4, #0]
  40649e:	f7fc f8c9 	bl	402634 <_read>
  4064a2:	1c43      	adds	r3, r0, #1
  4064a4:	d000      	beq.n	4064a8 <_read_r+0x1c>
  4064a6:	bd70      	pop	{r4, r5, r6, pc}
  4064a8:	6823      	ldr	r3, [r4, #0]
  4064aa:	2b00      	cmp	r3, #0
  4064ac:	d0fb      	beq.n	4064a6 <_read_r+0x1a>
  4064ae:	6033      	str	r3, [r6, #0]
  4064b0:	bd70      	pop	{r4, r5, r6, pc}
  4064b2:	bf00      	nop
  4064b4:	2040099c 	.word	0x2040099c

004064b8 <__aeabi_uldivmod>:
  4064b8:	b953      	cbnz	r3, 4064d0 <__aeabi_uldivmod+0x18>
  4064ba:	b94a      	cbnz	r2, 4064d0 <__aeabi_uldivmod+0x18>
  4064bc:	2900      	cmp	r1, #0
  4064be:	bf08      	it	eq
  4064c0:	2800      	cmpeq	r0, #0
  4064c2:	bf1c      	itt	ne
  4064c4:	f04f 31ff 	movne.w	r1, #4294967295
  4064c8:	f04f 30ff 	movne.w	r0, #4294967295
  4064cc:	f000 b97e 	b.w	4067cc <__aeabi_idiv0>
  4064d0:	f1ad 0c08 	sub.w	ip, sp, #8
  4064d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4064d8:	f000 f806 	bl	4064e8 <__udivmoddi4>
  4064dc:	f8dd e004 	ldr.w	lr, [sp, #4]
  4064e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4064e4:	b004      	add	sp, #16
  4064e6:	4770      	bx	lr

004064e8 <__udivmoddi4>:
  4064e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4064ec:	468c      	mov	ip, r1
  4064ee:	460e      	mov	r6, r1
  4064f0:	4604      	mov	r4, r0
  4064f2:	9d08      	ldr	r5, [sp, #32]
  4064f4:	2b00      	cmp	r3, #0
  4064f6:	d150      	bne.n	40659a <__udivmoddi4+0xb2>
  4064f8:	428a      	cmp	r2, r1
  4064fa:	4617      	mov	r7, r2
  4064fc:	d96c      	bls.n	4065d8 <__udivmoddi4+0xf0>
  4064fe:	fab2 fe82 	clz	lr, r2
  406502:	f1be 0f00 	cmp.w	lr, #0
  406506:	d00b      	beq.n	406520 <__udivmoddi4+0x38>
  406508:	f1ce 0420 	rsb	r4, lr, #32
  40650c:	fa20 f404 	lsr.w	r4, r0, r4
  406510:	fa01 f60e 	lsl.w	r6, r1, lr
  406514:	ea44 0c06 	orr.w	ip, r4, r6
  406518:	fa02 f70e 	lsl.w	r7, r2, lr
  40651c:	fa00 f40e 	lsl.w	r4, r0, lr
  406520:	ea4f 4917 	mov.w	r9, r7, lsr #16
  406524:	0c22      	lsrs	r2, r4, #16
  406526:	fbbc f0f9 	udiv	r0, ip, r9
  40652a:	fa1f f887 	uxth.w	r8, r7
  40652e:	fb09 c610 	mls	r6, r9, r0, ip
  406532:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  406536:	fb00 f308 	mul.w	r3, r0, r8
  40653a:	42b3      	cmp	r3, r6
  40653c:	d909      	bls.n	406552 <__udivmoddi4+0x6a>
  40653e:	19f6      	adds	r6, r6, r7
  406540:	f100 32ff 	add.w	r2, r0, #4294967295
  406544:	f080 8122 	bcs.w	40678c <__udivmoddi4+0x2a4>
  406548:	42b3      	cmp	r3, r6
  40654a:	f240 811f 	bls.w	40678c <__udivmoddi4+0x2a4>
  40654e:	3802      	subs	r0, #2
  406550:	443e      	add	r6, r7
  406552:	1af6      	subs	r6, r6, r3
  406554:	b2a2      	uxth	r2, r4
  406556:	fbb6 f3f9 	udiv	r3, r6, r9
  40655a:	fb09 6613 	mls	r6, r9, r3, r6
  40655e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  406562:	fb03 f808 	mul.w	r8, r3, r8
  406566:	45a0      	cmp	r8, r4
  406568:	d909      	bls.n	40657e <__udivmoddi4+0x96>
  40656a:	19e4      	adds	r4, r4, r7
  40656c:	f103 32ff 	add.w	r2, r3, #4294967295
  406570:	f080 810a 	bcs.w	406788 <__udivmoddi4+0x2a0>
  406574:	45a0      	cmp	r8, r4
  406576:	f240 8107 	bls.w	406788 <__udivmoddi4+0x2a0>
  40657a:	3b02      	subs	r3, #2
  40657c:	443c      	add	r4, r7
  40657e:	ebc8 0404 	rsb	r4, r8, r4
  406582:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  406586:	2100      	movs	r1, #0
  406588:	2d00      	cmp	r5, #0
  40658a:	d062      	beq.n	406652 <__udivmoddi4+0x16a>
  40658c:	fa24 f40e 	lsr.w	r4, r4, lr
  406590:	2300      	movs	r3, #0
  406592:	602c      	str	r4, [r5, #0]
  406594:	606b      	str	r3, [r5, #4]
  406596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40659a:	428b      	cmp	r3, r1
  40659c:	d907      	bls.n	4065ae <__udivmoddi4+0xc6>
  40659e:	2d00      	cmp	r5, #0
  4065a0:	d055      	beq.n	40664e <__udivmoddi4+0x166>
  4065a2:	2100      	movs	r1, #0
  4065a4:	e885 0041 	stmia.w	r5, {r0, r6}
  4065a8:	4608      	mov	r0, r1
  4065aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4065ae:	fab3 f183 	clz	r1, r3
  4065b2:	2900      	cmp	r1, #0
  4065b4:	f040 8090 	bne.w	4066d8 <__udivmoddi4+0x1f0>
  4065b8:	42b3      	cmp	r3, r6
  4065ba:	d302      	bcc.n	4065c2 <__udivmoddi4+0xda>
  4065bc:	4282      	cmp	r2, r0
  4065be:	f200 80f8 	bhi.w	4067b2 <__udivmoddi4+0x2ca>
  4065c2:	1a84      	subs	r4, r0, r2
  4065c4:	eb66 0603 	sbc.w	r6, r6, r3
  4065c8:	2001      	movs	r0, #1
  4065ca:	46b4      	mov	ip, r6
  4065cc:	2d00      	cmp	r5, #0
  4065ce:	d040      	beq.n	406652 <__udivmoddi4+0x16a>
  4065d0:	e885 1010 	stmia.w	r5, {r4, ip}
  4065d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4065d8:	b912      	cbnz	r2, 4065e0 <__udivmoddi4+0xf8>
  4065da:	2701      	movs	r7, #1
  4065dc:	fbb7 f7f2 	udiv	r7, r7, r2
  4065e0:	fab7 fe87 	clz	lr, r7
  4065e4:	f1be 0f00 	cmp.w	lr, #0
  4065e8:	d135      	bne.n	406656 <__udivmoddi4+0x16e>
  4065ea:	1bf3      	subs	r3, r6, r7
  4065ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4065f0:	fa1f fc87 	uxth.w	ip, r7
  4065f4:	2101      	movs	r1, #1
  4065f6:	fbb3 f0f8 	udiv	r0, r3, r8
  4065fa:	0c22      	lsrs	r2, r4, #16
  4065fc:	fb08 3610 	mls	r6, r8, r0, r3
  406600:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  406604:	fb0c f300 	mul.w	r3, ip, r0
  406608:	42b3      	cmp	r3, r6
  40660a:	d907      	bls.n	40661c <__udivmoddi4+0x134>
  40660c:	19f6      	adds	r6, r6, r7
  40660e:	f100 32ff 	add.w	r2, r0, #4294967295
  406612:	d202      	bcs.n	40661a <__udivmoddi4+0x132>
  406614:	42b3      	cmp	r3, r6
  406616:	f200 80ce 	bhi.w	4067b6 <__udivmoddi4+0x2ce>
  40661a:	4610      	mov	r0, r2
  40661c:	1af6      	subs	r6, r6, r3
  40661e:	b2a2      	uxth	r2, r4
  406620:	fbb6 f3f8 	udiv	r3, r6, r8
  406624:	fb08 6613 	mls	r6, r8, r3, r6
  406628:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40662c:	fb0c fc03 	mul.w	ip, ip, r3
  406630:	45a4      	cmp	ip, r4
  406632:	d907      	bls.n	406644 <__udivmoddi4+0x15c>
  406634:	19e4      	adds	r4, r4, r7
  406636:	f103 32ff 	add.w	r2, r3, #4294967295
  40663a:	d202      	bcs.n	406642 <__udivmoddi4+0x15a>
  40663c:	45a4      	cmp	ip, r4
  40663e:	f200 80b5 	bhi.w	4067ac <__udivmoddi4+0x2c4>
  406642:	4613      	mov	r3, r2
  406644:	ebcc 0404 	rsb	r4, ip, r4
  406648:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40664c:	e79c      	b.n	406588 <__udivmoddi4+0xa0>
  40664e:	4629      	mov	r1, r5
  406650:	4628      	mov	r0, r5
  406652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406656:	f1ce 0120 	rsb	r1, lr, #32
  40665a:	fa06 f30e 	lsl.w	r3, r6, lr
  40665e:	fa07 f70e 	lsl.w	r7, r7, lr
  406662:	fa20 f901 	lsr.w	r9, r0, r1
  406666:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40666a:	40ce      	lsrs	r6, r1
  40666c:	ea49 0903 	orr.w	r9, r9, r3
  406670:	fbb6 faf8 	udiv	sl, r6, r8
  406674:	ea4f 4419 	mov.w	r4, r9, lsr #16
  406678:	fb08 661a 	mls	r6, r8, sl, r6
  40667c:	fa1f fc87 	uxth.w	ip, r7
  406680:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  406684:	fb0a f20c 	mul.w	r2, sl, ip
  406688:	429a      	cmp	r2, r3
  40668a:	fa00 f40e 	lsl.w	r4, r0, lr
  40668e:	d90a      	bls.n	4066a6 <__udivmoddi4+0x1be>
  406690:	19db      	adds	r3, r3, r7
  406692:	f10a 31ff 	add.w	r1, sl, #4294967295
  406696:	f080 8087 	bcs.w	4067a8 <__udivmoddi4+0x2c0>
  40669a:	429a      	cmp	r2, r3
  40669c:	f240 8084 	bls.w	4067a8 <__udivmoddi4+0x2c0>
  4066a0:	f1aa 0a02 	sub.w	sl, sl, #2
  4066a4:	443b      	add	r3, r7
  4066a6:	1a9b      	subs	r3, r3, r2
  4066a8:	fa1f f989 	uxth.w	r9, r9
  4066ac:	fbb3 f1f8 	udiv	r1, r3, r8
  4066b0:	fb08 3311 	mls	r3, r8, r1, r3
  4066b4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  4066b8:	fb01 f60c 	mul.w	r6, r1, ip
  4066bc:	429e      	cmp	r6, r3
  4066be:	d907      	bls.n	4066d0 <__udivmoddi4+0x1e8>
  4066c0:	19db      	adds	r3, r3, r7
  4066c2:	f101 32ff 	add.w	r2, r1, #4294967295
  4066c6:	d26b      	bcs.n	4067a0 <__udivmoddi4+0x2b8>
  4066c8:	429e      	cmp	r6, r3
  4066ca:	d969      	bls.n	4067a0 <__udivmoddi4+0x2b8>
  4066cc:	3902      	subs	r1, #2
  4066ce:	443b      	add	r3, r7
  4066d0:	1b9b      	subs	r3, r3, r6
  4066d2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  4066d6:	e78e      	b.n	4065f6 <__udivmoddi4+0x10e>
  4066d8:	f1c1 0e20 	rsb	lr, r1, #32
  4066dc:	fa22 f40e 	lsr.w	r4, r2, lr
  4066e0:	408b      	lsls	r3, r1
  4066e2:	4323      	orrs	r3, r4
  4066e4:	fa20 f70e 	lsr.w	r7, r0, lr
  4066e8:	fa06 f401 	lsl.w	r4, r6, r1
  4066ec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4066f0:	fa26 f60e 	lsr.w	r6, r6, lr
  4066f4:	433c      	orrs	r4, r7
  4066f6:	fbb6 f9fc 	udiv	r9, r6, ip
  4066fa:	0c27      	lsrs	r7, r4, #16
  4066fc:	fb0c 6619 	mls	r6, ip, r9, r6
  406700:	fa1f f883 	uxth.w	r8, r3
  406704:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  406708:	fb09 f708 	mul.w	r7, r9, r8
  40670c:	42b7      	cmp	r7, r6
  40670e:	fa02 f201 	lsl.w	r2, r2, r1
  406712:	fa00 fa01 	lsl.w	sl, r0, r1
  406716:	d908      	bls.n	40672a <__udivmoddi4+0x242>
  406718:	18f6      	adds	r6, r6, r3
  40671a:	f109 30ff 	add.w	r0, r9, #4294967295
  40671e:	d241      	bcs.n	4067a4 <__udivmoddi4+0x2bc>
  406720:	42b7      	cmp	r7, r6
  406722:	d93f      	bls.n	4067a4 <__udivmoddi4+0x2bc>
  406724:	f1a9 0902 	sub.w	r9, r9, #2
  406728:	441e      	add	r6, r3
  40672a:	1bf6      	subs	r6, r6, r7
  40672c:	b2a0      	uxth	r0, r4
  40672e:	fbb6 f4fc 	udiv	r4, r6, ip
  406732:	fb0c 6614 	mls	r6, ip, r4, r6
  406736:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40673a:	fb04 f808 	mul.w	r8, r4, r8
  40673e:	45b8      	cmp	r8, r7
  406740:	d907      	bls.n	406752 <__udivmoddi4+0x26a>
  406742:	18ff      	adds	r7, r7, r3
  406744:	f104 30ff 	add.w	r0, r4, #4294967295
  406748:	d228      	bcs.n	40679c <__udivmoddi4+0x2b4>
  40674a:	45b8      	cmp	r8, r7
  40674c:	d926      	bls.n	40679c <__udivmoddi4+0x2b4>
  40674e:	3c02      	subs	r4, #2
  406750:	441f      	add	r7, r3
  406752:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  406756:	ebc8 0707 	rsb	r7, r8, r7
  40675a:	fba0 8902 	umull	r8, r9, r0, r2
  40675e:	454f      	cmp	r7, r9
  406760:	4644      	mov	r4, r8
  406762:	464e      	mov	r6, r9
  406764:	d314      	bcc.n	406790 <__udivmoddi4+0x2a8>
  406766:	d029      	beq.n	4067bc <__udivmoddi4+0x2d4>
  406768:	b365      	cbz	r5, 4067c4 <__udivmoddi4+0x2dc>
  40676a:	ebba 0304 	subs.w	r3, sl, r4
  40676e:	eb67 0706 	sbc.w	r7, r7, r6
  406772:	fa07 fe0e 	lsl.w	lr, r7, lr
  406776:	40cb      	lsrs	r3, r1
  406778:	40cf      	lsrs	r7, r1
  40677a:	ea4e 0303 	orr.w	r3, lr, r3
  40677e:	e885 0088 	stmia.w	r5, {r3, r7}
  406782:	2100      	movs	r1, #0
  406784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406788:	4613      	mov	r3, r2
  40678a:	e6f8      	b.n	40657e <__udivmoddi4+0x96>
  40678c:	4610      	mov	r0, r2
  40678e:	e6e0      	b.n	406552 <__udivmoddi4+0x6a>
  406790:	ebb8 0402 	subs.w	r4, r8, r2
  406794:	eb69 0603 	sbc.w	r6, r9, r3
  406798:	3801      	subs	r0, #1
  40679a:	e7e5      	b.n	406768 <__udivmoddi4+0x280>
  40679c:	4604      	mov	r4, r0
  40679e:	e7d8      	b.n	406752 <__udivmoddi4+0x26a>
  4067a0:	4611      	mov	r1, r2
  4067a2:	e795      	b.n	4066d0 <__udivmoddi4+0x1e8>
  4067a4:	4681      	mov	r9, r0
  4067a6:	e7c0      	b.n	40672a <__udivmoddi4+0x242>
  4067a8:	468a      	mov	sl, r1
  4067aa:	e77c      	b.n	4066a6 <__udivmoddi4+0x1be>
  4067ac:	3b02      	subs	r3, #2
  4067ae:	443c      	add	r4, r7
  4067b0:	e748      	b.n	406644 <__udivmoddi4+0x15c>
  4067b2:	4608      	mov	r0, r1
  4067b4:	e70a      	b.n	4065cc <__udivmoddi4+0xe4>
  4067b6:	3802      	subs	r0, #2
  4067b8:	443e      	add	r6, r7
  4067ba:	e72f      	b.n	40661c <__udivmoddi4+0x134>
  4067bc:	45c2      	cmp	sl, r8
  4067be:	d3e7      	bcc.n	406790 <__udivmoddi4+0x2a8>
  4067c0:	463e      	mov	r6, r7
  4067c2:	e7d1      	b.n	406768 <__udivmoddi4+0x280>
  4067c4:	4629      	mov	r1, r5
  4067c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067ca:	bf00      	nop

004067cc <__aeabi_idiv0>:
  4067cc:	4770      	bx	lr
  4067ce:	bf00      	nop
  4067d0:	50504128 	.word	0x50504128
  4067d4:	52452829 	.word	0x52452829
  4067d8:	255b2952 	.word	0x255b2952
  4067dc:	255b5d73 	.word	0x255b5d73
  4067e0:	00005d64 	.word	0x00005d64
  4067e4:	61766e49 	.word	0x61766e49
  4067e8:	2064696c 	.word	0x2064696c
  4067ec:	54434f49 	.word	0x54434f49
  4067f0:	6f63204c 	.word	0x6f63204c
  4067f4:	6e616d6d 	.word	0x6e616d6d
  4067f8:	000a2164 	.word	0x000a2164
  4067fc:	0000000d 	.word	0x0000000d

00406800 <__FUNCTION__.9672>:
  406800:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....

00406810 <__FUNCTION__.8784>:
  406810:	5f666968 00727369                       hif_isr.

00406818 <__FUNCTION__.8805>:
  406818:	5f666968 65636572 00657669 46494828     hif_receive.(HIF
  406828:	69614629 6f74206c 6b617720 74207075     )Fail to wakup t
  406838:	63206568 0a706968 00000000 66696828     he chip.....(hif
  406848:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
  406858:	4c525443 6220315f 66207375 0a6c6961     CTRL_1 bus fail.
  406868:	00000000 66696828 64612029 73657264     ....(hif) addres
  406878:	75622073 61662073 000a6c69 66696828     s bus fail..(hif
  406888:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
  406898:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
  4068a8:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
  4068b8:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
  4068c8:	6e692029 696c6176 72672064 2070756f     ) invalid group 
  4068d8:	000a4449 66696828 6f682029 61207473     ID..(hif) host a
  4068e8:	64207070 276e6469 65732074 58522074     pp didn't set RX
  4068f8:	6e6f4420 00000a65 66696828 72572029      Done...(hif) Wr
  406908:	20676e6f 657a6953 0000000a 66696828     ong Size....(hif
  406918:	61462029 2065736c 65746e69 70757272     ) False interrup
  406928:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
  406938:	74206c69 6552206f 69206461 7265746e     il to Read inter
  406948:	74707572 67657220 0000000a 66696828     rupt reg....(hif
  406958:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
  406968:	65687420 69686320 00000a70 46494828      the chip...(HIF
  406978:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
  406988:	746e6920 75727265 25207470 72742064      interrupt %d tr
  406998:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
  4069a8:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
  4069b8:	72612064 656d7567 000a746e 20505041     d argument..APP 
  4069c8:	75716552 65747365 69532064 6920657a     Requested Size i
  4069d8:	616c2073 72656772 61687420 6874206e     s larger than th
  4069e8:	65722065 65766963 75622064 72656666     e recived buffer
  4069f8:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
  406a08:	20505041 75716552 65747365 64412064     APP Requested Ad
  406a18:	73657264 65622073 646e6f79 65687420     dress beyond the
  406a28:	63657220 64657669 66756220 20726566      recived buffer 
  406a38:	72646461 20737365 20646e61 676e656c     address and leng
  406a48:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....

00406a58 <__FUNCTION__.8820>:
  406a58:	5f666968 69676572 72657473 0062635f     hif_register_cb.

00406a68 <__FUNCTION__.8774>:
  406a68:	5f666968 646e6573 00000000              hif_send....

00406a74 <__FUNCTION__.8790>:
  406a74:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00406a84 <__FUNCTION__.8799>:
  406a84:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  406a94:	0063735f                                _sc.

00406a98 <__FUNCTION__.8747>:
  406a98:	5f6d326d 69666977 0062635f 50504128     m2m_wifi_cb.(APP
  406aa8:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
  406ab8:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
  406ac8:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
  406ad8:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
  406ae8:	2044494c 4e494f50 0a524554 00000000     LID POINTER.....
  406af8:	41564e49 2044494c 44495353 0000000a     INVALID SSID....
  406b08:	41564e49 2044494c 000a4843 41564e49     INVALID CH..INVA
  406b18:	2044494c 50434844 52455320 20524556     LID DHCP SERVER 
  406b28:	000a5049 41564e49 2044494c 2059454b     IP..INVALID KEY 
  406b38:	45444e49 00000a58 41564e49 2044494c     INDEX...INVALID 
  406b48:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
  406b58:	2044494c 20504557 0a59454b 00000000     LID WEP KEY.....
  406b68:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
  406b78:	49544143 4d204e4f 0a45444f 00000000     CATION MODE.....
  406b88:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  406b98:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  406ba8:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  406bb8:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  406bc8:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  406bd8:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  406be8:	7277616d 65562065 6f697372 00000a6e     mawre Version...
  406bf8:	2079654b 6e207369 7620746f 64696c61     Key is not valid
  406c08:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
  406c18:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
  406c28:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
  406c38:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
  406c48:	2079656b 65646e69 64252078 0000000a     key index %d....
  406c58:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
  406c68:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
  406c78:	63657272 53502074 656b204b 656c2079     rrect PSK key le
  406c88:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
  406c98:	65732064 79742063 000a6570 41564e49     d sec type..INVA
  406ca8:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
  406cb8:	73746f6c 00000a21 41564e49 2044494c     lots!...INVALID 
  406cc8:	6e616373 6f6c7320 69742074 0a21656d     scan slot time!.
  406cd8:	00000000 41564e49 2044494c 6f206f4e     ....INVALID No o
  406ce8:	72702066 2065626f 75716572 73747365     f probe requests
  406cf8:	72657020 61637320 6c73206e 000a746f      per scan slot..
  406d08:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
  406d18:	6f687365 2520646c 000a2064 5f53505f     eshold %d .._PS_
  406d28:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
  406d38:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
  406d48:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
  406d58:	6220796c 2c312065 6f203620 31312072     ly be 1, 6 or 11
  406d68:	0000000a 45574f50 41532052 25204556     ....POWER SAVE %
  406d78:	00000a64 41564e49 2044494c 414d4f44     d...INVALID DOMA
  406d88:	4e204e49 0a454d41 00000000 474e5250     IN NAME.....PRNG
  406d98:	66754220 20726566 65637865 64656465      Buffer exceeded
  406da8:	78616d20 6d756d69 7a697320 64252065      maximum size %d
  406db8:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
  406dc8:	00000000                                ....

00406dcc <__FUNCTION__.8771>:
  406dcc:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00406ddc <__FUNCTION__.8678>:
  406ddc:	70696863 6965645f 0074696e              chip_deinit.

00406de8 <__FUNCTION__.8584>:
  406de8:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
  406df8:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  406e08:	20656b61 66207075 656c6961 00000a64     ake up failed...
  406e18:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  406e28:	20656b61 66207075 656c6961 00000a64     ake up failed...
  406e38:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  406e48:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  406e58:	0000000a 696d6e5b 61747320 3a5d7472     ....[nmi start]:
  406e68:	69616620 6572206c 72206461 30206765      fail read reg 0
  406e78:	31313178 2e2e2038 00000a2e 3a676572     x1118 ......reg:
  406e88:	2f207825 20782520 0000000a 6c696166     %x / %x ....fail
  406e98:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  406ea8:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  406eb8:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  406ec8:	00000000 6f727245 68772072 20656c69     ....Error while 
  406ed8:	64616572 20676e69 0a676572 00000000     reading reg.....
  406ee8:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  406ef8:	656c6961 6f742064 61657220 00000a64     ailed to read...
  406f08:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  406f18:	656c6961 6f742064 69727720 000a6574     ailed to write..
  406f28:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  406f38:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  406f48:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
  406f58:	74206465 6e65206f 656c6261 746e6920     ed to enable int
  406f68:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
  406f78:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
  406f88:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
  406f98:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
  406fa8:	69642068 6c626173 61662065 000a6c69     h disable fail..
  406fb8:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
  406fc8:	696e6920 75622074 00000a73               init bus...

00406fd4 <__FUNCTION__.8665>:
  406fd4:	645f6d6e 695f7672 0074696e              nm_drv_init.

00406fe0 <__FUNCTION__.8672>:
  406fe0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00406ff0 <__FUNCTION__.8073>:
  406ff0:	5f697073 61746164 6165725f 00000064     spi_data_read...

00407000 <crc7_syndrome_table>:
  407000:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  407010:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  407020:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  407030:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  407040:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  407050:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  407060:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  407070:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  407080:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  407090:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  4070a0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  4070b0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  4070c0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  4070d0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  4070e0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  4070f0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

00407100 <__FUNCTION__.8140>:
  407100:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040710c <__FUNCTION__.8088>:
  40710c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040711c <__FUNCTION__.8123>:
  40711c:	735f6d6e 725f6970 00646165 696d6e5b     nm_spi_read.[nmi
  40712c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40713c:	65722064 6e6f7073 72206573 2c646165     d response read,
  40714c:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40715c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40716c:	61642064 72206174 6f707365 2065736e     d data response 
  40717c:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40718c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40719c:	656c6961 61642064 72206174 6f707365     ailed data respo
  4071ac:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  4071bc:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  4071cc:	656c6961 61642064 62206174 6b636f6c     ailed data block
  4071dc:	61657220 62202c64 65207375 726f7272      read, bus error
  4071ec:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  4071fc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40720c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40721c:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40722c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40723c:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40724c:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40725c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40726c:	77202c64 65746972 67657220 30252820     d, write reg (%0
  40727c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40728c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
  40729c:	6e6f7073 202c6573 74697277 65722065     sponse, write re
  4072ac:	25282067 29783830 0a2e2e2e 00000000     g (%08x)........
  4072bc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4072cc:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  4072dc:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  4072ec:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4072fc:	65722064 6e6f7073 202c6573 64616572     d response, read
  40730c:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40731c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40732c:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40733c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40734c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40735c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40736c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40737c:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40738c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40739c:	6e692064 6e726574 72206c61 20646165     d internal read 
  4073ac:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  4073bc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4073cc:	6e692064 6e726574 77206c61 65746972     d internal write
  4073dc:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  4073ec:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  4073fc:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40740c:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40741c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40742c:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40743c:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40744c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40745c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40746c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40747c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40748c:	656c6961 6c622064 206b636f 61746164     ailed block data
  40749c:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  4074ac:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4074bc:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  4074cc:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  4074dc:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  4074ec:	7220646d 6f707365 2c65736e 69727720     md response, wri
  4074fc:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40750c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40751c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40752c:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40753c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40754c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40755c:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40756c:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40757c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40758c:	61642064 62206174 6b636f6c 63726320     d data block crc
  40759c:	69727720 202c6574 20737562 6f727265      write, bus erro
  4075ac:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  4075bc:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  4075cc:	61746164 69727720 2e2e6574 00000a2e     data write......

004075dc <__FUNCTION__.8098>:
  4075dc:	5f697073 74697277 65725f65 00000067     spi_write_reg...

004075ec <__FUNCTION__.8049>:
  4075ec:	5f697073 00646d63                       spi_cmd.

004075f4 <__FUNCTION__.8106>:
  4075f4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00407604 <__FUNCTION__.8057>:
  407604:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00407610 <__FUNCTION__.8115>:
  407610:	5f697073 64616572 6765725f 00000000     spi_read_reg....
  407620:	5d64255b 49535320 73253a44 00000a0d     [%d] SSID:%s....
  407630:	6972614d 64614761 00000075 6e756f46     MariaGadu...Foun
  407640:	73252064 000a0d20 706d6f63 63617475     d %s ...computac
  407650:	00006f61 206e6163 20746f6e 646e6966     ao..can not find
  407660:	20504120 0a0d7325 00000000 462d6957      AP %s......Wi-F
  407670:	69642069 6e6f6373 7463656e 0a0d6465     i disconnected..
  407680:	00000000 462d6957 6f632069 63656e6e     ....Wi-Fi connec
  407690:	0d646574 0000000a 462d6957 50492069     ted.....Wi-Fi IP
  4076a0:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
  4076b0:	0000000a 57202d2d 31434e49 20303035     ....-- WINC1500 
  4076c0:	73205041 206e6163 6d617865 20656c70     AP scan example 
  4076d0:	0a0d2d2d 53202d2d 37454d41 50582d30     --..-- SAME70-XP
  4076e0:	2d20444c 2d0a0d2d 6f43202d 6c69706d     LD --..-- Compil
  4076f0:	203a6465 2074634f 32203033 20373130     ed: Oct 30 2017 
  407700:	323a3631 31353a36 0d2d2d20 0000000a     16:26:51 --.....
  407710:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
  407720:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
  407730:	0d296425 0000000a 00000043              %d).....C...

0040773c <_global_impure_ptr>:
  40773c:	20400020                                 .@ 

00407740 <zeroes.6993>:
  407740:	30303030 30303030 30303030 30303030     0000000000000000
  407750:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407760:	00000000 33323130 37363534 62613938     ....0123456789ab
  407770:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00407780 <blanks.6992>:
  407780:	20202020 20202020 20202020 20202020                     

00407790 <_init>:
  407790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407792:	bf00      	nop
  407794:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407796:	bc08      	pop	{r3}
  407798:	469e      	mov	lr, r3
  40779a:	4770      	bx	lr

0040779c <__init_array_start>:
  40779c:	00404a85 	.word	0x00404a85

004077a0 <__frame_dummy_init_array_entry>:
  4077a0:	00400165                                e.@.

004077a4 <_fini>:
  4077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4077a6:	bf00      	nop
  4077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4077aa:	bc08      	pop	{r3}
  4077ac:	469e      	mov	lr, r3
  4077ae:	4770      	bx	lr

004077b0 <__fini_array_start>:
  4077b0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d 0000 0000                         ..=.....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	7738 0040 0000 0000 0000 0000 0000 0000     8w@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <lc_ctype_charset>:
2040044c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2040046c <__mb_cur_max>:
2040046c:	0001 0000                                   ....

20400470 <__malloc_av_>:
	...
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 

20400878 <__malloc_trim_threshold>:
20400878:	0000 0002                                   ....

2040087c <__malloc_sbrk_base>:
2040087c:	ffff ffff                                   ....

20400880 <__wctomb>:
20400880:	6281 0040                                   .b@.
