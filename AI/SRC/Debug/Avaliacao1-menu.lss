
Avaliacao1-menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b00  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00401b00  00401b00  00011b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000440  20400000  00401b08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000098  20400440  00401f48  00020440  2**2
                  ALLOC
  4 .stack        00002000  204004d8  00401fe0  00020440  2**0
                  ALLOC
  5 .heap         00000200  204024d8  00403fe0  00020440  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002046e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00008c61  00000000  00000000  000204c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000129f  00000000  00000000  00029128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005dcc  00000000  00000000  0002a3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009e0  00000000  00000000  00030193  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  00030b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c985  00000000  00000000  000314a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000883a  00000000  00000000  0004de28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00089a07  00000000  00000000  00056662  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002c0c  00000000  00000000  000e006c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204024d8 	.word	0x204024d8
  400004:	00400e75 	.word	0x00400e75
  400008:	00400f25 	.word	0x00400f25
  40000c:	00400f25 	.word	0x00400f25
  400010:	00400f25 	.word	0x00400f25
  400014:	00400f25 	.word	0x00400f25
  400018:	00400f25 	.word	0x00400f25
	...
  40002c:	00400f25 	.word	0x00400f25
  400030:	00400f25 	.word	0x00400f25
  400034:	00000000 	.word	0x00000000
  400038:	00400f25 	.word	0x00400f25
  40003c:	00400f25 	.word	0x00400f25
  400040:	00400f25 	.word	0x00400f25
  400044:	00400f25 	.word	0x00400f25
  400048:	00400f25 	.word	0x00400f25
  40004c:	00400f25 	.word	0x00400f25
  400050:	00400f25 	.word	0x00400f25
  400054:	00400f25 	.word	0x00400f25
  400058:	00400f25 	.word	0x00400f25
  40005c:	00400f25 	.word	0x00400f25
  400060:	00400f25 	.word	0x00400f25
  400064:	00000000 	.word	0x00000000
  400068:	0040070d 	.word	0x0040070d
  40006c:	00400725 	.word	0x00400725
  400070:	0040073d 	.word	0x0040073d
  400074:	00400f25 	.word	0x00400f25
  400078:	00400f25 	.word	0x00400f25
  40007c:	00400f25 	.word	0x00400f25
  400080:	00400755 	.word	0x00400755
  400084:	0040076d 	.word	0x0040076d
  400088:	00400f25 	.word	0x00400f25
  40008c:	00400f25 	.word	0x00400f25
  400090:	00400f25 	.word	0x00400f25
  400094:	00400f25 	.word	0x00400f25
  400098:	00400f25 	.word	0x00400f25
  40009c:	00400f25 	.word	0x00400f25
  4000a0:	00400f25 	.word	0x00400f25
  4000a4:	00400f25 	.word	0x00400f25
  4000a8:	00400f25 	.word	0x00400f25
  4000ac:	00400f25 	.word	0x00400f25
  4000b0:	00400f25 	.word	0x00400f25
  4000b4:	00400f25 	.word	0x00400f25
  4000b8:	00400f25 	.word	0x00400f25
  4000bc:	00400f25 	.word	0x00400f25
  4000c0:	00400f25 	.word	0x00400f25
  4000c4:	00400f25 	.word	0x00400f25
  4000c8:	00400f25 	.word	0x00400f25
  4000cc:	00400f25 	.word	0x00400f25
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400f25 	.word	0x00400f25
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00400f25 	.word	0x00400f25
  4000e0:	00400f25 	.word	0x00400f25
  4000e4:	00400f25 	.word	0x00400f25
  4000e8:	00400f25 	.word	0x00400f25
  4000ec:	00400f25 	.word	0x00400f25
  4000f0:	00400f25 	.word	0x00400f25
  4000f4:	00400f25 	.word	0x00400f25
  4000f8:	00400f25 	.word	0x00400f25
  4000fc:	00400f25 	.word	0x00400f25
  400100:	00400f25 	.word	0x00400f25
  400104:	00400f25 	.word	0x00400f25
  400108:	00400f25 	.word	0x00400f25
  40010c:	00400f25 	.word	0x00400f25
  400110:	00400f25 	.word	0x00400f25
	...
  400120:	00400f25 	.word	0x00400f25
  400124:	00400f25 	.word	0x00400f25
  400128:	00400f25 	.word	0x00400f25
  40012c:	00400f25 	.word	0x00400f25
  400130:	00400f25 	.word	0x00400f25
  400134:	00000000 	.word	0x00000000
  400138:	00400f25 	.word	0x00400f25
  40013c:	00400f25 	.word	0x00400f25

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400440 	.word	0x20400440
  40015c:	00000000 	.word	0x00000000
  400160:	00401b08 	.word	0x00401b08

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400444 	.word	0x20400444
  400190:	00401b08 	.word	0x00401b08
  400194:	00401b08 	.word	0x00401b08
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	00400885 	.word	0x00400885
  40021c:	004008f1 	.word	0x004008f1
  400220:	00400961 	.word	0x00400961

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	004008bd 	.word	0x004008bd
  400290:	004009d9 	.word	0x004009d9

00400294 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2b07      	cmp	r3, #7
  4002a0:	d825      	bhi.n	4002ee <osc_get_rate+0x5a>
  4002a2:	a201      	add	r2, pc, #4	; (adr r2, 4002a8 <osc_get_rate+0x14>)
  4002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a8:	004002c9 	.word	0x004002c9
  4002ac:	004002cf 	.word	0x004002cf
  4002b0:	004002d5 	.word	0x004002d5
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
  4002c4:	004002eb 	.word	0x004002eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002cc:	e010      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d2:	e00d      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d8:	e00a      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x68>)
  4002dc:	e008      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x6c>)
  4002e0:	e006      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x70>)
  4002e4:	e004      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e6:	4b07      	ldr	r3, [pc, #28]	; (400304 <osc_get_rate+0x70>)
  4002e8:	e002      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002ea:	4b06      	ldr	r3, [pc, #24]	; (400304 <osc_get_rate+0x70>)
  4002ec:	e000      	b.n	4002f0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ee:	2300      	movs	r3, #0
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	370c      	adds	r7, #12
  4002f4:	46bd      	mov	sp, r7
  4002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fa:	4770      	bx	lr
  4002fc:	003d0900 	.word	0x003d0900
  400300:	007a1200 	.word	0x007a1200
  400304:	00b71b00 	.word	0x00b71b00

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	bf00      	nop
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	00400225 	.word	0x00400225

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <pll_config_init+0x64>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <pll_config_init+0x68>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	bf00      	nop
  400390:	3718      	adds	r7, #24
  400392:	46bd      	mov	sp, r7
  400394:	bd80      	pop	{r7, pc}
  400396:	bf00      	nop
  400398:	00400295 	.word	0x00400295
  40039c:	07ff0000 	.word	0x07ff0000

004003a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003a0:	b580      	push	{r7, lr}
  4003a2:	b082      	sub	sp, #8
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
  4003a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003aa:	683b      	ldr	r3, [r7, #0]
  4003ac:	2b00      	cmp	r3, #0
  4003ae:	d108      	bne.n	4003c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <pll_enable+0x38>)
  4003b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b4:	4a09      	ldr	r2, [pc, #36]	; (4003dc <pll_enable+0x3c>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003c0:	e005      	b.n	4003ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003c2:	4a06      	ldr	r2, [pc, #24]	; (4003dc <pll_enable+0x3c>)
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003cc:	61d3      	str	r3, [r2, #28]
	}
}
  4003ce:	bf00      	nop
  4003d0:	3708      	adds	r7, #8
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bd80      	pop	{r7, pc}
  4003d6:	bf00      	nop
  4003d8:	004009f5 	.word	0x004009f5
  4003dc:	400e0600 	.word	0x400e0600

004003e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d103      	bne.n	4003f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <pll_is_locked+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
  4003f4:	e002      	b.n	4003fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pll_is_locked+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	4603      	mov	r3, r0
	}
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	3708      	adds	r7, #8
  400400:	46bd      	mov	sp, r7
  400402:	bd80      	pop	{r7, pc}
  400404:	00400a11 	.word	0x00400a11
  400408:	00400a2d 	.word	0x00400a2d

0040040c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	4603      	mov	r3, r0
  400414:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	3b03      	subs	r3, #3
  40041a:	2b04      	cmp	r3, #4
  40041c:	d808      	bhi.n	400430 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		osc_wait_ready(e_src);
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	4618      	mov	r0, r3
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <pll_enable_source+0x34>)
  40042c:	4798      	blx	r3
		break;
  40042e:	e000      	b.n	400432 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400430:	bf00      	nop
	}
}
  400432:	bf00      	nop
  400434:	3708      	adds	r7, #8
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	0040019d 	.word	0x0040019d
  400440:	00400309 	.word	0x00400309

00400444 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40044c:	bf00      	nop
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b04      	ldr	r3, [pc, #16]	; (400464 <pll_wait_for_lock+0x20>)
  400452:	4798      	blx	r3
  400454:	4603      	mov	r3, r0
  400456:	2b00      	cmp	r3, #0
  400458:	d0f9      	beq.n	40044e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	3708      	adds	r7, #8
  400460:	46bd      	mov	sp, r7
  400462:	bd80      	pop	{r7, pc}
  400464:	004003e1 	.word	0x004003e1

00400468 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40046c:	2006      	movs	r0, #6
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <sysclk_get_main_hz+0x1c>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	4613      	mov	r3, r2
  400476:	009b      	lsls	r3, r3, #2
  400478:	4413      	add	r3, r2
  40047a:	009a      	lsls	r2, r3, #2
  40047c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40047e:	4618      	mov	r0, r3
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	00400295 	.word	0x00400295

00400488 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400488:	b580      	push	{r7, lr}
  40048a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <sysclk_get_cpu_hz+0x10>)
  40048e:	4798      	blx	r3
  400490:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400492:	4618      	mov	r0, r3
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	00400469 	.word	0x00400469

0040049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40049c:	b590      	push	{r4, r7, lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004a2:	4813      	ldr	r0, [pc, #76]	; (4004f0 <sysclk_init+0x54>)
  4004a4:	4b13      	ldr	r3, [pc, #76]	; (4004f4 <sysclk_init+0x58>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004a8:	2006      	movs	r0, #6
  4004aa:	4b13      	ldr	r3, [pc, #76]	; (4004f8 <sysclk_init+0x5c>)
  4004ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004ae:	1d38      	adds	r0, r7, #4
  4004b0:	2319      	movs	r3, #25
  4004b2:	2201      	movs	r2, #1
  4004b4:	2106      	movs	r1, #6
  4004b6:	4c11      	ldr	r4, [pc, #68]	; (4004fc <sysclk_init+0x60>)
  4004b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ba:	1d3b      	adds	r3, r7, #4
  4004bc:	2100      	movs	r1, #0
  4004be:	4618      	mov	r0, r3
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <sysclk_init+0x64>)
  4004c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004c4:	2000      	movs	r0, #0
  4004c6:	4b0f      	ldr	r3, [pc, #60]	; (400504 <sysclk_init+0x68>)
  4004c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ca:	2002      	movs	r0, #2
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x6c>)
  4004ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004d0:	2000      	movs	r0, #0
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <sysclk_init+0x70>)
  4004d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <sysclk_init+0x74>)
  4004d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004da:	4b0e      	ldr	r3, [pc, #56]	; (400514 <sysclk_init+0x78>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	4618      	mov	r0, r3
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <sysclk_init+0x58>)
  4004e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004e6:	bf00      	nop
  4004e8:	370c      	adds	r7, #12
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bd90      	pop	{r4, r7, pc}
  4004ee:	bf00      	nop
  4004f0:	11e1a300 	.word	0x11e1a300
  4004f4:	00401099 	.word	0x00401099
  4004f8:	0040040d 	.word	0x0040040d
  4004fc:	00400335 	.word	0x00400335
  400500:	004003a1 	.word	0x004003a1
  400504:	00400445 	.word	0x00400445
  400508:	00400785 	.word	0x00400785
  40050c:	00400801 	.word	0x00400801
  400510:	00400f2d 	.word	0x00400f2d
  400514:	00400489 	.word	0x00400489

00400518 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400518:	b480      	push	{r7}
  40051a:	b087      	sub	sp, #28
  40051c:	af00      	add	r7, sp, #0
  40051e:	60f8      	str	r0, [r7, #12]
  400520:	60b9      	str	r1, [r7, #8]
  400522:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400524:	68fb      	ldr	r3, [r7, #12]
  400526:	687a      	ldr	r2, [r7, #4]
  400528:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40052a:	68bb      	ldr	r3, [r7, #8]
  40052c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400530:	d04a      	beq.n	4005c8 <pio_set_peripheral+0xb0>
  400532:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400536:	d808      	bhi.n	40054a <pio_set_peripheral+0x32>
  400538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40053c:	d016      	beq.n	40056c <pio_set_peripheral+0x54>
  40053e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400542:	d02c      	beq.n	40059e <pio_set_peripheral+0x86>
  400544:	2b00      	cmp	r3, #0
  400546:	d069      	beq.n	40061c <pio_set_peripheral+0x104>
  400548:	e064      	b.n	400614 <pio_set_peripheral+0xfc>
  40054a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40054e:	d065      	beq.n	40061c <pio_set_peripheral+0x104>
  400550:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400554:	d803      	bhi.n	40055e <pio_set_peripheral+0x46>
  400556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40055a:	d04a      	beq.n	4005f2 <pio_set_peripheral+0xda>
  40055c:	e05a      	b.n	400614 <pio_set_peripheral+0xfc>
  40055e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400562:	d05b      	beq.n	40061c <pio_set_peripheral+0x104>
  400564:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400568:	d058      	beq.n	40061c <pio_set_peripheral+0x104>
  40056a:	e053      	b.n	400614 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40056c:	68fb      	ldr	r3, [r7, #12]
  40056e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400570:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400572:	68fb      	ldr	r3, [r7, #12]
  400574:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400576:	687b      	ldr	r3, [r7, #4]
  400578:	43d9      	mvns	r1, r3
  40057a:	697b      	ldr	r3, [r7, #20]
  40057c:	400b      	ands	r3, r1
  40057e:	401a      	ands	r2, r3
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400584:	68fb      	ldr	r3, [r7, #12]
  400586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400588:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40058a:	68fb      	ldr	r3, [r7, #12]
  40058c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40058e:	687b      	ldr	r3, [r7, #4]
  400590:	43d9      	mvns	r1, r3
  400592:	697b      	ldr	r3, [r7, #20]
  400594:	400b      	ands	r3, r1
  400596:	401a      	ands	r2, r3
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40059c:	e03a      	b.n	400614 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40059e:	68fb      	ldr	r3, [r7, #12]
  4005a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005a2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005a4:	687a      	ldr	r2, [r7, #4]
  4005a6:	697b      	ldr	r3, [r7, #20]
  4005a8:	431a      	orrs	r2, r3
  4005aa:	68fb      	ldr	r3, [r7, #12]
  4005ac:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005ae:	68fb      	ldr	r3, [r7, #12]
  4005b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005b2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005b8:	687b      	ldr	r3, [r7, #4]
  4005ba:	43d9      	mvns	r1, r3
  4005bc:	697b      	ldr	r3, [r7, #20]
  4005be:	400b      	ands	r3, r1
  4005c0:	401a      	ands	r2, r3
  4005c2:	68fb      	ldr	r3, [r7, #12]
  4005c4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4005c6:	e025      	b.n	400614 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005c8:	68fb      	ldr	r3, [r7, #12]
  4005ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005cc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005ce:	68fb      	ldr	r3, [r7, #12]
  4005d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005d2:	687b      	ldr	r3, [r7, #4]
  4005d4:	43d9      	mvns	r1, r3
  4005d6:	697b      	ldr	r3, [r7, #20]
  4005d8:	400b      	ands	r3, r1
  4005da:	401a      	ands	r2, r3
  4005dc:	68fb      	ldr	r3, [r7, #12]
  4005de:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005e0:	68fb      	ldr	r3, [r7, #12]
  4005e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005e4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005e6:	687a      	ldr	r2, [r7, #4]
  4005e8:	697b      	ldr	r3, [r7, #20]
  4005ea:	431a      	orrs	r2, r3
  4005ec:	68fb      	ldr	r3, [r7, #12]
  4005ee:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4005f0:	e010      	b.n	400614 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005f2:	68fb      	ldr	r3, [r7, #12]
  4005f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005f6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005f8:	687a      	ldr	r2, [r7, #4]
  4005fa:	697b      	ldr	r3, [r7, #20]
  4005fc:	431a      	orrs	r2, r3
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400606:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400608:	687a      	ldr	r2, [r7, #4]
  40060a:	697b      	ldr	r3, [r7, #20]
  40060c:	431a      	orrs	r2, r3
  40060e:	68fb      	ldr	r3, [r7, #12]
  400610:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400612:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400614:	68fb      	ldr	r3, [r7, #12]
  400616:	687a      	ldr	r2, [r7, #4]
  400618:	605a      	str	r2, [r3, #4]
  40061a:	e000      	b.n	40061e <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40061c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40061e:	371c      	adds	r7, #28
  400620:	46bd      	mov	sp, r7
  400622:	f85d 7b04 	ldr.w	r7, [sp], #4
  400626:	4770      	bx	lr

00400628 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400628:	b480      	push	{r7}
  40062a:	b083      	sub	sp, #12
  40062c:	af00      	add	r7, sp, #0
  40062e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400630:	687b      	ldr	r3, [r7, #4]
  400632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400634:	4618      	mov	r0, r3
  400636:	370c      	adds	r7, #12
  400638:	46bd      	mov	sp, r7
  40063a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40063e:	4770      	bx	lr

00400640 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400640:	b480      	push	{r7}
  400642:	b083      	sub	sp, #12
  400644:	af00      	add	r7, sp, #0
  400646:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40064c:	4618      	mov	r0, r3
  40064e:	370c      	adds	r7, #12
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr

00400658 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400658:	b580      	push	{r7, lr}
  40065a:	b084      	sub	sp, #16
  40065c:	af00      	add	r7, sp, #0
  40065e:	6078      	str	r0, [r7, #4]
  400660:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400662:	6878      	ldr	r0, [r7, #4]
  400664:	4b26      	ldr	r3, [pc, #152]	; (400700 <pio_handler_process+0xa8>)
  400666:	4798      	blx	r3
  400668:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40066a:	6878      	ldr	r0, [r7, #4]
  40066c:	4b25      	ldr	r3, [pc, #148]	; (400704 <pio_handler_process+0xac>)
  40066e:	4798      	blx	r3
  400670:	4602      	mov	r2, r0
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	4013      	ands	r3, r2
  400676:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	2b00      	cmp	r3, #0
  40067c:	d03c      	beq.n	4006f8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40067e:	2300      	movs	r3, #0
  400680:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400682:	e034      	b.n	4006ee <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400684:	4a20      	ldr	r2, [pc, #128]	; (400708 <pio_handler_process+0xb0>)
  400686:	68bb      	ldr	r3, [r7, #8]
  400688:	011b      	lsls	r3, r3, #4
  40068a:	4413      	add	r3, r2
  40068c:	681a      	ldr	r2, [r3, #0]
  40068e:	683b      	ldr	r3, [r7, #0]
  400690:	429a      	cmp	r2, r3
  400692:	d126      	bne.n	4006e2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400694:	4a1c      	ldr	r2, [pc, #112]	; (400708 <pio_handler_process+0xb0>)
  400696:	68bb      	ldr	r3, [r7, #8]
  400698:	011b      	lsls	r3, r3, #4
  40069a:	4413      	add	r3, r2
  40069c:	3304      	adds	r3, #4
  40069e:	681a      	ldr	r2, [r3, #0]
  4006a0:	68fb      	ldr	r3, [r7, #12]
  4006a2:	4013      	ands	r3, r2
  4006a4:	2b00      	cmp	r3, #0
  4006a6:	d01c      	beq.n	4006e2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4006a8:	4a17      	ldr	r2, [pc, #92]	; (400708 <pio_handler_process+0xb0>)
  4006aa:	68bb      	ldr	r3, [r7, #8]
  4006ac:	011b      	lsls	r3, r3, #4
  4006ae:	4413      	add	r3, r2
  4006b0:	330c      	adds	r3, #12
  4006b2:	681b      	ldr	r3, [r3, #0]
  4006b4:	4914      	ldr	r1, [pc, #80]	; (400708 <pio_handler_process+0xb0>)
  4006b6:	68ba      	ldr	r2, [r7, #8]
  4006b8:	0112      	lsls	r2, r2, #4
  4006ba:	440a      	add	r2, r1
  4006bc:	6810      	ldr	r0, [r2, #0]
  4006be:	4912      	ldr	r1, [pc, #72]	; (400708 <pio_handler_process+0xb0>)
  4006c0:	68ba      	ldr	r2, [r7, #8]
  4006c2:	0112      	lsls	r2, r2, #4
  4006c4:	440a      	add	r2, r1
  4006c6:	3204      	adds	r2, #4
  4006c8:	6812      	ldr	r2, [r2, #0]
  4006ca:	4611      	mov	r1, r2
  4006cc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4006ce:	4a0e      	ldr	r2, [pc, #56]	; (400708 <pio_handler_process+0xb0>)
  4006d0:	68bb      	ldr	r3, [r7, #8]
  4006d2:	011b      	lsls	r3, r3, #4
  4006d4:	4413      	add	r3, r2
  4006d6:	3304      	adds	r3, #4
  4006d8:	681b      	ldr	r3, [r3, #0]
  4006da:	43db      	mvns	r3, r3
  4006dc:	68fa      	ldr	r2, [r7, #12]
  4006de:	4013      	ands	r3, r2
  4006e0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4006e2:	68bb      	ldr	r3, [r7, #8]
  4006e4:	3301      	adds	r3, #1
  4006e6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4006e8:	68bb      	ldr	r3, [r7, #8]
  4006ea:	2b06      	cmp	r3, #6
  4006ec:	d803      	bhi.n	4006f6 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4006ee:	68fb      	ldr	r3, [r7, #12]
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d1c7      	bne.n	400684 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4006f4:	e000      	b.n	4006f8 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4006f6:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4006f8:	bf00      	nop
  4006fa:	3710      	adds	r7, #16
  4006fc:	46bd      	mov	sp, r7
  4006fe:	bd80      	pop	{r7, pc}
  400700:	00400629 	.word	0x00400629
  400704:	00400641 	.word	0x00400641
  400708:	2040045c 	.word	0x2040045c

0040070c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40070c:	b580      	push	{r7, lr}
  40070e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400710:	210a      	movs	r1, #10
  400712:	4802      	ldr	r0, [pc, #8]	; (40071c <PIOA_Handler+0x10>)
  400714:	4b02      	ldr	r3, [pc, #8]	; (400720 <PIOA_Handler+0x14>)
  400716:	4798      	blx	r3
}
  400718:	bf00      	nop
  40071a:	bd80      	pop	{r7, pc}
  40071c:	400e0e00 	.word	0x400e0e00
  400720:	00400659 	.word	0x00400659

00400724 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400724:	b580      	push	{r7, lr}
  400726:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400728:	210b      	movs	r1, #11
  40072a:	4802      	ldr	r0, [pc, #8]	; (400734 <PIOB_Handler+0x10>)
  40072c:	4b02      	ldr	r3, [pc, #8]	; (400738 <PIOB_Handler+0x14>)
  40072e:	4798      	blx	r3
}
  400730:	bf00      	nop
  400732:	bd80      	pop	{r7, pc}
  400734:	400e1000 	.word	0x400e1000
  400738:	00400659 	.word	0x00400659

0040073c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40073c:	b580      	push	{r7, lr}
  40073e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400740:	210c      	movs	r1, #12
  400742:	4802      	ldr	r0, [pc, #8]	; (40074c <PIOC_Handler+0x10>)
  400744:	4b02      	ldr	r3, [pc, #8]	; (400750 <PIOC_Handler+0x14>)
  400746:	4798      	blx	r3
}
  400748:	bf00      	nop
  40074a:	bd80      	pop	{r7, pc}
  40074c:	400e1200 	.word	0x400e1200
  400750:	00400659 	.word	0x00400659

00400754 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400754:	b580      	push	{r7, lr}
  400756:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400758:	2110      	movs	r1, #16
  40075a:	4802      	ldr	r0, [pc, #8]	; (400764 <PIOD_Handler+0x10>)
  40075c:	4b02      	ldr	r3, [pc, #8]	; (400768 <PIOD_Handler+0x14>)
  40075e:	4798      	blx	r3
}
  400760:	bf00      	nop
  400762:	bd80      	pop	{r7, pc}
  400764:	400e1400 	.word	0x400e1400
  400768:	00400659 	.word	0x00400659

0040076c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40076c:	b580      	push	{r7, lr}
  40076e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400770:	2111      	movs	r1, #17
  400772:	4802      	ldr	r0, [pc, #8]	; (40077c <PIOE_Handler+0x10>)
  400774:	4b02      	ldr	r3, [pc, #8]	; (400780 <PIOE_Handler+0x14>)
  400776:	4798      	blx	r3
}
  400778:	bf00      	nop
  40077a:	bd80      	pop	{r7, pc}
  40077c:	400e1600 	.word	0x400e1600
  400780:	00400659 	.word	0x00400659

00400784 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400784:	b480      	push	{r7}
  400786:	b083      	sub	sp, #12
  400788:	af00      	add	r7, sp, #0
  40078a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  40078c:	687b      	ldr	r3, [r7, #4]
  40078e:	3b01      	subs	r3, #1
  400790:	2b03      	cmp	r3, #3
  400792:	d81a      	bhi.n	4007ca <pmc_mck_set_division+0x46>
  400794:	a201      	add	r2, pc, #4	; (adr r2, 40079c <pmc_mck_set_division+0x18>)
  400796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40079a:	bf00      	nop
  40079c:	004007ad 	.word	0x004007ad
  4007a0:	004007b3 	.word	0x004007b3
  4007a4:	004007bb 	.word	0x004007bb
  4007a8:	004007c3 	.word	0x004007c3
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4007ac:	2300      	movs	r3, #0
  4007ae:	607b      	str	r3, [r7, #4]
			break;
  4007b0:	e00e      	b.n	4007d0 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4007b2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4007b6:	607b      	str	r3, [r7, #4]
			break;
  4007b8:	e00a      	b.n	4007d0 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4007ba:	f44f 7340 	mov.w	r3, #768	; 0x300
  4007be:	607b      	str	r3, [r7, #4]
			break;
  4007c0:	e006      	b.n	4007d0 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4007c2:	f44f 7300 	mov.w	r3, #512	; 0x200
  4007c6:	607b      	str	r3, [r7, #4]
			break;
  4007c8:	e002      	b.n	4007d0 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4007ca:	2300      	movs	r3, #0
  4007cc:	607b      	str	r3, [r7, #4]
			break;
  4007ce:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4007d0:	490a      	ldr	r1, [pc, #40]	; (4007fc <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4007d2:	4b0a      	ldr	r3, [pc, #40]	; (4007fc <pmc_mck_set_division+0x78>)
  4007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4007d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4007da:	687b      	ldr	r3, [r7, #4]
  4007dc:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4007de:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007e0:	bf00      	nop
  4007e2:	4b06      	ldr	r3, [pc, #24]	; (4007fc <pmc_mck_set_division+0x78>)
  4007e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4007e6:	f003 0308 	and.w	r3, r3, #8
  4007ea:	2b00      	cmp	r3, #0
  4007ec:	d0f9      	beq.n	4007e2 <pmc_mck_set_division+0x5e>
}
  4007ee:	bf00      	nop
  4007f0:	370c      	adds	r7, #12
  4007f2:	46bd      	mov	sp, r7
  4007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007f8:	4770      	bx	lr
  4007fa:	bf00      	nop
  4007fc:	400e0600 	.word	0x400e0600

00400800 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400800:	b480      	push	{r7}
  400802:	b085      	sub	sp, #20
  400804:	af00      	add	r7, sp, #0
  400806:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400808:	491d      	ldr	r1, [pc, #116]	; (400880 <pmc_switch_mck_to_pllack+0x80>)
  40080a:	4b1d      	ldr	r3, [pc, #116]	; (400880 <pmc_switch_mck_to_pllack+0x80>)
  40080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40080e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400812:	687b      	ldr	r3, [r7, #4]
  400814:	4313      	orrs	r3, r2
  400816:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40081c:	60fb      	str	r3, [r7, #12]
  40081e:	e007      	b.n	400830 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400820:	68fb      	ldr	r3, [r7, #12]
  400822:	2b00      	cmp	r3, #0
  400824:	d101      	bne.n	40082a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400826:	2301      	movs	r3, #1
  400828:	e023      	b.n	400872 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40082a:	68fb      	ldr	r3, [r7, #12]
  40082c:	3b01      	subs	r3, #1
  40082e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400830:	4b13      	ldr	r3, [pc, #76]	; (400880 <pmc_switch_mck_to_pllack+0x80>)
  400832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400834:	f003 0308 	and.w	r3, r3, #8
  400838:	2b00      	cmp	r3, #0
  40083a:	d0f1      	beq.n	400820 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40083c:	4a10      	ldr	r2, [pc, #64]	; (400880 <pmc_switch_mck_to_pllack+0x80>)
  40083e:	4b10      	ldr	r3, [pc, #64]	; (400880 <pmc_switch_mck_to_pllack+0x80>)
  400840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400842:	f023 0303 	bic.w	r3, r3, #3
  400846:	f043 0302 	orr.w	r3, r3, #2
  40084a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400850:	60fb      	str	r3, [r7, #12]
  400852:	e007      	b.n	400864 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400854:	68fb      	ldr	r3, [r7, #12]
  400856:	2b00      	cmp	r3, #0
  400858:	d101      	bne.n	40085e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40085a:	2301      	movs	r3, #1
  40085c:	e009      	b.n	400872 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40085e:	68fb      	ldr	r3, [r7, #12]
  400860:	3b01      	subs	r3, #1
  400862:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400864:	4b06      	ldr	r3, [pc, #24]	; (400880 <pmc_switch_mck_to_pllack+0x80>)
  400866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400868:	f003 0308 	and.w	r3, r3, #8
  40086c:	2b00      	cmp	r3, #0
  40086e:	d0f1      	beq.n	400854 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400870:	2300      	movs	r3, #0
}
  400872:	4618      	mov	r0, r3
  400874:	3714      	adds	r7, #20
  400876:	46bd      	mov	sp, r7
  400878:	f85d 7b04 	ldr.w	r7, [sp], #4
  40087c:	4770      	bx	lr
  40087e:	bf00      	nop
  400880:	400e0600 	.word	0x400e0600

00400884 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400884:	b480      	push	{r7}
  400886:	b083      	sub	sp, #12
  400888:	af00      	add	r7, sp, #0
  40088a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40088c:	687b      	ldr	r3, [r7, #4]
  40088e:	2b01      	cmp	r3, #1
  400890:	d105      	bne.n	40089e <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400892:	4907      	ldr	r1, [pc, #28]	; (4008b0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400894:	4b06      	ldr	r3, [pc, #24]	; (4008b0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400896:	689a      	ldr	r2, [r3, #8]
  400898:	4b06      	ldr	r3, [pc, #24]	; (4008b4 <pmc_switch_sclk_to_32kxtal+0x30>)
  40089a:	4313      	orrs	r3, r2
  40089c:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40089e:	4b04      	ldr	r3, [pc, #16]	; (4008b0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4008a0:	4a05      	ldr	r2, [pc, #20]	; (4008b8 <pmc_switch_sclk_to_32kxtal+0x34>)
  4008a2:	601a      	str	r2, [r3, #0]
}
  4008a4:	bf00      	nop
  4008a6:	370c      	adds	r7, #12
  4008a8:	46bd      	mov	sp, r7
  4008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008ae:	4770      	bx	lr
  4008b0:	400e1810 	.word	0x400e1810
  4008b4:	a5100000 	.word	0xa5100000
  4008b8:	a5000008 	.word	0xa5000008

004008bc <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4008bc:	b480      	push	{r7}
  4008be:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4008c0:	4b09      	ldr	r3, [pc, #36]	; (4008e8 <pmc_osc_is_ready_32kxtal+0x2c>)
  4008c2:	695b      	ldr	r3, [r3, #20]
  4008c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4008c8:	2b00      	cmp	r3, #0
  4008ca:	d007      	beq.n	4008dc <pmc_osc_is_ready_32kxtal+0x20>
  4008cc:	4b07      	ldr	r3, [pc, #28]	; (4008ec <pmc_osc_is_ready_32kxtal+0x30>)
  4008ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4008d4:	2b00      	cmp	r3, #0
  4008d6:	d001      	beq.n	4008dc <pmc_osc_is_ready_32kxtal+0x20>
  4008d8:	2301      	movs	r3, #1
  4008da:	e000      	b.n	4008de <pmc_osc_is_ready_32kxtal+0x22>
  4008dc:	2300      	movs	r3, #0
}
  4008de:	4618      	mov	r0, r3
  4008e0:	46bd      	mov	sp, r7
  4008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008e6:	4770      	bx	lr
  4008e8:	400e1810 	.word	0x400e1810
  4008ec:	400e0600 	.word	0x400e0600

004008f0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4008f0:	b480      	push	{r7}
  4008f2:	b083      	sub	sp, #12
  4008f4:	af00      	add	r7, sp, #0
  4008f6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4008f8:	4915      	ldr	r1, [pc, #84]	; (400950 <pmc_switch_mainck_to_fastrc+0x60>)
  4008fa:	4b15      	ldr	r3, [pc, #84]	; (400950 <pmc_switch_mainck_to_fastrc+0x60>)
  4008fc:	6a1a      	ldr	r2, [r3, #32]
  4008fe:	4b15      	ldr	r3, [pc, #84]	; (400954 <pmc_switch_mainck_to_fastrc+0x64>)
  400900:	4313      	orrs	r3, r2
  400902:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400904:	bf00      	nop
  400906:	4b12      	ldr	r3, [pc, #72]	; (400950 <pmc_switch_mainck_to_fastrc+0x60>)
  400908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40090e:	2b00      	cmp	r3, #0
  400910:	d0f9      	beq.n	400906 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400912:	490f      	ldr	r1, [pc, #60]	; (400950 <pmc_switch_mainck_to_fastrc+0x60>)
  400914:	4b0e      	ldr	r3, [pc, #56]	; (400950 <pmc_switch_mainck_to_fastrc+0x60>)
  400916:	6a1a      	ldr	r2, [r3, #32]
  400918:	4b0f      	ldr	r3, [pc, #60]	; (400958 <pmc_switch_mainck_to_fastrc+0x68>)
  40091a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40091c:	687a      	ldr	r2, [r7, #4]
  40091e:	4313      	orrs	r3, r2
  400920:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400924:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400926:	bf00      	nop
  400928:	4b09      	ldr	r3, [pc, #36]	; (400950 <pmc_switch_mainck_to_fastrc+0x60>)
  40092a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40092c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400930:	2b00      	cmp	r3, #0
  400932:	d0f9      	beq.n	400928 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400934:	4906      	ldr	r1, [pc, #24]	; (400950 <pmc_switch_mainck_to_fastrc+0x60>)
  400936:	4b06      	ldr	r3, [pc, #24]	; (400950 <pmc_switch_mainck_to_fastrc+0x60>)
  400938:	6a1a      	ldr	r2, [r3, #32]
  40093a:	4b08      	ldr	r3, [pc, #32]	; (40095c <pmc_switch_mainck_to_fastrc+0x6c>)
  40093c:	4013      	ands	r3, r2
  40093e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400942:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400944:	bf00      	nop
  400946:	370c      	adds	r7, #12
  400948:	46bd      	mov	sp, r7
  40094a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40094e:	4770      	bx	lr
  400950:	400e0600 	.word	0x400e0600
  400954:	00370008 	.word	0x00370008
  400958:	ffc8ff8f 	.word	0xffc8ff8f
  40095c:	fec8ffff 	.word	0xfec8ffff

00400960 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400960:	b480      	push	{r7}
  400962:	b083      	sub	sp, #12
  400964:	af00      	add	r7, sp, #0
  400966:	6078      	str	r0, [r7, #4]
  400968:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40096a:	687b      	ldr	r3, [r7, #4]
  40096c:	2b00      	cmp	r3, #0
  40096e:	d008      	beq.n	400982 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400970:	4913      	ldr	r1, [pc, #76]	; (4009c0 <pmc_switch_mainck_to_xtal+0x60>)
  400972:	4b13      	ldr	r3, [pc, #76]	; (4009c0 <pmc_switch_mainck_to_xtal+0x60>)
  400974:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400976:	4a13      	ldr	r2, [pc, #76]	; (4009c4 <pmc_switch_mainck_to_xtal+0x64>)
  400978:	401a      	ands	r2, r3
  40097a:	4b13      	ldr	r3, [pc, #76]	; (4009c8 <pmc_switch_mainck_to_xtal+0x68>)
  40097c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40097e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400980:	e018      	b.n	4009b4 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400982:	490f      	ldr	r1, [pc, #60]	; (4009c0 <pmc_switch_mainck_to_xtal+0x60>)
  400984:	4b0e      	ldr	r3, [pc, #56]	; (4009c0 <pmc_switch_mainck_to_xtal+0x60>)
  400986:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400988:	4b10      	ldr	r3, [pc, #64]	; (4009cc <pmc_switch_mainck_to_xtal+0x6c>)
  40098a:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40098c:	683a      	ldr	r2, [r7, #0]
  40098e:	0212      	lsls	r2, r2, #8
  400990:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400992:	431a      	orrs	r2, r3
  400994:	4b0e      	ldr	r3, [pc, #56]	; (4009d0 <pmc_switch_mainck_to_xtal+0x70>)
  400996:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400998:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40099a:	bf00      	nop
  40099c:	4b08      	ldr	r3, [pc, #32]	; (4009c0 <pmc_switch_mainck_to_xtal+0x60>)
  40099e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009a0:	f003 0301 	and.w	r3, r3, #1
  4009a4:	2b00      	cmp	r3, #0
  4009a6:	d0f9      	beq.n	40099c <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4009a8:	4905      	ldr	r1, [pc, #20]	; (4009c0 <pmc_switch_mainck_to_xtal+0x60>)
  4009aa:	4b05      	ldr	r3, [pc, #20]	; (4009c0 <pmc_switch_mainck_to_xtal+0x60>)
  4009ac:	6a1a      	ldr	r2, [r3, #32]
  4009ae:	4b09      	ldr	r3, [pc, #36]	; (4009d4 <pmc_switch_mainck_to_xtal+0x74>)
  4009b0:	4313      	orrs	r3, r2
  4009b2:	620b      	str	r3, [r1, #32]
	}
}
  4009b4:	bf00      	nop
  4009b6:	370c      	adds	r7, #12
  4009b8:	46bd      	mov	sp, r7
  4009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009be:	4770      	bx	lr
  4009c0:	400e0600 	.word	0x400e0600
  4009c4:	fec8fffc 	.word	0xfec8fffc
  4009c8:	01370002 	.word	0x01370002
  4009cc:	ffc8fffc 	.word	0xffc8fffc
  4009d0:	00370001 	.word	0x00370001
  4009d4:	01370000 	.word	0x01370000

004009d8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4009d8:	b480      	push	{r7}
  4009da:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4009dc:	4b04      	ldr	r3, [pc, #16]	; (4009f0 <pmc_osc_is_ready_mainck+0x18>)
  4009de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4009e4:	4618      	mov	r0, r3
  4009e6:	46bd      	mov	sp, r7
  4009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009ec:	4770      	bx	lr
  4009ee:	bf00      	nop
  4009f0:	400e0600 	.word	0x400e0600

004009f4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4009f4:	b480      	push	{r7}
  4009f6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4009f8:	4b04      	ldr	r3, [pc, #16]	; (400a0c <pmc_disable_pllack+0x18>)
  4009fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4009fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400a00:	bf00      	nop
  400a02:	46bd      	mov	sp, r7
  400a04:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop
  400a0c:	400e0600 	.word	0x400e0600

00400a10 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400a10:	b480      	push	{r7}
  400a12:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a14:	4b04      	ldr	r3, [pc, #16]	; (400a28 <pmc_is_locked_pllack+0x18>)
  400a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a18:	f003 0302 	and.w	r3, r3, #2
}
  400a1c:	4618      	mov	r0, r3
  400a1e:	46bd      	mov	sp, r7
  400a20:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a24:	4770      	bx	lr
  400a26:	bf00      	nop
  400a28:	400e0600 	.word	0x400e0600

00400a2c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400a2c:	b480      	push	{r7}
  400a2e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400a30:	4b04      	ldr	r3, [pc, #16]	; (400a44 <pmc_is_locked_upll+0x18>)
  400a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400a38:	4618      	mov	r0, r3
  400a3a:	46bd      	mov	sp, r7
  400a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop
  400a44:	400e0600 	.word	0x400e0600

00400a48 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400a48:	b480      	push	{r7}
  400a4a:	b083      	sub	sp, #12
  400a4c:	af00      	add	r7, sp, #0
  400a4e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400a50:	687b      	ldr	r3, [r7, #4]
  400a52:	2b3f      	cmp	r3, #63	; 0x3f
  400a54:	d901      	bls.n	400a5a <pmc_enable_periph_clk+0x12>
		return 1;
  400a56:	2301      	movs	r3, #1
  400a58:	e02f      	b.n	400aba <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400a5a:	687b      	ldr	r3, [r7, #4]
  400a5c:	2b1f      	cmp	r3, #31
  400a5e:	d813      	bhi.n	400a88 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400a60:	4b19      	ldr	r3, [pc, #100]	; (400ac8 <pmc_enable_periph_clk+0x80>)
  400a62:	699a      	ldr	r2, [r3, #24]
  400a64:	2101      	movs	r1, #1
  400a66:	687b      	ldr	r3, [r7, #4]
  400a68:	fa01 f303 	lsl.w	r3, r1, r3
  400a6c:	401a      	ands	r2, r3
  400a6e:	2101      	movs	r1, #1
  400a70:	687b      	ldr	r3, [r7, #4]
  400a72:	fa01 f303 	lsl.w	r3, r1, r3
  400a76:	429a      	cmp	r2, r3
  400a78:	d01e      	beq.n	400ab8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400a7a:	4a13      	ldr	r2, [pc, #76]	; (400ac8 <pmc_enable_periph_clk+0x80>)
  400a7c:	2101      	movs	r1, #1
  400a7e:	687b      	ldr	r3, [r7, #4]
  400a80:	fa01 f303 	lsl.w	r3, r1, r3
  400a84:	6113      	str	r3, [r2, #16]
  400a86:	e017      	b.n	400ab8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400a88:	687b      	ldr	r3, [r7, #4]
  400a8a:	3b20      	subs	r3, #32
  400a8c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400a8e:	4b0e      	ldr	r3, [pc, #56]	; (400ac8 <pmc_enable_periph_clk+0x80>)
  400a90:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400a94:	2101      	movs	r1, #1
  400a96:	687b      	ldr	r3, [r7, #4]
  400a98:	fa01 f303 	lsl.w	r3, r1, r3
  400a9c:	401a      	ands	r2, r3
  400a9e:	2101      	movs	r1, #1
  400aa0:	687b      	ldr	r3, [r7, #4]
  400aa2:	fa01 f303 	lsl.w	r3, r1, r3
  400aa6:	429a      	cmp	r2, r3
  400aa8:	d006      	beq.n	400ab8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400aaa:	4a07      	ldr	r2, [pc, #28]	; (400ac8 <pmc_enable_periph_clk+0x80>)
  400aac:	2101      	movs	r1, #1
  400aae:	687b      	ldr	r3, [r7, #4]
  400ab0:	fa01 f303 	lsl.w	r3, r1, r3
  400ab4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400ab8:	2300      	movs	r3, #0
}
  400aba:	4618      	mov	r0, r3
  400abc:	370c      	adds	r7, #12
  400abe:	46bd      	mov	sp, r7
  400ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ac4:	4770      	bx	lr
  400ac6:	bf00      	nop
  400ac8:	400e0600 	.word	0x400e0600

00400acc <uart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
  400acc:	b480      	push	{r7}
  400ace:	b083      	sub	sp, #12
  400ad0:	af00      	add	r7, sp, #0
  400ad2:	6078      	str	r0, [r7, #4]
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  400ad4:	687b      	ldr	r3, [r7, #4]
  400ad6:	695b      	ldr	r3, [r3, #20]
  400ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
  400adc:	2b00      	cmp	r3, #0
  400ade:	bf14      	ite	ne
  400ae0:	2301      	movne	r3, #1
  400ae2:	2300      	moveq	r3, #0
  400ae4:	b2db      	uxtb	r3, r3
}
  400ae6:	4618      	mov	r0, r3
  400ae8:	370c      	adds	r7, #12
  400aea:	46bd      	mov	sp, r7
  400aec:	f85d 7b04 	ldr.w	r7, [sp], #4
  400af0:	4770      	bx	lr
  400af2:	bf00      	nop

00400af4 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400af4:	b480      	push	{r7}
  400af6:	b083      	sub	sp, #12
  400af8:	af00      	add	r7, sp, #0
  400afa:	6078      	str	r0, [r7, #4]
  400afc:	460b      	mov	r3, r1
  400afe:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400b00:	687b      	ldr	r3, [r7, #4]
  400b02:	695b      	ldr	r3, [r3, #20]
  400b04:	f003 0302 	and.w	r3, r3, #2
  400b08:	2b00      	cmp	r3, #0
  400b0a:	d101      	bne.n	400b10 <uart_write+0x1c>
		return 1;
  400b0c:	2301      	movs	r3, #1
  400b0e:	e003      	b.n	400b18 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  400b10:	78fa      	ldrb	r2, [r7, #3]
  400b12:	687b      	ldr	r3, [r7, #4]
  400b14:	61da      	str	r2, [r3, #28]
	return 0;
  400b16:	2300      	movs	r3, #0
}
  400b18:	4618      	mov	r0, r3
  400b1a:	370c      	adds	r7, #12
  400b1c:	46bd      	mov	sp, r7
  400b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b22:	4770      	bx	lr

00400b24 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  400b24:	b480      	push	{r7}
  400b26:	b083      	sub	sp, #12
  400b28:	af00      	add	r7, sp, #0
  400b2a:	6078      	str	r0, [r7, #4]
  400b2c:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b2e:	687b      	ldr	r3, [r7, #4]
  400b30:	695b      	ldr	r3, [r3, #20]
  400b32:	f003 0301 	and.w	r3, r3, #1
  400b36:	2b00      	cmp	r3, #0
  400b38:	d101      	bne.n	400b3e <uart_read+0x1a>
		return 1;
  400b3a:	2301      	movs	r3, #1
  400b3c:	e005      	b.n	400b4a <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b3e:	687b      	ldr	r3, [r7, #4]
  400b40:	699b      	ldr	r3, [r3, #24]
  400b42:	b2da      	uxtb	r2, r3
  400b44:	683b      	ldr	r3, [r7, #0]
  400b46:	701a      	strb	r2, [r3, #0]
	return 0;
  400b48:	2300      	movs	r3, #0
}
  400b4a:	4618      	mov	r0, r3
  400b4c:	370c      	adds	r7, #12
  400b4e:	46bd      	mov	sp, r7
  400b50:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b54:	4770      	bx	lr
  400b56:	bf00      	nop

00400b58 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400b58:	b480      	push	{r7}
  400b5a:	b089      	sub	sp, #36	; 0x24
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	60f8      	str	r0, [r7, #12]
  400b60:	60b9      	str	r1, [r7, #8]
  400b62:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400b64:	68bb      	ldr	r3, [r7, #8]
  400b66:	011a      	lsls	r2, r3, #4
  400b68:	687b      	ldr	r3, [r7, #4]
  400b6a:	429a      	cmp	r2, r3
  400b6c:	d802      	bhi.n	400b74 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400b6e:	2310      	movs	r3, #16
  400b70:	61fb      	str	r3, [r7, #28]
  400b72:	e001      	b.n	400b78 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400b74:	2308      	movs	r3, #8
  400b76:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400b78:	687b      	ldr	r3, [r7, #4]
  400b7a:	00da      	lsls	r2, r3, #3
  400b7c:	69fb      	ldr	r3, [r7, #28]
  400b7e:	68b9      	ldr	r1, [r7, #8]
  400b80:	fb01 f303 	mul.w	r3, r1, r3
  400b84:	085b      	lsrs	r3, r3, #1
  400b86:	441a      	add	r2, r3
  400b88:	69fb      	ldr	r3, [r7, #28]
  400b8a:	68b9      	ldr	r1, [r7, #8]
  400b8c:	fb01 f303 	mul.w	r3, r1, r3
  400b90:	fbb2 f3f3 	udiv	r3, r2, r3
  400b94:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400b96:	69bb      	ldr	r3, [r7, #24]
  400b98:	08db      	lsrs	r3, r3, #3
  400b9a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400b9c:	69bb      	ldr	r3, [r7, #24]
  400b9e:	f003 0307 	and.w	r3, r3, #7
  400ba2:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400ba4:	697b      	ldr	r3, [r7, #20]
  400ba6:	2b00      	cmp	r3, #0
  400ba8:	d003      	beq.n	400bb2 <usart_set_async_baudrate+0x5a>
  400baa:	697b      	ldr	r3, [r7, #20]
  400bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400bb0:	d301      	bcc.n	400bb6 <usart_set_async_baudrate+0x5e>
		return 1;
  400bb2:	2301      	movs	r3, #1
  400bb4:	e00f      	b.n	400bd6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400bb6:	69fb      	ldr	r3, [r7, #28]
  400bb8:	2b08      	cmp	r3, #8
  400bba:	d105      	bne.n	400bc8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400bbc:	68fb      	ldr	r3, [r7, #12]
  400bbe:	685b      	ldr	r3, [r3, #4]
  400bc0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400bc4:	68fb      	ldr	r3, [r7, #12]
  400bc6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400bc8:	693b      	ldr	r3, [r7, #16]
  400bca:	041a      	lsls	r2, r3, #16
  400bcc:	697b      	ldr	r3, [r7, #20]
  400bce:	431a      	orrs	r2, r3
  400bd0:	68fb      	ldr	r3, [r7, #12]
  400bd2:	621a      	str	r2, [r3, #32]

	return 0;
  400bd4:	2300      	movs	r3, #0
}
  400bd6:	4618      	mov	r0, r3
  400bd8:	3724      	adds	r7, #36	; 0x24
  400bda:	46bd      	mov	sp, r7
  400bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be0:	4770      	bx	lr
  400be2:	bf00      	nop

00400be4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400be4:	b580      	push	{r7, lr}
  400be6:	b082      	sub	sp, #8
  400be8:	af00      	add	r7, sp, #0
  400bea:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400bec:	6878      	ldr	r0, [r7, #4]
  400bee:	4b0d      	ldr	r3, [pc, #52]	; (400c24 <usart_reset+0x40>)
  400bf0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400bf2:	687b      	ldr	r3, [r7, #4]
  400bf4:	2200      	movs	r2, #0
  400bf6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400bf8:	687b      	ldr	r3, [r7, #4]
  400bfa:	2200      	movs	r2, #0
  400bfc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400bfe:	687b      	ldr	r3, [r7, #4]
  400c00:	2200      	movs	r2, #0
  400c02:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400c04:	6878      	ldr	r0, [r7, #4]
  400c06:	4b08      	ldr	r3, [pc, #32]	; (400c28 <usart_reset+0x44>)
  400c08:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400c0a:	6878      	ldr	r0, [r7, #4]
  400c0c:	4b07      	ldr	r3, [pc, #28]	; (400c2c <usart_reset+0x48>)
  400c0e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400c10:	6878      	ldr	r0, [r7, #4]
  400c12:	4b07      	ldr	r3, [pc, #28]	; (400c30 <usart_reset+0x4c>)
  400c14:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400c16:	6878      	ldr	r0, [r7, #4]
  400c18:	4b06      	ldr	r3, [pc, #24]	; (400c34 <usart_reset+0x50>)
  400c1a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  400c1c:	bf00      	nop
  400c1e:	3708      	adds	r7, #8
  400c20:	46bd      	mov	sp, r7
  400c22:	bd80      	pop	{r7, pc}
  400c24:	00400dcd 	.word	0x00400dcd
  400c28:	00400cd9 	.word	0x00400cd9
  400c2c:	00400d11 	.word	0x00400d11
  400c30:	00400d2d 	.word	0x00400d2d
  400c34:	00400d49 	.word	0x00400d49

00400c38 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400c38:	b580      	push	{r7, lr}
  400c3a:	b084      	sub	sp, #16
  400c3c:	af00      	add	r7, sp, #0
  400c3e:	60f8      	str	r0, [r7, #12]
  400c40:	60b9      	str	r1, [r7, #8]
  400c42:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400c44:	68f8      	ldr	r0, [r7, #12]
  400c46:	4b1a      	ldr	r3, [pc, #104]	; (400cb0 <usart_init_rs232+0x78>)
  400c48:	4798      	blx	r3

	ul_reg_val = 0;
  400c4a:	4b1a      	ldr	r3, [pc, #104]	; (400cb4 <usart_init_rs232+0x7c>)
  400c4c:	2200      	movs	r2, #0
  400c4e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400c50:	68bb      	ldr	r3, [r7, #8]
  400c52:	2b00      	cmp	r3, #0
  400c54:	d009      	beq.n	400c6a <usart_init_rs232+0x32>
  400c56:	68bb      	ldr	r3, [r7, #8]
  400c58:	681b      	ldr	r3, [r3, #0]
  400c5a:	687a      	ldr	r2, [r7, #4]
  400c5c:	4619      	mov	r1, r3
  400c5e:	68f8      	ldr	r0, [r7, #12]
  400c60:	4b15      	ldr	r3, [pc, #84]	; (400cb8 <usart_init_rs232+0x80>)
  400c62:	4798      	blx	r3
  400c64:	4603      	mov	r3, r0
  400c66:	2b00      	cmp	r3, #0
  400c68:	d001      	beq.n	400c6e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400c6a:	2301      	movs	r3, #1
  400c6c:	e01b      	b.n	400ca6 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c6e:	68bb      	ldr	r3, [r7, #8]
  400c70:	685a      	ldr	r2, [r3, #4]
  400c72:	68bb      	ldr	r3, [r7, #8]
  400c74:	689b      	ldr	r3, [r3, #8]
  400c76:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400c78:	68bb      	ldr	r3, [r7, #8]
  400c7a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c7c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400c7e:	68bb      	ldr	r3, [r7, #8]
  400c80:	68db      	ldr	r3, [r3, #12]
  400c82:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c84:	4b0b      	ldr	r3, [pc, #44]	; (400cb4 <usart_init_rs232+0x7c>)
  400c86:	681b      	ldr	r3, [r3, #0]
  400c88:	4313      	orrs	r3, r2
  400c8a:	4a0a      	ldr	r2, [pc, #40]	; (400cb4 <usart_init_rs232+0x7c>)
  400c8c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400c8e:	4b09      	ldr	r3, [pc, #36]	; (400cb4 <usart_init_rs232+0x7c>)
  400c90:	681b      	ldr	r3, [r3, #0]
  400c92:	4a08      	ldr	r2, [pc, #32]	; (400cb4 <usart_init_rs232+0x7c>)
  400c94:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400c96:	68fb      	ldr	r3, [r7, #12]
  400c98:	685a      	ldr	r2, [r3, #4]
  400c9a:	4b06      	ldr	r3, [pc, #24]	; (400cb4 <usart_init_rs232+0x7c>)
  400c9c:	681b      	ldr	r3, [r3, #0]
  400c9e:	431a      	orrs	r2, r3
  400ca0:	68fb      	ldr	r3, [r7, #12]
  400ca2:	605a      	str	r2, [r3, #4]

	return 0;
  400ca4:	2300      	movs	r3, #0
}
  400ca6:	4618      	mov	r0, r3
  400ca8:	3710      	adds	r7, #16
  400caa:	46bd      	mov	sp, r7
  400cac:	bd80      	pop	{r7, pc}
  400cae:	bf00      	nop
  400cb0:	00400be5 	.word	0x00400be5
  400cb4:	204004cc 	.word	0x204004cc
  400cb8:	00400b59 	.word	0x00400b59

00400cbc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400cbc:	b480      	push	{r7}
  400cbe:	b083      	sub	sp, #12
  400cc0:	af00      	add	r7, sp, #0
  400cc2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400cc4:	687b      	ldr	r3, [r7, #4]
  400cc6:	2240      	movs	r2, #64	; 0x40
  400cc8:	601a      	str	r2, [r3, #0]
}
  400cca:	bf00      	nop
  400ccc:	370c      	adds	r7, #12
  400cce:	46bd      	mov	sp, r7
  400cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd4:	4770      	bx	lr
  400cd6:	bf00      	nop

00400cd8 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400cd8:	b480      	push	{r7}
  400cda:	b083      	sub	sp, #12
  400cdc:	af00      	add	r7, sp, #0
  400cde:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400ce0:	687b      	ldr	r3, [r7, #4]
  400ce2:	2288      	movs	r2, #136	; 0x88
  400ce4:	601a      	str	r2, [r3, #0]
}
  400ce6:	bf00      	nop
  400ce8:	370c      	adds	r7, #12
  400cea:	46bd      	mov	sp, r7
  400cec:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cf0:	4770      	bx	lr
  400cf2:	bf00      	nop

00400cf4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400cf4:	b480      	push	{r7}
  400cf6:	b083      	sub	sp, #12
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400cfc:	687b      	ldr	r3, [r7, #4]
  400cfe:	2210      	movs	r2, #16
  400d00:	601a      	str	r2, [r3, #0]
}
  400d02:	bf00      	nop
  400d04:	370c      	adds	r7, #12
  400d06:	46bd      	mov	sp, r7
  400d08:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d0c:	4770      	bx	lr
  400d0e:	bf00      	nop

00400d10 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400d10:	b480      	push	{r7}
  400d12:	b083      	sub	sp, #12
  400d14:	af00      	add	r7, sp, #0
  400d16:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d18:	687b      	ldr	r3, [r7, #4]
  400d1a:	2224      	movs	r2, #36	; 0x24
  400d1c:	601a      	str	r2, [r3, #0]
}
  400d1e:	bf00      	nop
  400d20:	370c      	adds	r7, #12
  400d22:	46bd      	mov	sp, r7
  400d24:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d28:	4770      	bx	lr
  400d2a:	bf00      	nop

00400d2c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400d2c:	b480      	push	{r7}
  400d2e:	b083      	sub	sp, #12
  400d30:	af00      	add	r7, sp, #0
  400d32:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400d34:	687b      	ldr	r3, [r7, #4]
  400d36:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d3a:	601a      	str	r2, [r3, #0]
}
  400d3c:	bf00      	nop
  400d3e:	370c      	adds	r7, #12
  400d40:	46bd      	mov	sp, r7
  400d42:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d46:	4770      	bx	lr

00400d48 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400d48:	b480      	push	{r7}
  400d4a:	b083      	sub	sp, #12
  400d4c:	af00      	add	r7, sp, #0
  400d4e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400d50:	687b      	ldr	r3, [r7, #4]
  400d52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400d56:	601a      	str	r2, [r3, #0]
}
  400d58:	bf00      	nop
  400d5a:	370c      	adds	r7, #12
  400d5c:	46bd      	mov	sp, r7
  400d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d62:	4770      	bx	lr

00400d64 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  400d64:	b480      	push	{r7}
  400d66:	b083      	sub	sp, #12
  400d68:	af00      	add	r7, sp, #0
  400d6a:	6078      	str	r0, [r7, #4]
  400d6c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400d6e:	687b      	ldr	r3, [r7, #4]
  400d70:	695b      	ldr	r3, [r3, #20]
  400d72:	f003 0302 	and.w	r3, r3, #2
  400d76:	2b00      	cmp	r3, #0
  400d78:	d101      	bne.n	400d7e <usart_write+0x1a>
		return 1;
  400d7a:	2301      	movs	r3, #1
  400d7c:	e005      	b.n	400d8a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400d7e:	683b      	ldr	r3, [r7, #0]
  400d80:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400d84:	687b      	ldr	r3, [r7, #4]
  400d86:	61da      	str	r2, [r3, #28]
	return 0;
  400d88:	2300      	movs	r3, #0
}
  400d8a:	4618      	mov	r0, r3
  400d8c:	370c      	adds	r7, #12
  400d8e:	46bd      	mov	sp, r7
  400d90:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d94:	4770      	bx	lr
  400d96:	bf00      	nop

00400d98 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400d98:	b480      	push	{r7}
  400d9a:	b083      	sub	sp, #12
  400d9c:	af00      	add	r7, sp, #0
  400d9e:	6078      	str	r0, [r7, #4]
  400da0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400da2:	687b      	ldr	r3, [r7, #4]
  400da4:	695b      	ldr	r3, [r3, #20]
  400da6:	f003 0301 	and.w	r3, r3, #1
  400daa:	2b00      	cmp	r3, #0
  400dac:	d101      	bne.n	400db2 <usart_read+0x1a>
		return 1;
  400dae:	2301      	movs	r3, #1
  400db0:	e006      	b.n	400dc0 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400db2:	687b      	ldr	r3, [r7, #4]
  400db4:	699b      	ldr	r3, [r3, #24]
  400db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400dba:	683b      	ldr	r3, [r7, #0]
  400dbc:	601a      	str	r2, [r3, #0]

	return 0;
  400dbe:	2300      	movs	r3, #0
}
  400dc0:	4618      	mov	r0, r3
  400dc2:	370c      	adds	r7, #12
  400dc4:	46bd      	mov	sp, r7
  400dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dca:	4770      	bx	lr

00400dcc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400dcc:	b480      	push	{r7}
  400dce:	b083      	sub	sp, #12
  400dd0:	af00      	add	r7, sp, #0
  400dd2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400dd4:	687b      	ldr	r3, [r7, #4]
  400dd6:	4a04      	ldr	r2, [pc, #16]	; (400de8 <usart_disable_writeprotect+0x1c>)
  400dd8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400ddc:	bf00      	nop
  400dde:	370c      	adds	r7, #12
  400de0:	46bd      	mov	sp, r7
  400de2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400de6:	4770      	bx	lr
  400de8:	55534100 	.word	0x55534100

00400dec <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400dec:	b480      	push	{r7}
  400dee:	b083      	sub	sp, #12
  400df0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400df2:	f3ef 8310 	mrs	r3, PRIMASK
  400df6:	607b      	str	r3, [r7, #4]
  return(result);
  400df8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400dfa:	2b00      	cmp	r3, #0
  400dfc:	bf0c      	ite	eq
  400dfe:	2301      	moveq	r3, #1
  400e00:	2300      	movne	r3, #0
  400e02:	b2db      	uxtb	r3, r3
  400e04:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400e06:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400e08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e0c:	4b04      	ldr	r3, [pc, #16]	; (400e20 <cpu_irq_save+0x34>)
  400e0e:	2200      	movs	r2, #0
  400e10:	701a      	strb	r2, [r3, #0]
	return flags;
  400e12:	683b      	ldr	r3, [r7, #0]
}
  400e14:	4618      	mov	r0, r3
  400e16:	370c      	adds	r7, #12
  400e18:	46bd      	mov	sp, r7
  400e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e1e:	4770      	bx	lr
  400e20:	2040000c 	.word	0x2040000c

00400e24 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400e24:	b480      	push	{r7}
  400e26:	b083      	sub	sp, #12
  400e28:	af00      	add	r7, sp, #0
  400e2a:	6078      	str	r0, [r7, #4]
	return (flags);
  400e2c:	687b      	ldr	r3, [r7, #4]
  400e2e:	2b00      	cmp	r3, #0
  400e30:	bf14      	ite	ne
  400e32:	2301      	movne	r3, #1
  400e34:	2300      	moveq	r3, #0
  400e36:	b2db      	uxtb	r3, r3
}
  400e38:	4618      	mov	r0, r3
  400e3a:	370c      	adds	r7, #12
  400e3c:	46bd      	mov	sp, r7
  400e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e42:	4770      	bx	lr

00400e44 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400e44:	b580      	push	{r7, lr}
  400e46:	b082      	sub	sp, #8
  400e48:	af00      	add	r7, sp, #0
  400e4a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400e4c:	6878      	ldr	r0, [r7, #4]
  400e4e:	4b07      	ldr	r3, [pc, #28]	; (400e6c <cpu_irq_restore+0x28>)
  400e50:	4798      	blx	r3
  400e52:	4603      	mov	r3, r0
  400e54:	2b00      	cmp	r3, #0
  400e56:	d005      	beq.n	400e64 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400e58:	4b05      	ldr	r3, [pc, #20]	; (400e70 <cpu_irq_restore+0x2c>)
  400e5a:	2201      	movs	r2, #1
  400e5c:	701a      	strb	r2, [r3, #0]
  400e5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400e62:	b662      	cpsie	i
}
  400e64:	bf00      	nop
  400e66:	3708      	adds	r7, #8
  400e68:	46bd      	mov	sp, r7
  400e6a:	bd80      	pop	{r7, pc}
  400e6c:	00400e25 	.word	0x00400e25
  400e70:	2040000c 	.word	0x2040000c

00400e74 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400e74:	b580      	push	{r7, lr}
  400e76:	b084      	sub	sp, #16
  400e78:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400e7a:	4b1e      	ldr	r3, [pc, #120]	; (400ef4 <Reset_Handler+0x80>)
  400e7c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  400e7e:	4b1e      	ldr	r3, [pc, #120]	; (400ef8 <Reset_Handler+0x84>)
  400e80:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  400e82:	68fa      	ldr	r2, [r7, #12]
  400e84:	68bb      	ldr	r3, [r7, #8]
  400e86:	429a      	cmp	r2, r3
  400e88:	d00c      	beq.n	400ea4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400e8a:	e007      	b.n	400e9c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400e8c:	68bb      	ldr	r3, [r7, #8]
  400e8e:	1d1a      	adds	r2, r3, #4
  400e90:	60ba      	str	r2, [r7, #8]
  400e92:	68fa      	ldr	r2, [r7, #12]
  400e94:	1d11      	adds	r1, r2, #4
  400e96:	60f9      	str	r1, [r7, #12]
  400e98:	6812      	ldr	r2, [r2, #0]
  400e9a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400e9c:	68bb      	ldr	r3, [r7, #8]
  400e9e:	4a17      	ldr	r2, [pc, #92]	; (400efc <Reset_Handler+0x88>)
  400ea0:	4293      	cmp	r3, r2
  400ea2:	d3f3      	bcc.n	400e8c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400ea4:	4b16      	ldr	r3, [pc, #88]	; (400f00 <Reset_Handler+0x8c>)
  400ea6:	60bb      	str	r3, [r7, #8]
  400ea8:	e004      	b.n	400eb4 <Reset_Handler+0x40>
                *pDest++ = 0;
  400eaa:	68bb      	ldr	r3, [r7, #8]
  400eac:	1d1a      	adds	r2, r3, #4
  400eae:	60ba      	str	r2, [r7, #8]
  400eb0:	2200      	movs	r2, #0
  400eb2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400eb4:	68bb      	ldr	r3, [r7, #8]
  400eb6:	4a13      	ldr	r2, [pc, #76]	; (400f04 <Reset_Handler+0x90>)
  400eb8:	4293      	cmp	r3, r2
  400eba:	d3f6      	bcc.n	400eaa <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400ebc:	4b12      	ldr	r3, [pc, #72]	; (400f08 <Reset_Handler+0x94>)
  400ebe:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ec0:	4a12      	ldr	r2, [pc, #72]	; (400f0c <Reset_Handler+0x98>)
  400ec2:	68fb      	ldr	r3, [r7, #12]
  400ec4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400ec8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  400eca:	4b11      	ldr	r3, [pc, #68]	; (400f10 <Reset_Handler+0x9c>)
  400ecc:	4798      	blx	r3
  400ece:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  400ed0:	4a10      	ldr	r2, [pc, #64]	; (400f14 <Reset_Handler+0xa0>)
  400ed2:	4b10      	ldr	r3, [pc, #64]	; (400f14 <Reset_Handler+0xa0>)
  400ed4:	681b      	ldr	r3, [r3, #0]
  400ed6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400eda:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400edc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400ee0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  400ee4:	6878      	ldr	r0, [r7, #4]
  400ee6:	4b0c      	ldr	r3, [pc, #48]	; (400f18 <Reset_Handler+0xa4>)
  400ee8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400eea:	4b0c      	ldr	r3, [pc, #48]	; (400f1c <Reset_Handler+0xa8>)
  400eec:	4798      	blx	r3

        /* Branch to main function */
        main();
  400eee:	4b0c      	ldr	r3, [pc, #48]	; (400f20 <Reset_Handler+0xac>)
  400ef0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400ef2:	e7fe      	b.n	400ef2 <Reset_Handler+0x7e>
  400ef4:	00401b08 	.word	0x00401b08
  400ef8:	20400000 	.word	0x20400000
  400efc:	20400440 	.word	0x20400440
  400f00:	20400440 	.word	0x20400440
  400f04:	204004d8 	.word	0x204004d8
  400f08:	00400000 	.word	0x00400000
  400f0c:	e000ed00 	.word	0xe000ed00
  400f10:	00400ded 	.word	0x00400ded
  400f14:	e000ed88 	.word	0xe000ed88
  400f18:	00400e45 	.word	0x00400e45
  400f1c:	0040198d 	.word	0x0040198d
  400f20:	0040157d 	.word	0x0040157d

00400f24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400f24:	b480      	push	{r7}
  400f26:	af00      	add	r7, sp, #0
        while (1) {
        }
  400f28:	e7fe      	b.n	400f28 <Dummy_Handler+0x4>
  400f2a:	bf00      	nop

00400f2c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  400f2c:	b480      	push	{r7}
  400f2e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400f30:	4b52      	ldr	r3, [pc, #328]	; (40107c <SystemCoreClockUpdate+0x150>)
  400f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f34:	f003 0303 	and.w	r3, r3, #3
  400f38:	2b01      	cmp	r3, #1
  400f3a:	d014      	beq.n	400f66 <SystemCoreClockUpdate+0x3a>
  400f3c:	2b01      	cmp	r3, #1
  400f3e:	d302      	bcc.n	400f46 <SystemCoreClockUpdate+0x1a>
  400f40:	2b02      	cmp	r3, #2
  400f42:	d038      	beq.n	400fb6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  400f44:	e07a      	b.n	40103c <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400f46:	4b4e      	ldr	r3, [pc, #312]	; (401080 <SystemCoreClockUpdate+0x154>)
  400f48:	695b      	ldr	r3, [r3, #20]
  400f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400f4e:	2b00      	cmp	r3, #0
  400f50:	d004      	beq.n	400f5c <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400f52:	4b4c      	ldr	r3, [pc, #304]	; (401084 <SystemCoreClockUpdate+0x158>)
  400f54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f58:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  400f5a:	e06f      	b.n	40103c <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400f5c:	4b49      	ldr	r3, [pc, #292]	; (401084 <SystemCoreClockUpdate+0x158>)
  400f5e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400f62:	601a      	str	r2, [r3, #0]
      }
    break;
  400f64:	e06a      	b.n	40103c <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f66:	4b45      	ldr	r3, [pc, #276]	; (40107c <SystemCoreClockUpdate+0x150>)
  400f68:	6a1b      	ldr	r3, [r3, #32]
  400f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400f6e:	2b00      	cmp	r3, #0
  400f70:	d003      	beq.n	400f7a <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400f72:	4b44      	ldr	r3, [pc, #272]	; (401084 <SystemCoreClockUpdate+0x158>)
  400f74:	4a44      	ldr	r2, [pc, #272]	; (401088 <SystemCoreClockUpdate+0x15c>)
  400f76:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  400f78:	e060      	b.n	40103c <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f7a:	4b42      	ldr	r3, [pc, #264]	; (401084 <SystemCoreClockUpdate+0x158>)
  400f7c:	4a43      	ldr	r2, [pc, #268]	; (40108c <SystemCoreClockUpdate+0x160>)
  400f7e:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f80:	4b3e      	ldr	r3, [pc, #248]	; (40107c <SystemCoreClockUpdate+0x150>)
  400f82:	6a1b      	ldr	r3, [r3, #32]
  400f84:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f88:	2b10      	cmp	r3, #16
  400f8a:	d004      	beq.n	400f96 <SystemCoreClockUpdate+0x6a>
  400f8c:	2b20      	cmp	r3, #32
  400f8e:	d008      	beq.n	400fa2 <SystemCoreClockUpdate+0x76>
  400f90:	2b00      	cmp	r3, #0
  400f92:	d00e      	beq.n	400fb2 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  400f94:	e00e      	b.n	400fb4 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400f96:	4b3b      	ldr	r3, [pc, #236]	; (401084 <SystemCoreClockUpdate+0x158>)
  400f98:	681b      	ldr	r3, [r3, #0]
  400f9a:	005b      	lsls	r3, r3, #1
  400f9c:	4a39      	ldr	r2, [pc, #228]	; (401084 <SystemCoreClockUpdate+0x158>)
  400f9e:	6013      	str	r3, [r2, #0]
          break;
  400fa0:	e008      	b.n	400fb4 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400fa2:	4b38      	ldr	r3, [pc, #224]	; (401084 <SystemCoreClockUpdate+0x158>)
  400fa4:	681a      	ldr	r2, [r3, #0]
  400fa6:	4613      	mov	r3, r2
  400fa8:	005b      	lsls	r3, r3, #1
  400faa:	4413      	add	r3, r2
  400fac:	4a35      	ldr	r2, [pc, #212]	; (401084 <SystemCoreClockUpdate+0x158>)
  400fae:	6013      	str	r3, [r2, #0]
          break;
  400fb0:	e000      	b.n	400fb4 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  400fb2:	bf00      	nop

          default:
          break;
        }
      }
    break;
  400fb4:	e042      	b.n	40103c <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400fb6:	4b31      	ldr	r3, [pc, #196]	; (40107c <SystemCoreClockUpdate+0x150>)
  400fb8:	6a1b      	ldr	r3, [r3, #32]
  400fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	d003      	beq.n	400fca <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400fc2:	4b30      	ldr	r3, [pc, #192]	; (401084 <SystemCoreClockUpdate+0x158>)
  400fc4:	4a30      	ldr	r2, [pc, #192]	; (401088 <SystemCoreClockUpdate+0x15c>)
  400fc6:	601a      	str	r2, [r3, #0]
  400fc8:	e01c      	b.n	401004 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400fca:	4b2e      	ldr	r3, [pc, #184]	; (401084 <SystemCoreClockUpdate+0x158>)
  400fcc:	4a2f      	ldr	r2, [pc, #188]	; (40108c <SystemCoreClockUpdate+0x160>)
  400fce:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400fd0:	4b2a      	ldr	r3, [pc, #168]	; (40107c <SystemCoreClockUpdate+0x150>)
  400fd2:	6a1b      	ldr	r3, [r3, #32]
  400fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400fd8:	2b10      	cmp	r3, #16
  400fda:	d004      	beq.n	400fe6 <SystemCoreClockUpdate+0xba>
  400fdc:	2b20      	cmp	r3, #32
  400fde:	d008      	beq.n	400ff2 <SystemCoreClockUpdate+0xc6>
  400fe0:	2b00      	cmp	r3, #0
  400fe2:	d00e      	beq.n	401002 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  400fe4:	e00e      	b.n	401004 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400fe6:	4b27      	ldr	r3, [pc, #156]	; (401084 <SystemCoreClockUpdate+0x158>)
  400fe8:	681b      	ldr	r3, [r3, #0]
  400fea:	005b      	lsls	r3, r3, #1
  400fec:	4a25      	ldr	r2, [pc, #148]	; (401084 <SystemCoreClockUpdate+0x158>)
  400fee:	6013      	str	r3, [r2, #0]
          break;
  400ff0:	e008      	b.n	401004 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400ff2:	4b24      	ldr	r3, [pc, #144]	; (401084 <SystemCoreClockUpdate+0x158>)
  400ff4:	681a      	ldr	r2, [r3, #0]
  400ff6:	4613      	mov	r3, r2
  400ff8:	005b      	lsls	r3, r3, #1
  400ffa:	4413      	add	r3, r2
  400ffc:	4a21      	ldr	r2, [pc, #132]	; (401084 <SystemCoreClockUpdate+0x158>)
  400ffe:	6013      	str	r3, [r2, #0]
          break;
  401000:	e000      	b.n	401004 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401002:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401004:	4b1d      	ldr	r3, [pc, #116]	; (40107c <SystemCoreClockUpdate+0x150>)
  401006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401008:	f003 0303 	and.w	r3, r3, #3
  40100c:	2b02      	cmp	r3, #2
  40100e:	d114      	bne.n	40103a <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401010:	4b1a      	ldr	r3, [pc, #104]	; (40107c <SystemCoreClockUpdate+0x150>)
  401012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401014:	4b1e      	ldr	r3, [pc, #120]	; (401090 <SystemCoreClockUpdate+0x164>)
  401016:	4013      	ands	r3, r2
  401018:	0c1b      	lsrs	r3, r3, #16
  40101a:	3301      	adds	r3, #1
  40101c:	4a19      	ldr	r2, [pc, #100]	; (401084 <SystemCoreClockUpdate+0x158>)
  40101e:	6812      	ldr	r2, [r2, #0]
  401020:	fb02 f303 	mul.w	r3, r2, r3
  401024:	4a17      	ldr	r2, [pc, #92]	; (401084 <SystemCoreClockUpdate+0x158>)
  401026:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401028:	4b14      	ldr	r3, [pc, #80]	; (40107c <SystemCoreClockUpdate+0x150>)
  40102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40102c:	b2db      	uxtb	r3, r3
  40102e:	4a15      	ldr	r2, [pc, #84]	; (401084 <SystemCoreClockUpdate+0x158>)
  401030:	6812      	ldr	r2, [r2, #0]
  401032:	fbb2 f3f3 	udiv	r3, r2, r3
  401036:	4a13      	ldr	r2, [pc, #76]	; (401084 <SystemCoreClockUpdate+0x158>)
  401038:	6013      	str	r3, [r2, #0]
      }
    break;
  40103a:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40103c:	4b0f      	ldr	r3, [pc, #60]	; (40107c <SystemCoreClockUpdate+0x150>)
  40103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401040:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401044:	2b70      	cmp	r3, #112	; 0x70
  401046:	d108      	bne.n	40105a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401048:	4b0e      	ldr	r3, [pc, #56]	; (401084 <SystemCoreClockUpdate+0x158>)
  40104a:	681b      	ldr	r3, [r3, #0]
  40104c:	4a11      	ldr	r2, [pc, #68]	; (401094 <SystemCoreClockUpdate+0x168>)
  40104e:	fba2 2303 	umull	r2, r3, r2, r3
  401052:	085b      	lsrs	r3, r3, #1
  401054:	4a0b      	ldr	r2, [pc, #44]	; (401084 <SystemCoreClockUpdate+0x158>)
  401056:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401058:	e00a      	b.n	401070 <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40105a:	4b08      	ldr	r3, [pc, #32]	; (40107c <SystemCoreClockUpdate+0x150>)
  40105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40105e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401062:	091b      	lsrs	r3, r3, #4
  401064:	4a07      	ldr	r2, [pc, #28]	; (401084 <SystemCoreClockUpdate+0x158>)
  401066:	6812      	ldr	r2, [r2, #0]
  401068:	fa22 f303 	lsr.w	r3, r2, r3
  40106c:	4a05      	ldr	r2, [pc, #20]	; (401084 <SystemCoreClockUpdate+0x158>)
  40106e:	6013      	str	r3, [r2, #0]
  }
}
  401070:	bf00      	nop
  401072:	46bd      	mov	sp, r7
  401074:	f85d 7b04 	ldr.w	r7, [sp], #4
  401078:	4770      	bx	lr
  40107a:	bf00      	nop
  40107c:	400e0600 	.word	0x400e0600
  401080:	400e1810 	.word	0x400e1810
  401084:	20400010 	.word	0x20400010
  401088:	00b71b00 	.word	0x00b71b00
  40108c:	003d0900 	.word	0x003d0900
  401090:	07ff0000 	.word	0x07ff0000
  401094:	aaaaaaab 	.word	0xaaaaaaab

00401098 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401098:	b480      	push	{r7}
  40109a:	b083      	sub	sp, #12
  40109c:	af00      	add	r7, sp, #0
  40109e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4010a0:	687b      	ldr	r3, [r7, #4]
  4010a2:	4a19      	ldr	r2, [pc, #100]	; (401108 <system_init_flash+0x70>)
  4010a4:	4293      	cmp	r3, r2
  4010a6:	d804      	bhi.n	4010b2 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4010a8:	4b18      	ldr	r3, [pc, #96]	; (40110c <system_init_flash+0x74>)
  4010aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4010ae:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4010b0:	e023      	b.n	4010fa <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4010b2:	687b      	ldr	r3, [r7, #4]
  4010b4:	4a16      	ldr	r2, [pc, #88]	; (401110 <system_init_flash+0x78>)
  4010b6:	4293      	cmp	r3, r2
  4010b8:	d803      	bhi.n	4010c2 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4010ba:	4b14      	ldr	r3, [pc, #80]	; (40110c <system_init_flash+0x74>)
  4010bc:	4a15      	ldr	r2, [pc, #84]	; (401114 <system_init_flash+0x7c>)
  4010be:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4010c0:	e01b      	b.n	4010fa <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	4a14      	ldr	r2, [pc, #80]	; (401118 <system_init_flash+0x80>)
  4010c6:	4293      	cmp	r3, r2
  4010c8:	d803      	bhi.n	4010d2 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4010ca:	4b10      	ldr	r3, [pc, #64]	; (40110c <system_init_flash+0x74>)
  4010cc:	4a13      	ldr	r2, [pc, #76]	; (40111c <system_init_flash+0x84>)
  4010ce:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4010d0:	e013      	b.n	4010fa <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4010d2:	687b      	ldr	r3, [r7, #4]
  4010d4:	4a12      	ldr	r2, [pc, #72]	; (401120 <system_init_flash+0x88>)
  4010d6:	4293      	cmp	r3, r2
  4010d8:	d803      	bhi.n	4010e2 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4010da:	4b0c      	ldr	r3, [pc, #48]	; (40110c <system_init_flash+0x74>)
  4010dc:	4a11      	ldr	r2, [pc, #68]	; (401124 <system_init_flash+0x8c>)
  4010de:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4010e0:	e00b      	b.n	4010fa <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4010e2:	687b      	ldr	r3, [r7, #4]
  4010e4:	4a10      	ldr	r2, [pc, #64]	; (401128 <system_init_flash+0x90>)
  4010e6:	4293      	cmp	r3, r2
  4010e8:	d804      	bhi.n	4010f4 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4010ea:	4b08      	ldr	r3, [pc, #32]	; (40110c <system_init_flash+0x74>)
  4010ec:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4010f0:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4010f2:	e002      	b.n	4010fa <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4010f4:	4b05      	ldr	r3, [pc, #20]	; (40110c <system_init_flash+0x74>)
  4010f6:	4a0d      	ldr	r2, [pc, #52]	; (40112c <system_init_flash+0x94>)
  4010f8:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4010fa:	bf00      	nop
  4010fc:	370c      	adds	r7, #12
  4010fe:	46bd      	mov	sp, r7
  401100:	f85d 7b04 	ldr.w	r7, [sp], #4
  401104:	4770      	bx	lr
  401106:	bf00      	nop
  401108:	01312cff 	.word	0x01312cff
  40110c:	400e0c00 	.word	0x400e0c00
  401110:	026259ff 	.word	0x026259ff
  401114:	04000100 	.word	0x04000100
  401118:	039386ff 	.word	0x039386ff
  40111c:	04000200 	.word	0x04000200
  401120:	04c4b3ff 	.word	0x04c4b3ff
  401124:	04000300 	.word	0x04000300
  401128:	05f5e0ff 	.word	0x05f5e0ff
  40112c:	04000500 	.word	0x04000500

00401130 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401130:	b480      	push	{r7}
  401132:	b083      	sub	sp, #12
  401134:	af00      	add	r7, sp, #0
  401136:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401138:	687b      	ldr	r3, [r7, #4]
  40113a:	2b07      	cmp	r3, #7
  40113c:	d825      	bhi.n	40118a <osc_get_rate+0x5a>
  40113e:	a201      	add	r2, pc, #4	; (adr r2, 401144 <osc_get_rate+0x14>)
  401140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401144:	00401165 	.word	0x00401165
  401148:	0040116b 	.word	0x0040116b
  40114c:	00401171 	.word	0x00401171
  401150:	00401177 	.word	0x00401177
  401154:	0040117b 	.word	0x0040117b
  401158:	0040117f 	.word	0x0040117f
  40115c:	00401183 	.word	0x00401183
  401160:	00401187 	.word	0x00401187
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401164:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401168:	e010      	b.n	40118c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40116a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40116e:	e00d      	b.n	40118c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401174:	e00a      	b.n	40118c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401176:	4b08      	ldr	r3, [pc, #32]	; (401198 <osc_get_rate+0x68>)
  401178:	e008      	b.n	40118c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40117a:	4b08      	ldr	r3, [pc, #32]	; (40119c <osc_get_rate+0x6c>)
  40117c:	e006      	b.n	40118c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40117e:	4b08      	ldr	r3, [pc, #32]	; (4011a0 <osc_get_rate+0x70>)
  401180:	e004      	b.n	40118c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401182:	4b07      	ldr	r3, [pc, #28]	; (4011a0 <osc_get_rate+0x70>)
  401184:	e002      	b.n	40118c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401186:	4b06      	ldr	r3, [pc, #24]	; (4011a0 <osc_get_rate+0x70>)
  401188:	e000      	b.n	40118c <osc_get_rate+0x5c>
	}

	return 0;
  40118a:	2300      	movs	r3, #0
}
  40118c:	4618      	mov	r0, r3
  40118e:	370c      	adds	r7, #12
  401190:	46bd      	mov	sp, r7
  401192:	f85d 7b04 	ldr.w	r7, [sp], #4
  401196:	4770      	bx	lr
  401198:	003d0900 	.word	0x003d0900
  40119c:	007a1200 	.word	0x007a1200
  4011a0:	00b71b00 	.word	0x00b71b00

004011a4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4011a4:	b580      	push	{r7, lr}
  4011a6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4011a8:	2006      	movs	r0, #6
  4011aa:	4b05      	ldr	r3, [pc, #20]	; (4011c0 <sysclk_get_main_hz+0x1c>)
  4011ac:	4798      	blx	r3
  4011ae:	4602      	mov	r2, r0
  4011b0:	4613      	mov	r3, r2
  4011b2:	009b      	lsls	r3, r3, #2
  4011b4:	4413      	add	r3, r2
  4011b6:	009a      	lsls	r2, r3, #2
  4011b8:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4011ba:	4618      	mov	r0, r3
  4011bc:	bd80      	pop	{r7, pc}
  4011be:	bf00      	nop
  4011c0:	00401131 	.word	0x00401131

004011c4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4011c4:	b580      	push	{r7, lr}
  4011c6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4011c8:	4b02      	ldr	r3, [pc, #8]	; (4011d4 <sysclk_get_cpu_hz+0x10>)
  4011ca:	4798      	blx	r3
  4011cc:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4011ce:	4618      	mov	r0, r3
  4011d0:	bd80      	pop	{r7, pc}
  4011d2:	bf00      	nop
  4011d4:	004011a5 	.word	0x004011a5

004011d8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4011d8:	b580      	push	{r7, lr}
  4011da:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4011dc:	4b02      	ldr	r3, [pc, #8]	; (4011e8 <sysclk_get_peripheral_hz+0x10>)
  4011de:	4798      	blx	r3
  4011e0:	4603      	mov	r3, r0
  4011e2:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  4011e4:	4618      	mov	r0, r3
  4011e6:	bd80      	pop	{r7, pc}
  4011e8:	004011a5 	.word	0x004011a5

004011ec <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4011ec:	b580      	push	{r7, lr}
  4011ee:	b082      	sub	sp, #8
  4011f0:	af00      	add	r7, sp, #0
  4011f2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4011f4:	6878      	ldr	r0, [r7, #4]
  4011f6:	4b03      	ldr	r3, [pc, #12]	; (401204 <sysclk_enable_peripheral_clock+0x18>)
  4011f8:	4798      	blx	r3
}
  4011fa:	bf00      	nop
  4011fc:	3708      	adds	r7, #8
  4011fe:	46bd      	mov	sp, r7
  401200:	bd80      	pop	{r7, pc}
  401202:	bf00      	nop
  401204:	00400a49 	.word	0x00400a49

00401208 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401208:	b580      	push	{r7, lr}
  40120a:	b082      	sub	sp, #8
  40120c:	af00      	add	r7, sp, #0
  40120e:	6078      	str	r0, [r7, #4]
  401210:	460b      	mov	r3, r1
  401212:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401214:	687b      	ldr	r3, [r7, #4]
  401216:	4a36      	ldr	r2, [pc, #216]	; (4012f0 <usart_serial_putchar+0xe8>)
  401218:	4293      	cmp	r3, r2
  40121a:	d10a      	bne.n	401232 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40121c:	bf00      	nop
  40121e:	78fb      	ldrb	r3, [r7, #3]
  401220:	4619      	mov	r1, r3
  401222:	6878      	ldr	r0, [r7, #4]
  401224:	4b33      	ldr	r3, [pc, #204]	; (4012f4 <usart_serial_putchar+0xec>)
  401226:	4798      	blx	r3
  401228:	4603      	mov	r3, r0
  40122a:	2b00      	cmp	r3, #0
  40122c:	d1f7      	bne.n	40121e <usart_serial_putchar+0x16>
		return 1;
  40122e:	2301      	movs	r3, #1
  401230:	e05a      	b.n	4012e8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401232:	687b      	ldr	r3, [r7, #4]
  401234:	4a30      	ldr	r2, [pc, #192]	; (4012f8 <usart_serial_putchar+0xf0>)
  401236:	4293      	cmp	r3, r2
  401238:	d10a      	bne.n	401250 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40123a:	bf00      	nop
  40123c:	78fb      	ldrb	r3, [r7, #3]
  40123e:	4619      	mov	r1, r3
  401240:	6878      	ldr	r0, [r7, #4]
  401242:	4b2c      	ldr	r3, [pc, #176]	; (4012f4 <usart_serial_putchar+0xec>)
  401244:	4798      	blx	r3
  401246:	4603      	mov	r3, r0
  401248:	2b00      	cmp	r3, #0
  40124a:	d1f7      	bne.n	40123c <usart_serial_putchar+0x34>
		return 1;
  40124c:	2301      	movs	r3, #1
  40124e:	e04b      	b.n	4012e8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401250:	687b      	ldr	r3, [r7, #4]
  401252:	4a2a      	ldr	r2, [pc, #168]	; (4012fc <usart_serial_putchar+0xf4>)
  401254:	4293      	cmp	r3, r2
  401256:	d10a      	bne.n	40126e <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401258:	bf00      	nop
  40125a:	78fb      	ldrb	r3, [r7, #3]
  40125c:	4619      	mov	r1, r3
  40125e:	6878      	ldr	r0, [r7, #4]
  401260:	4b24      	ldr	r3, [pc, #144]	; (4012f4 <usart_serial_putchar+0xec>)
  401262:	4798      	blx	r3
  401264:	4603      	mov	r3, r0
  401266:	2b00      	cmp	r3, #0
  401268:	d1f7      	bne.n	40125a <usart_serial_putchar+0x52>
		return 1;
  40126a:	2301      	movs	r3, #1
  40126c:	e03c      	b.n	4012e8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40126e:	687b      	ldr	r3, [r7, #4]
  401270:	4a23      	ldr	r2, [pc, #140]	; (401300 <usart_serial_putchar+0xf8>)
  401272:	4293      	cmp	r3, r2
  401274:	d10a      	bne.n	40128c <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401276:	bf00      	nop
  401278:	78fb      	ldrb	r3, [r7, #3]
  40127a:	4619      	mov	r1, r3
  40127c:	6878      	ldr	r0, [r7, #4]
  40127e:	4b1d      	ldr	r3, [pc, #116]	; (4012f4 <usart_serial_putchar+0xec>)
  401280:	4798      	blx	r3
  401282:	4603      	mov	r3, r0
  401284:	2b00      	cmp	r3, #0
  401286:	d1f7      	bne.n	401278 <usart_serial_putchar+0x70>
		return 1;
  401288:	2301      	movs	r3, #1
  40128a:	e02d      	b.n	4012e8 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40128c:	687b      	ldr	r3, [r7, #4]
  40128e:	4a1d      	ldr	r2, [pc, #116]	; (401304 <usart_serial_putchar+0xfc>)
  401290:	4293      	cmp	r3, r2
  401292:	d10a      	bne.n	4012aa <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401294:	bf00      	nop
  401296:	78fb      	ldrb	r3, [r7, #3]
  401298:	4619      	mov	r1, r3
  40129a:	6878      	ldr	r0, [r7, #4]
  40129c:	4b1a      	ldr	r3, [pc, #104]	; (401308 <usart_serial_putchar+0x100>)
  40129e:	4798      	blx	r3
  4012a0:	4603      	mov	r3, r0
  4012a2:	2b00      	cmp	r3, #0
  4012a4:	d1f7      	bne.n	401296 <usart_serial_putchar+0x8e>
		return 1;
  4012a6:	2301      	movs	r3, #1
  4012a8:	e01e      	b.n	4012e8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4012aa:	687b      	ldr	r3, [r7, #4]
  4012ac:	4a17      	ldr	r2, [pc, #92]	; (40130c <usart_serial_putchar+0x104>)
  4012ae:	4293      	cmp	r3, r2
  4012b0:	d10a      	bne.n	4012c8 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4012b2:	bf00      	nop
  4012b4:	78fb      	ldrb	r3, [r7, #3]
  4012b6:	4619      	mov	r1, r3
  4012b8:	6878      	ldr	r0, [r7, #4]
  4012ba:	4b13      	ldr	r3, [pc, #76]	; (401308 <usart_serial_putchar+0x100>)
  4012bc:	4798      	blx	r3
  4012be:	4603      	mov	r3, r0
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	d1f7      	bne.n	4012b4 <usart_serial_putchar+0xac>
		return 1;
  4012c4:	2301      	movs	r3, #1
  4012c6:	e00f      	b.n	4012e8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	4a11      	ldr	r2, [pc, #68]	; (401310 <usart_serial_putchar+0x108>)
  4012cc:	4293      	cmp	r3, r2
  4012ce:	d10a      	bne.n	4012e6 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4012d0:	bf00      	nop
  4012d2:	78fb      	ldrb	r3, [r7, #3]
  4012d4:	4619      	mov	r1, r3
  4012d6:	6878      	ldr	r0, [r7, #4]
  4012d8:	4b0b      	ldr	r3, [pc, #44]	; (401308 <usart_serial_putchar+0x100>)
  4012da:	4798      	blx	r3
  4012dc:	4603      	mov	r3, r0
  4012de:	2b00      	cmp	r3, #0
  4012e0:	d1f7      	bne.n	4012d2 <usart_serial_putchar+0xca>
		return 1;
  4012e2:	2301      	movs	r3, #1
  4012e4:	e000      	b.n	4012e8 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4012e6:	2300      	movs	r3, #0
}
  4012e8:	4618      	mov	r0, r3
  4012ea:	3708      	adds	r7, #8
  4012ec:	46bd      	mov	sp, r7
  4012ee:	bd80      	pop	{r7, pc}
  4012f0:	400e0800 	.word	0x400e0800
  4012f4:	00400af5 	.word	0x00400af5
  4012f8:	400e0a00 	.word	0x400e0a00
  4012fc:	400e1a00 	.word	0x400e1a00
  401300:	400e1c00 	.word	0x400e1c00
  401304:	40024000 	.word	0x40024000
  401308:	00400d65 	.word	0x00400d65
  40130c:	40028000 	.word	0x40028000
  401310:	4002c000 	.word	0x4002c000

00401314 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401314:	b580      	push	{r7, lr}
  401316:	b084      	sub	sp, #16
  401318:	af00      	add	r7, sp, #0
  40131a:	6078      	str	r0, [r7, #4]
  40131c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40131e:	2300      	movs	r3, #0
  401320:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401322:	687b      	ldr	r3, [r7, #4]
  401324:	4a34      	ldr	r2, [pc, #208]	; (4013f8 <usart_serial_getchar+0xe4>)
  401326:	4293      	cmp	r3, r2
  401328:	d107      	bne.n	40133a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40132a:	bf00      	nop
  40132c:	6839      	ldr	r1, [r7, #0]
  40132e:	6878      	ldr	r0, [r7, #4]
  401330:	4b32      	ldr	r3, [pc, #200]	; (4013fc <usart_serial_getchar+0xe8>)
  401332:	4798      	blx	r3
  401334:	4603      	mov	r3, r0
  401336:	2b00      	cmp	r3, #0
  401338:	d1f8      	bne.n	40132c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40133a:	687b      	ldr	r3, [r7, #4]
  40133c:	4a30      	ldr	r2, [pc, #192]	; (401400 <usart_serial_getchar+0xec>)
  40133e:	4293      	cmp	r3, r2
  401340:	d107      	bne.n	401352 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401342:	bf00      	nop
  401344:	6839      	ldr	r1, [r7, #0]
  401346:	6878      	ldr	r0, [r7, #4]
  401348:	4b2c      	ldr	r3, [pc, #176]	; (4013fc <usart_serial_getchar+0xe8>)
  40134a:	4798      	blx	r3
  40134c:	4603      	mov	r3, r0
  40134e:	2b00      	cmp	r3, #0
  401350:	d1f8      	bne.n	401344 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401352:	687b      	ldr	r3, [r7, #4]
  401354:	4a2b      	ldr	r2, [pc, #172]	; (401404 <usart_serial_getchar+0xf0>)
  401356:	4293      	cmp	r3, r2
  401358:	d107      	bne.n	40136a <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  40135a:	bf00      	nop
  40135c:	6839      	ldr	r1, [r7, #0]
  40135e:	6878      	ldr	r0, [r7, #4]
  401360:	4b26      	ldr	r3, [pc, #152]	; (4013fc <usart_serial_getchar+0xe8>)
  401362:	4798      	blx	r3
  401364:	4603      	mov	r3, r0
  401366:	2b00      	cmp	r3, #0
  401368:	d1f8      	bne.n	40135c <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40136a:	687b      	ldr	r3, [r7, #4]
  40136c:	4a26      	ldr	r2, [pc, #152]	; (401408 <usart_serial_getchar+0xf4>)
  40136e:	4293      	cmp	r3, r2
  401370:	d107      	bne.n	401382 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401372:	bf00      	nop
  401374:	6839      	ldr	r1, [r7, #0]
  401376:	6878      	ldr	r0, [r7, #4]
  401378:	4b20      	ldr	r3, [pc, #128]	; (4013fc <usart_serial_getchar+0xe8>)
  40137a:	4798      	blx	r3
  40137c:	4603      	mov	r3, r0
  40137e:	2b00      	cmp	r3, #0
  401380:	d1f8      	bne.n	401374 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401382:	687b      	ldr	r3, [r7, #4]
  401384:	4a21      	ldr	r2, [pc, #132]	; (40140c <usart_serial_getchar+0xf8>)
  401386:	4293      	cmp	r3, r2
  401388:	d10d      	bne.n	4013a6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  40138a:	bf00      	nop
  40138c:	f107 030c 	add.w	r3, r7, #12
  401390:	4619      	mov	r1, r3
  401392:	6878      	ldr	r0, [r7, #4]
  401394:	4b1e      	ldr	r3, [pc, #120]	; (401410 <usart_serial_getchar+0xfc>)
  401396:	4798      	blx	r3
  401398:	4603      	mov	r3, r0
  40139a:	2b00      	cmp	r3, #0
  40139c:	d1f6      	bne.n	40138c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  40139e:	68fb      	ldr	r3, [r7, #12]
  4013a0:	b2da      	uxtb	r2, r3
  4013a2:	683b      	ldr	r3, [r7, #0]
  4013a4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4013a6:	687b      	ldr	r3, [r7, #4]
  4013a8:	4a1a      	ldr	r2, [pc, #104]	; (401414 <usart_serial_getchar+0x100>)
  4013aa:	4293      	cmp	r3, r2
  4013ac:	d10d      	bne.n	4013ca <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  4013ae:	bf00      	nop
  4013b0:	f107 030c 	add.w	r3, r7, #12
  4013b4:	4619      	mov	r1, r3
  4013b6:	6878      	ldr	r0, [r7, #4]
  4013b8:	4b15      	ldr	r3, [pc, #84]	; (401410 <usart_serial_getchar+0xfc>)
  4013ba:	4798      	blx	r3
  4013bc:	4603      	mov	r3, r0
  4013be:	2b00      	cmp	r3, #0
  4013c0:	d1f6      	bne.n	4013b0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  4013c2:	68fb      	ldr	r3, [r7, #12]
  4013c4:	b2da      	uxtb	r2, r3
  4013c6:	683b      	ldr	r3, [r7, #0]
  4013c8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4013ca:	687b      	ldr	r3, [r7, #4]
  4013cc:	4a12      	ldr	r2, [pc, #72]	; (401418 <usart_serial_getchar+0x104>)
  4013ce:	4293      	cmp	r3, r2
  4013d0:	d10d      	bne.n	4013ee <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  4013d2:	bf00      	nop
  4013d4:	f107 030c 	add.w	r3, r7, #12
  4013d8:	4619      	mov	r1, r3
  4013da:	6878      	ldr	r0, [r7, #4]
  4013dc:	4b0c      	ldr	r3, [pc, #48]	; (401410 <usart_serial_getchar+0xfc>)
  4013de:	4798      	blx	r3
  4013e0:	4603      	mov	r3, r0
  4013e2:	2b00      	cmp	r3, #0
  4013e4:	d1f6      	bne.n	4013d4 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4013e6:	68fb      	ldr	r3, [r7, #12]
  4013e8:	b2da      	uxtb	r2, r3
  4013ea:	683b      	ldr	r3, [r7, #0]
  4013ec:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4013ee:	bf00      	nop
  4013f0:	3710      	adds	r7, #16
  4013f2:	46bd      	mov	sp, r7
  4013f4:	bd80      	pop	{r7, pc}
  4013f6:	bf00      	nop
  4013f8:	400e0800 	.word	0x400e0800
  4013fc:	00400b25 	.word	0x00400b25
  401400:	400e0a00 	.word	0x400e0a00
  401404:	400e1a00 	.word	0x400e1a00
  401408:	400e1c00 	.word	0x400e1c00
  40140c:	40024000 	.word	0x40024000
  401410:	00400d99 	.word	0x00400d99
  401414:	40028000 	.word	0x40028000
  401418:	4002c000 	.word	0x4002c000

0040141c <USART1_init>:
/************************************************************************/

/**
 * \brief Configure USART peripheral
 */
static void USART1_init(void){
  40141c:	b580      	push	{r7, lr}
  40141e:	b086      	sub	sp, #24
  401420:	af00      	add	r7, sp, #0

  /* Configura USART1 Pinos */
  sysclk_enable_peripheral_clock(ID_PIOB);
  401422:	200b      	movs	r0, #11
  401424:	4b1f      	ldr	r3, [pc, #124]	; (4014a4 <USART1_init+0x88>)
  401426:	4798      	blx	r3
  sysclk_enable_peripheral_clock(ID_PIOA);
  401428:	200a      	movs	r0, #10
  40142a:	4b1e      	ldr	r3, [pc, #120]	; (4014a4 <USART1_init+0x88>)
  40142c:	4798      	blx	r3
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  40142e:	2210      	movs	r2, #16
  401430:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401434:	481c      	ldr	r0, [pc, #112]	; (4014a8 <USART1_init+0x8c>)
  401436:	4b1d      	ldr	r3, [pc, #116]	; (4014ac <USART1_init+0x90>)
  401438:	4798      	blx	r3
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  40143a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40143e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401442:	481b      	ldr	r0, [pc, #108]	; (4014b0 <USART1_init+0x94>)
  401444:	4b19      	ldr	r3, [pc, #100]	; (4014ac <USART1_init+0x90>)
  401446:	4798      	blx	r3
  MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401448:	4a1a      	ldr	r2, [pc, #104]	; (4014b4 <USART1_init+0x98>)
  40144a:	4b1a      	ldr	r3, [pc, #104]	; (4014b4 <USART1_init+0x98>)
  40144c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  401450:	f043 0310 	orr.w	r3, r3, #16
  401454:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

  /* Configura opcoes USART */
  const sam_usart_opt_t usart_settings = {
  401458:	463b      	mov	r3, r7
  40145a:	2200      	movs	r2, #0
  40145c:	601a      	str	r2, [r3, #0]
  40145e:	605a      	str	r2, [r3, #4]
  401460:	609a      	str	r2, [r3, #8]
  401462:	60da      	str	r2, [r3, #12]
  401464:	611a      	str	r2, [r3, #16]
  401466:	615a      	str	r2, [r3, #20]
  401468:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40146c:	603b      	str	r3, [r7, #0]
  40146e:	23c0      	movs	r3, #192	; 0xc0
  401470:	607b      	str	r3, [r7, #4]
  401472:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401476:	60bb      	str	r3, [r7, #8]
    .stop_bits    = US_MR_NBSTOP_1_BIT    ,
    .channel_mode = US_MR_CHMODE_NORMAL
  };

  /* Ativa Clock periferico USART0 */
  sysclk_enable_peripheral_clock(USART_COM_ID);
  401478:	200e      	movs	r0, #14
  40147a:	4b0a      	ldr	r3, [pc, #40]	; (4014a4 <USART1_init+0x88>)
  40147c:	4798      	blx	r3

  /* Configura USART para operar em modo RS232 */
  usart_init_rs232(USART_COM, &usart_settings, sysclk_get_peripheral_hz());
  40147e:	4b0e      	ldr	r3, [pc, #56]	; (4014b8 <USART1_init+0x9c>)
  401480:	4798      	blx	r3
  401482:	4602      	mov	r2, r0
  401484:	463b      	mov	r3, r7
  401486:	4619      	mov	r1, r3
  401488:	480c      	ldr	r0, [pc, #48]	; (4014bc <USART1_init+0xa0>)
  40148a:	4b0d      	ldr	r3, [pc, #52]	; (4014c0 <USART1_init+0xa4>)
  40148c:	4798      	blx	r3

  /* Enable the receiver and transmitter. */
	usart_enable_tx(USART_COM);
  40148e:	480b      	ldr	r0, [pc, #44]	; (4014bc <USART1_init+0xa0>)
  401490:	4b0c      	ldr	r3, [pc, #48]	; (4014c4 <USART1_init+0xa8>)
  401492:	4798      	blx	r3
	usart_enable_rx(USART_COM);
  401494:	4809      	ldr	r0, [pc, #36]	; (4014bc <USART1_init+0xa0>)
  401496:	4b0c      	ldr	r3, [pc, #48]	; (4014c8 <USART1_init+0xac>)
  401498:	4798      	blx	r3
}
  40149a:	bf00      	nop
  40149c:	3718      	adds	r7, #24
  40149e:	46bd      	mov	sp, r7
  4014a0:	bd80      	pop	{r7, pc}
  4014a2:	bf00      	nop
  4014a4:	004011ed 	.word	0x004011ed
  4014a8:	400e1000 	.word	0x400e1000
  4014ac:	00400519 	.word	0x00400519
  4014b0:	400e0e00 	.word	0x400e0e00
  4014b4:	40088000 	.word	0x40088000
  4014b8:	004011d9 	.word	0x004011d9
  4014bc:	40028000 	.word	0x40028000
  4014c0:	00400c39 	.word	0x00400c39
  4014c4:	00400cbd 	.word	0x00400cbd
  4014c8:	00400cf5 	.word	0x00400cf5

004014cc <usart_puts>:


/**
 *  Envia para o UART uma string
 */
uint32_t usart_puts(uint8_t *pstring){
  4014cc:	b580      	push	{r7, lr}
  4014ce:	b084      	sub	sp, #16
  4014d0:	af00      	add	r7, sp, #0
  4014d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  4014d4:	2300      	movs	r3, #0
  4014d6:	60fb      	str	r3, [r7, #12]

  while(*(pstring + i)){
  4014d8:	e010      	b.n	4014fc <usart_puts+0x30>
    usart_serial_putchar(USART_COM, *(pstring+i++));
  4014da:	68fb      	ldr	r3, [r7, #12]
  4014dc:	1c5a      	adds	r2, r3, #1
  4014de:	60fa      	str	r2, [r7, #12]
  4014e0:	687a      	ldr	r2, [r7, #4]
  4014e2:	4413      	add	r3, r2
  4014e4:	781b      	ldrb	r3, [r3, #0]
  4014e6:	4619      	mov	r1, r3
  4014e8:	480a      	ldr	r0, [pc, #40]	; (401514 <usart_puts+0x48>)
  4014ea:	4b0b      	ldr	r3, [pc, #44]	; (401518 <usart_puts+0x4c>)
  4014ec:	4798      	blx	r3
    while(!uart_is_tx_empty(USART_COM)){};
  4014ee:	bf00      	nop
  4014f0:	4808      	ldr	r0, [pc, #32]	; (401514 <usart_puts+0x48>)
  4014f2:	4b0a      	ldr	r3, [pc, #40]	; (40151c <usart_puts+0x50>)
  4014f4:	4798      	blx	r3
  4014f6:	4603      	mov	r3, r0
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d0f9      	beq.n	4014f0 <usart_puts+0x24>
 *  Envia para o UART uma string
 */
uint32_t usart_puts(uint8_t *pstring){
  uint32_t i = 0 ;

  while(*(pstring + i)){
  4014fc:	687a      	ldr	r2, [r7, #4]
  4014fe:	68fb      	ldr	r3, [r7, #12]
  401500:	4413      	add	r3, r2
  401502:	781b      	ldrb	r3, [r3, #0]
  401504:	2b00      	cmp	r3, #0
  401506:	d1e8      	bne.n	4014da <usart_puts+0xe>
    usart_serial_putchar(USART_COM, *(pstring+i++));
    while(!uart_is_tx_empty(USART_COM)){};
  }
  return(i);
  401508:	68fb      	ldr	r3, [r7, #12]
}
  40150a:	4618      	mov	r0, r3
  40150c:	3710      	adds	r7, #16
  40150e:	46bd      	mov	sp, r7
  401510:	bd80      	pop	{r7, pc}
  401512:	bf00      	nop
  401514:	40028000 	.word	0x40028000
  401518:	00401209 	.word	0x00401209
  40151c:	00400acd 	.word	0x00400acd

00401520 <usart_gets>:

/**
 * Busca do UART uma mensagem enviada pelo computador terminada em \n
 */
uint32_t usart_gets(uint8_t *pstring){
  401520:	b580      	push	{r7, lr}
  401522:	b084      	sub	sp, #16
  401524:	af00      	add	r7, sp, #0
  401526:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  401528:	2300      	movs	r3, #0
  40152a:	60fb      	str	r3, [r7, #12]
  usart_serial_getchar(USART_COM, (pstring+i));
  40152c:	687a      	ldr	r2, [r7, #4]
  40152e:	68fb      	ldr	r3, [r7, #12]
  401530:	4413      	add	r3, r2
  401532:	4619      	mov	r1, r3
  401534:	480f      	ldr	r0, [pc, #60]	; (401574 <usart_gets+0x54>)
  401536:	4b10      	ldr	r3, [pc, #64]	; (401578 <usart_gets+0x58>)
  401538:	4798      	blx	r3
  while(*(pstring+i) != '\n'){
  40153a:	e009      	b.n	401550 <usart_gets+0x30>
    usart_serial_getchar(USART_COM, (pstring+(++i)));
  40153c:	68fb      	ldr	r3, [r7, #12]
  40153e:	3301      	adds	r3, #1
  401540:	60fb      	str	r3, [r7, #12]
  401542:	687a      	ldr	r2, [r7, #4]
  401544:	68fb      	ldr	r3, [r7, #12]
  401546:	4413      	add	r3, r2
  401548:	4619      	mov	r1, r3
  40154a:	480a      	ldr	r0, [pc, #40]	; (401574 <usart_gets+0x54>)
  40154c:	4b0a      	ldr	r3, [pc, #40]	; (401578 <usart_gets+0x58>)
  40154e:	4798      	blx	r3
 * Busca do UART uma mensagem enviada pelo computador terminada em \n
 */
uint32_t usart_gets(uint8_t *pstring){
  uint32_t i = 0 ;
  usart_serial_getchar(USART_COM, (pstring+i));
  while(*(pstring+i) != '\n'){
  401550:	687a      	ldr	r2, [r7, #4]
  401552:	68fb      	ldr	r3, [r7, #12]
  401554:	4413      	add	r3, r2
  401556:	781b      	ldrb	r3, [r3, #0]
  401558:	2b0a      	cmp	r3, #10
  40155a:	d1ef      	bne.n	40153c <usart_gets+0x1c>
    usart_serial_getchar(USART_COM, (pstring+(++i)));
  }
  *(pstring+i+1)= 0x00;
  40155c:	68fb      	ldr	r3, [r7, #12]
  40155e:	3301      	adds	r3, #1
  401560:	687a      	ldr	r2, [r7, #4]
  401562:	4413      	add	r3, r2
  401564:	2200      	movs	r2, #0
  401566:	701a      	strb	r2, [r3, #0]
  return(i);
  401568:	68fb      	ldr	r3, [r7, #12]

}
  40156a:	4618      	mov	r0, r3
  40156c:	3710      	adds	r7, #16
  40156e:	46bd      	mov	sp, r7
  401570:	bd80      	pop	{r7, pc}
  401572:	bf00      	nop
  401574:	40028000 	.word	0x40028000
  401578:	00401315 	.word	0x00401315

0040157c <main>:
};

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  40157c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401580:	af00      	add	r7, sp, #0
	/* Initialize the SAM system */
	sysclk_init();
  401582:	4b30      	ldr	r3, [pc, #192]	; (401644 <main+0xc8>)
  401584:	4798      	blx	r3

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401586:	4b30      	ldr	r3, [pc, #192]	; (401648 <main+0xcc>)
  401588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40158c:	605a      	str	r2, [r3, #4]

  /** Inicializa USART */
  USART1_init();
  40158e:	4b2f      	ldr	r3, [pc, #188]	; (40164c <main+0xd0>)
  401590:	4798      	blx	r3
  
  //led_init(1);
  PMC->PMC_PCER0 = (1<<LED_PIO_ID);
  401592:	4b2f      	ldr	r3, [pc, #188]	; (401650 <main+0xd4>)
  401594:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401598:	611a      	str	r2, [r3, #16]
  PIOC->PIO_OER = (1 << 8);
  40159a:	4b2e      	ldr	r3, [pc, #184]	; (401654 <main+0xd8>)
  40159c:	f44f 7280 	mov.w	r2, #256	; 0x100
  4015a0:	611a      	str	r2, [r3, #16]
  PIOC->PIO_PER = (1 << 8);
  4015a2:	4b2c      	ldr	r3, [pc, #176]	; (401654 <main+0xd8>)
  4015a4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4015a8:	601a      	str	r2, [r3, #0]
  PIOC->PIO_CODR =  (1 << 8);
  4015aa:	4b2a      	ldr	r3, [pc, #168]	; (401654 <main+0xd8>)
  4015ac:	f44f 7280 	mov.w	r2, #256	; 0x100
  4015b0:	635a      	str	r2, [r3, #52]	; 0x34

  /** Super loop */
	while (1) {
    usart_puts("Menu .... \n");
  4015b2:	4829      	ldr	r0, [pc, #164]	; (401658 <main+0xdc>)
  4015b4:	4b29      	ldr	r3, [pc, #164]	; (40165c <main+0xe0>)
  4015b6:	4798      	blx	r3
	usart_gets(buffer);
  4015b8:	4829      	ldr	r0, [pc, #164]	; (401660 <main+0xe4>)
  4015ba:	4b2a      	ldr	r3, [pc, #168]	; (401664 <main+0xe8>)
  4015bc:	4798      	blx	r3
	usart_puts(buffer);
  4015be:	4828      	ldr	r0, [pc, #160]	; (401660 <main+0xe4>)
  4015c0:	4b26      	ldr	r3, [pc, #152]	; (40165c <main+0xe0>)
  4015c2:	4798      	blx	r3
	if(buffer[0]=='m'){
  4015c4:	4b26      	ldr	r3, [pc, #152]	; (401660 <main+0xe4>)
  4015c6:	781b      	ldrb	r3, [r3, #0]
  4015c8:	2b6d      	cmp	r3, #109	; 0x6d
  4015ca:	d103      	bne.n	4015d4 <main+0x58>
		PIOC->PIO_SODR = (1 << 8);
  4015cc:	4b21      	ldr	r3, [pc, #132]	; (401654 <main+0xd8>)
  4015ce:	f44f 7280 	mov.w	r2, #256	; 0x100
  4015d2:	631a      	str	r2, [r3, #48]	; 0x30
	}
    delay_s(1);
  4015d4:	4b24      	ldr	r3, [pc, #144]	; (401668 <main+0xec>)
  4015d6:	4798      	blx	r3
  4015d8:	4603      	mov	r3, r0
  4015da:	4618      	mov	r0, r3
  4015dc:	f04f 0100 	mov.w	r1, #0
  4015e0:	4602      	mov	r2, r0
  4015e2:	460b      	mov	r3, r1
  4015e4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  4015e8:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  4015ec:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  4015f0:	4652      	mov	r2, sl
  4015f2:	465b      	mov	r3, fp
  4015f4:	015d      	lsls	r5, r3, #5
  4015f6:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  4015fa:	0154      	lsls	r4, r2, #5
  4015fc:	1aa4      	subs	r4, r4, r2
  4015fe:	eb65 0503 	sbc.w	r5, r5, r3
  401602:	1824      	adds	r4, r4, r0
  401604:	eb45 0501 	adc.w	r5, r5, r1
  401608:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  40160c:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  401610:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  401614:	4644      	mov	r4, r8
  401616:	464d      	mov	r5, r9
  401618:	4620      	mov	r0, r4
  40161a:	4629      	mov	r1, r5
  40161c:	f241 722b 	movw	r2, #5931	; 0x172b
  401620:	f04f 0300 	mov.w	r3, #0
  401624:	1880      	adds	r0, r0, r2
  401626:	eb41 0103 	adc.w	r1, r1, r3
  40162a:	4e10      	ldr	r6, [pc, #64]	; (40166c <main+0xf0>)
  40162c:	f241 722c 	movw	r2, #5932	; 0x172c
  401630:	f04f 0300 	mov.w	r3, #0
  401634:	47b0      	blx	r6
  401636:	4602      	mov	r2, r0
  401638:	460b      	mov	r3, r1
  40163a:	4613      	mov	r3, r2
  40163c:	4618      	mov	r0, r3
  40163e:	4b0c      	ldr	r3, [pc, #48]	; (401670 <main+0xf4>)
  401640:	4798      	blx	r3
	}
  401642:	e7b6      	b.n	4015b2 <main+0x36>
  401644:	0040049d 	.word	0x0040049d
  401648:	400e1850 	.word	0x400e1850
  40164c:	0040141d 	.word	0x0040141d
  401650:	400e0600 	.word	0x400e0600
  401654:	400e1200 	.word	0x400e1200
  401658:	00401ac8 	.word	0x00401ac8
  40165c:	004014cd 	.word	0x004014cd
  401660:	204004d0 	.word	0x204004d0
  401664:	00401521 	.word	0x00401521
  401668:	004011c5 	.word	0x004011c5
  40166c:	00401675 	.word	0x00401675
  401670:	20400001 	.word	0x20400001

00401674 <__aeabi_uldivmod>:
  401674:	b953      	cbnz	r3, 40168c <__aeabi_uldivmod+0x18>
  401676:	b94a      	cbnz	r2, 40168c <__aeabi_uldivmod+0x18>
  401678:	2900      	cmp	r1, #0
  40167a:	bf08      	it	eq
  40167c:	2800      	cmpeq	r0, #0
  40167e:	bf1c      	itt	ne
  401680:	f04f 31ff 	movne.w	r1, #4294967295
  401684:	f04f 30ff 	movne.w	r0, #4294967295
  401688:	f000 b97e 	b.w	401988 <__aeabi_idiv0>
  40168c:	f1ad 0c08 	sub.w	ip, sp, #8
  401690:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401694:	f000 f806 	bl	4016a4 <__udivmoddi4>
  401698:	f8dd e004 	ldr.w	lr, [sp, #4]
  40169c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4016a0:	b004      	add	sp, #16
  4016a2:	4770      	bx	lr

004016a4 <__udivmoddi4>:
  4016a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4016a8:	468c      	mov	ip, r1
  4016aa:	460e      	mov	r6, r1
  4016ac:	4604      	mov	r4, r0
  4016ae:	9d08      	ldr	r5, [sp, #32]
  4016b0:	2b00      	cmp	r3, #0
  4016b2:	d150      	bne.n	401756 <__udivmoddi4+0xb2>
  4016b4:	428a      	cmp	r2, r1
  4016b6:	4617      	mov	r7, r2
  4016b8:	d96c      	bls.n	401794 <__udivmoddi4+0xf0>
  4016ba:	fab2 fe82 	clz	lr, r2
  4016be:	f1be 0f00 	cmp.w	lr, #0
  4016c2:	d00b      	beq.n	4016dc <__udivmoddi4+0x38>
  4016c4:	f1ce 0420 	rsb	r4, lr, #32
  4016c8:	fa20 f404 	lsr.w	r4, r0, r4
  4016cc:	fa01 f60e 	lsl.w	r6, r1, lr
  4016d0:	ea44 0c06 	orr.w	ip, r4, r6
  4016d4:	fa02 f70e 	lsl.w	r7, r2, lr
  4016d8:	fa00 f40e 	lsl.w	r4, r0, lr
  4016dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4016e0:	0c22      	lsrs	r2, r4, #16
  4016e2:	fbbc f0f9 	udiv	r0, ip, r9
  4016e6:	fa1f f887 	uxth.w	r8, r7
  4016ea:	fb09 c610 	mls	r6, r9, r0, ip
  4016ee:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4016f2:	fb00 f308 	mul.w	r3, r0, r8
  4016f6:	42b3      	cmp	r3, r6
  4016f8:	d909      	bls.n	40170e <__udivmoddi4+0x6a>
  4016fa:	19f6      	adds	r6, r6, r7
  4016fc:	f100 32ff 	add.w	r2, r0, #4294967295
  401700:	f080 8122 	bcs.w	401948 <__udivmoddi4+0x2a4>
  401704:	42b3      	cmp	r3, r6
  401706:	f240 811f 	bls.w	401948 <__udivmoddi4+0x2a4>
  40170a:	3802      	subs	r0, #2
  40170c:	443e      	add	r6, r7
  40170e:	1af6      	subs	r6, r6, r3
  401710:	b2a2      	uxth	r2, r4
  401712:	fbb6 f3f9 	udiv	r3, r6, r9
  401716:	fb09 6613 	mls	r6, r9, r3, r6
  40171a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40171e:	fb03 f808 	mul.w	r8, r3, r8
  401722:	45a0      	cmp	r8, r4
  401724:	d909      	bls.n	40173a <__udivmoddi4+0x96>
  401726:	19e4      	adds	r4, r4, r7
  401728:	f103 32ff 	add.w	r2, r3, #4294967295
  40172c:	f080 810a 	bcs.w	401944 <__udivmoddi4+0x2a0>
  401730:	45a0      	cmp	r8, r4
  401732:	f240 8107 	bls.w	401944 <__udivmoddi4+0x2a0>
  401736:	3b02      	subs	r3, #2
  401738:	443c      	add	r4, r7
  40173a:	ebc8 0404 	rsb	r4, r8, r4
  40173e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  401742:	2100      	movs	r1, #0
  401744:	2d00      	cmp	r5, #0
  401746:	d062      	beq.n	40180e <__udivmoddi4+0x16a>
  401748:	fa24 f40e 	lsr.w	r4, r4, lr
  40174c:	2300      	movs	r3, #0
  40174e:	602c      	str	r4, [r5, #0]
  401750:	606b      	str	r3, [r5, #4]
  401752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401756:	428b      	cmp	r3, r1
  401758:	d907      	bls.n	40176a <__udivmoddi4+0xc6>
  40175a:	2d00      	cmp	r5, #0
  40175c:	d055      	beq.n	40180a <__udivmoddi4+0x166>
  40175e:	2100      	movs	r1, #0
  401760:	e885 0041 	stmia.w	r5, {r0, r6}
  401764:	4608      	mov	r0, r1
  401766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40176a:	fab3 f183 	clz	r1, r3
  40176e:	2900      	cmp	r1, #0
  401770:	f040 8090 	bne.w	401894 <__udivmoddi4+0x1f0>
  401774:	42b3      	cmp	r3, r6
  401776:	d302      	bcc.n	40177e <__udivmoddi4+0xda>
  401778:	4282      	cmp	r2, r0
  40177a:	f200 80f8 	bhi.w	40196e <__udivmoddi4+0x2ca>
  40177e:	1a84      	subs	r4, r0, r2
  401780:	eb66 0603 	sbc.w	r6, r6, r3
  401784:	2001      	movs	r0, #1
  401786:	46b4      	mov	ip, r6
  401788:	2d00      	cmp	r5, #0
  40178a:	d040      	beq.n	40180e <__udivmoddi4+0x16a>
  40178c:	e885 1010 	stmia.w	r5, {r4, ip}
  401790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401794:	b912      	cbnz	r2, 40179c <__udivmoddi4+0xf8>
  401796:	2701      	movs	r7, #1
  401798:	fbb7 f7f2 	udiv	r7, r7, r2
  40179c:	fab7 fe87 	clz	lr, r7
  4017a0:	f1be 0f00 	cmp.w	lr, #0
  4017a4:	d135      	bne.n	401812 <__udivmoddi4+0x16e>
  4017a6:	1bf3      	subs	r3, r6, r7
  4017a8:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4017ac:	fa1f fc87 	uxth.w	ip, r7
  4017b0:	2101      	movs	r1, #1
  4017b2:	fbb3 f0f8 	udiv	r0, r3, r8
  4017b6:	0c22      	lsrs	r2, r4, #16
  4017b8:	fb08 3610 	mls	r6, r8, r0, r3
  4017bc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4017c0:	fb0c f300 	mul.w	r3, ip, r0
  4017c4:	42b3      	cmp	r3, r6
  4017c6:	d907      	bls.n	4017d8 <__udivmoddi4+0x134>
  4017c8:	19f6      	adds	r6, r6, r7
  4017ca:	f100 32ff 	add.w	r2, r0, #4294967295
  4017ce:	d202      	bcs.n	4017d6 <__udivmoddi4+0x132>
  4017d0:	42b3      	cmp	r3, r6
  4017d2:	f200 80ce 	bhi.w	401972 <__udivmoddi4+0x2ce>
  4017d6:	4610      	mov	r0, r2
  4017d8:	1af6      	subs	r6, r6, r3
  4017da:	b2a2      	uxth	r2, r4
  4017dc:	fbb6 f3f8 	udiv	r3, r6, r8
  4017e0:	fb08 6613 	mls	r6, r8, r3, r6
  4017e4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4017e8:	fb0c fc03 	mul.w	ip, ip, r3
  4017ec:	45a4      	cmp	ip, r4
  4017ee:	d907      	bls.n	401800 <__udivmoddi4+0x15c>
  4017f0:	19e4      	adds	r4, r4, r7
  4017f2:	f103 32ff 	add.w	r2, r3, #4294967295
  4017f6:	d202      	bcs.n	4017fe <__udivmoddi4+0x15a>
  4017f8:	45a4      	cmp	ip, r4
  4017fa:	f200 80b5 	bhi.w	401968 <__udivmoddi4+0x2c4>
  4017fe:	4613      	mov	r3, r2
  401800:	ebcc 0404 	rsb	r4, ip, r4
  401804:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  401808:	e79c      	b.n	401744 <__udivmoddi4+0xa0>
  40180a:	4629      	mov	r1, r5
  40180c:	4628      	mov	r0, r5
  40180e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401812:	f1ce 0120 	rsb	r1, lr, #32
  401816:	fa06 f30e 	lsl.w	r3, r6, lr
  40181a:	fa07 f70e 	lsl.w	r7, r7, lr
  40181e:	fa20 f901 	lsr.w	r9, r0, r1
  401822:	ea4f 4817 	mov.w	r8, r7, lsr #16
  401826:	40ce      	lsrs	r6, r1
  401828:	ea49 0903 	orr.w	r9, r9, r3
  40182c:	fbb6 faf8 	udiv	sl, r6, r8
  401830:	ea4f 4419 	mov.w	r4, r9, lsr #16
  401834:	fb08 661a 	mls	r6, r8, sl, r6
  401838:	fa1f fc87 	uxth.w	ip, r7
  40183c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  401840:	fb0a f20c 	mul.w	r2, sl, ip
  401844:	429a      	cmp	r2, r3
  401846:	fa00 f40e 	lsl.w	r4, r0, lr
  40184a:	d90a      	bls.n	401862 <__udivmoddi4+0x1be>
  40184c:	19db      	adds	r3, r3, r7
  40184e:	f10a 31ff 	add.w	r1, sl, #4294967295
  401852:	f080 8087 	bcs.w	401964 <__udivmoddi4+0x2c0>
  401856:	429a      	cmp	r2, r3
  401858:	f240 8084 	bls.w	401964 <__udivmoddi4+0x2c0>
  40185c:	f1aa 0a02 	sub.w	sl, sl, #2
  401860:	443b      	add	r3, r7
  401862:	1a9b      	subs	r3, r3, r2
  401864:	fa1f f989 	uxth.w	r9, r9
  401868:	fbb3 f1f8 	udiv	r1, r3, r8
  40186c:	fb08 3311 	mls	r3, r8, r1, r3
  401870:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  401874:	fb01 f60c 	mul.w	r6, r1, ip
  401878:	429e      	cmp	r6, r3
  40187a:	d907      	bls.n	40188c <__udivmoddi4+0x1e8>
  40187c:	19db      	adds	r3, r3, r7
  40187e:	f101 32ff 	add.w	r2, r1, #4294967295
  401882:	d26b      	bcs.n	40195c <__udivmoddi4+0x2b8>
  401884:	429e      	cmp	r6, r3
  401886:	d969      	bls.n	40195c <__udivmoddi4+0x2b8>
  401888:	3902      	subs	r1, #2
  40188a:	443b      	add	r3, r7
  40188c:	1b9b      	subs	r3, r3, r6
  40188e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  401892:	e78e      	b.n	4017b2 <__udivmoddi4+0x10e>
  401894:	f1c1 0e20 	rsb	lr, r1, #32
  401898:	fa22 f40e 	lsr.w	r4, r2, lr
  40189c:	408b      	lsls	r3, r1
  40189e:	4323      	orrs	r3, r4
  4018a0:	fa20 f70e 	lsr.w	r7, r0, lr
  4018a4:	fa06 f401 	lsl.w	r4, r6, r1
  4018a8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4018ac:	fa26 f60e 	lsr.w	r6, r6, lr
  4018b0:	433c      	orrs	r4, r7
  4018b2:	fbb6 f9fc 	udiv	r9, r6, ip
  4018b6:	0c27      	lsrs	r7, r4, #16
  4018b8:	fb0c 6619 	mls	r6, ip, r9, r6
  4018bc:	fa1f f883 	uxth.w	r8, r3
  4018c0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4018c4:	fb09 f708 	mul.w	r7, r9, r8
  4018c8:	42b7      	cmp	r7, r6
  4018ca:	fa02 f201 	lsl.w	r2, r2, r1
  4018ce:	fa00 fa01 	lsl.w	sl, r0, r1
  4018d2:	d908      	bls.n	4018e6 <__udivmoddi4+0x242>
  4018d4:	18f6      	adds	r6, r6, r3
  4018d6:	f109 30ff 	add.w	r0, r9, #4294967295
  4018da:	d241      	bcs.n	401960 <__udivmoddi4+0x2bc>
  4018dc:	42b7      	cmp	r7, r6
  4018de:	d93f      	bls.n	401960 <__udivmoddi4+0x2bc>
  4018e0:	f1a9 0902 	sub.w	r9, r9, #2
  4018e4:	441e      	add	r6, r3
  4018e6:	1bf6      	subs	r6, r6, r7
  4018e8:	b2a0      	uxth	r0, r4
  4018ea:	fbb6 f4fc 	udiv	r4, r6, ip
  4018ee:	fb0c 6614 	mls	r6, ip, r4, r6
  4018f2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4018f6:	fb04 f808 	mul.w	r8, r4, r8
  4018fa:	45b8      	cmp	r8, r7
  4018fc:	d907      	bls.n	40190e <__udivmoddi4+0x26a>
  4018fe:	18ff      	adds	r7, r7, r3
  401900:	f104 30ff 	add.w	r0, r4, #4294967295
  401904:	d228      	bcs.n	401958 <__udivmoddi4+0x2b4>
  401906:	45b8      	cmp	r8, r7
  401908:	d926      	bls.n	401958 <__udivmoddi4+0x2b4>
  40190a:	3c02      	subs	r4, #2
  40190c:	441f      	add	r7, r3
  40190e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  401912:	ebc8 0707 	rsb	r7, r8, r7
  401916:	fba0 8902 	umull	r8, r9, r0, r2
  40191a:	454f      	cmp	r7, r9
  40191c:	4644      	mov	r4, r8
  40191e:	464e      	mov	r6, r9
  401920:	d314      	bcc.n	40194c <__udivmoddi4+0x2a8>
  401922:	d029      	beq.n	401978 <__udivmoddi4+0x2d4>
  401924:	b365      	cbz	r5, 401980 <__udivmoddi4+0x2dc>
  401926:	ebba 0304 	subs.w	r3, sl, r4
  40192a:	eb67 0706 	sbc.w	r7, r7, r6
  40192e:	fa07 fe0e 	lsl.w	lr, r7, lr
  401932:	40cb      	lsrs	r3, r1
  401934:	40cf      	lsrs	r7, r1
  401936:	ea4e 0303 	orr.w	r3, lr, r3
  40193a:	e885 0088 	stmia.w	r5, {r3, r7}
  40193e:	2100      	movs	r1, #0
  401940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401944:	4613      	mov	r3, r2
  401946:	e6f8      	b.n	40173a <__udivmoddi4+0x96>
  401948:	4610      	mov	r0, r2
  40194a:	e6e0      	b.n	40170e <__udivmoddi4+0x6a>
  40194c:	ebb8 0402 	subs.w	r4, r8, r2
  401950:	eb69 0603 	sbc.w	r6, r9, r3
  401954:	3801      	subs	r0, #1
  401956:	e7e5      	b.n	401924 <__udivmoddi4+0x280>
  401958:	4604      	mov	r4, r0
  40195a:	e7d8      	b.n	40190e <__udivmoddi4+0x26a>
  40195c:	4611      	mov	r1, r2
  40195e:	e795      	b.n	40188c <__udivmoddi4+0x1e8>
  401960:	4681      	mov	r9, r0
  401962:	e7c0      	b.n	4018e6 <__udivmoddi4+0x242>
  401964:	468a      	mov	sl, r1
  401966:	e77c      	b.n	401862 <__udivmoddi4+0x1be>
  401968:	3b02      	subs	r3, #2
  40196a:	443c      	add	r4, r7
  40196c:	e748      	b.n	401800 <__udivmoddi4+0x15c>
  40196e:	4608      	mov	r0, r1
  401970:	e70a      	b.n	401788 <__udivmoddi4+0xe4>
  401972:	3802      	subs	r0, #2
  401974:	443e      	add	r6, r7
  401976:	e72f      	b.n	4017d8 <__udivmoddi4+0x134>
  401978:	45c2      	cmp	sl, r8
  40197a:	d3e7      	bcc.n	40194c <__udivmoddi4+0x2a8>
  40197c:	463e      	mov	r6, r7
  40197e:	e7d1      	b.n	401924 <__udivmoddi4+0x280>
  401980:	4629      	mov	r1, r5
  401982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401986:	bf00      	nop

00401988 <__aeabi_idiv0>:
  401988:	4770      	bx	lr
  40198a:	bf00      	nop

0040198c <__libc_init_array>:
  40198c:	b570      	push	{r4, r5, r6, lr}
  40198e:	4e0f      	ldr	r6, [pc, #60]	; (4019cc <__libc_init_array+0x40>)
  401990:	4d0f      	ldr	r5, [pc, #60]	; (4019d0 <__libc_init_array+0x44>)
  401992:	1b76      	subs	r6, r6, r5
  401994:	10b6      	asrs	r6, r6, #2
  401996:	bf18      	it	ne
  401998:	2400      	movne	r4, #0
  40199a:	d005      	beq.n	4019a8 <__libc_init_array+0x1c>
  40199c:	3401      	adds	r4, #1
  40199e:	f855 3b04 	ldr.w	r3, [r5], #4
  4019a2:	4798      	blx	r3
  4019a4:	42a6      	cmp	r6, r4
  4019a6:	d1f9      	bne.n	40199c <__libc_init_array+0x10>
  4019a8:	4e0a      	ldr	r6, [pc, #40]	; (4019d4 <__libc_init_array+0x48>)
  4019aa:	4d0b      	ldr	r5, [pc, #44]	; (4019d8 <__libc_init_array+0x4c>)
  4019ac:	1b76      	subs	r6, r6, r5
  4019ae:	f000 f895 	bl	401adc <_init>
  4019b2:	10b6      	asrs	r6, r6, #2
  4019b4:	bf18      	it	ne
  4019b6:	2400      	movne	r4, #0
  4019b8:	d006      	beq.n	4019c8 <__libc_init_array+0x3c>
  4019ba:	3401      	adds	r4, #1
  4019bc:	f855 3b04 	ldr.w	r3, [r5], #4
  4019c0:	4798      	blx	r3
  4019c2:	42a6      	cmp	r6, r4
  4019c4:	d1f9      	bne.n	4019ba <__libc_init_array+0x2e>
  4019c6:	bd70      	pop	{r4, r5, r6, pc}
  4019c8:	bd70      	pop	{r4, r5, r6, pc}
  4019ca:	bf00      	nop
  4019cc:	00401ae8 	.word	0x00401ae8
  4019d0:	00401ae8 	.word	0x00401ae8
  4019d4:	00401af0 	.word	0x00401af0
  4019d8:	00401ae8 	.word	0x00401ae8

004019dc <register_fini>:
  4019dc:	4b02      	ldr	r3, [pc, #8]	; (4019e8 <register_fini+0xc>)
  4019de:	b113      	cbz	r3, 4019e6 <register_fini+0xa>
  4019e0:	4802      	ldr	r0, [pc, #8]	; (4019ec <register_fini+0x10>)
  4019e2:	f000 b805 	b.w	4019f0 <atexit>
  4019e6:	4770      	bx	lr
  4019e8:	00000000 	.word	0x00000000
  4019ec:	004019fd 	.word	0x004019fd

004019f0 <atexit>:
  4019f0:	2300      	movs	r3, #0
  4019f2:	4601      	mov	r1, r0
  4019f4:	461a      	mov	r2, r3
  4019f6:	4618      	mov	r0, r3
  4019f8:	f000 b814 	b.w	401a24 <__register_exitproc>

004019fc <__libc_fini_array>:
  4019fc:	b538      	push	{r3, r4, r5, lr}
  4019fe:	4d07      	ldr	r5, [pc, #28]	; (401a1c <__libc_fini_array+0x20>)
  401a00:	4c07      	ldr	r4, [pc, #28]	; (401a20 <__libc_fini_array+0x24>)
  401a02:	1b2c      	subs	r4, r5, r4
  401a04:	10a4      	asrs	r4, r4, #2
  401a06:	d005      	beq.n	401a14 <__libc_fini_array+0x18>
  401a08:	3c01      	subs	r4, #1
  401a0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  401a0e:	4798      	blx	r3
  401a10:	2c00      	cmp	r4, #0
  401a12:	d1f9      	bne.n	401a08 <__libc_fini_array+0xc>
  401a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401a18:	f000 b86a 	b.w	401af0 <_fini>
  401a1c:	00401b00 	.word	0x00401b00
  401a20:	00401afc 	.word	0x00401afc

00401a24 <__register_exitproc>:
  401a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a28:	4c25      	ldr	r4, [pc, #148]	; (401ac0 <__register_exitproc+0x9c>)
  401a2a:	6825      	ldr	r5, [r4, #0]
  401a2c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  401a30:	4606      	mov	r6, r0
  401a32:	4688      	mov	r8, r1
  401a34:	4692      	mov	sl, r2
  401a36:	4699      	mov	r9, r3
  401a38:	b3c4      	cbz	r4, 401aac <__register_exitproc+0x88>
  401a3a:	6860      	ldr	r0, [r4, #4]
  401a3c:	281f      	cmp	r0, #31
  401a3e:	dc17      	bgt.n	401a70 <__register_exitproc+0x4c>
  401a40:	1c43      	adds	r3, r0, #1
  401a42:	b176      	cbz	r6, 401a62 <__register_exitproc+0x3e>
  401a44:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  401a48:	2201      	movs	r2, #1
  401a4a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  401a4e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  401a52:	4082      	lsls	r2, r0
  401a54:	4311      	orrs	r1, r2
  401a56:	2e02      	cmp	r6, #2
  401a58:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  401a5c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  401a60:	d01e      	beq.n	401aa0 <__register_exitproc+0x7c>
  401a62:	3002      	adds	r0, #2
  401a64:	6063      	str	r3, [r4, #4]
  401a66:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  401a6a:	2000      	movs	r0, #0
  401a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a70:	4b14      	ldr	r3, [pc, #80]	; (401ac4 <__register_exitproc+0xa0>)
  401a72:	b303      	cbz	r3, 401ab6 <__register_exitproc+0x92>
  401a74:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401a78:	f3af 8000 	nop.w
  401a7c:	4604      	mov	r4, r0
  401a7e:	b1d0      	cbz	r0, 401ab6 <__register_exitproc+0x92>
  401a80:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  401a84:	2700      	movs	r7, #0
  401a86:	e880 0088 	stmia.w	r0, {r3, r7}
  401a8a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401a8e:	4638      	mov	r0, r7
  401a90:	2301      	movs	r3, #1
  401a92:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  401a96:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  401a9a:	2e00      	cmp	r6, #0
  401a9c:	d0e1      	beq.n	401a62 <__register_exitproc+0x3e>
  401a9e:	e7d1      	b.n	401a44 <__register_exitproc+0x20>
  401aa0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  401aa4:	430a      	orrs	r2, r1
  401aa6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  401aaa:	e7da      	b.n	401a62 <__register_exitproc+0x3e>
  401aac:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  401ab0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401ab4:	e7c1      	b.n	401a3a <__register_exitproc+0x16>
  401ab6:	f04f 30ff 	mov.w	r0, #4294967295
  401aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401abe:	bf00      	nop
  401ac0:	00401ad8 	.word	0x00401ad8
  401ac4:	00000000 	.word	0x00000000
  401ac8:	756e654d 	.word	0x756e654d
  401acc:	2e2e2e20 	.word	0x2e2e2e20
  401ad0:	000a202e 	.word	0x000a202e
  401ad4:	00000043 	.word	0x00000043

00401ad8 <_global_impure_ptr>:
  401ad8:	20400018                                ..@ 

00401adc <_init>:
  401adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401ade:	bf00      	nop
  401ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401ae2:	bc08      	pop	{r3}
  401ae4:	469e      	mov	lr, r3
  401ae6:	4770      	bx	lr

00401ae8 <__init_array_start>:
  401ae8:	004019dd 	.word	0x004019dd

00401aec <__frame_dummy_init_array_entry>:
  401aec:	00400165                                e.@.

00401af0 <_fini>:
  401af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401af2:	bf00      	nop
  401af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401af6:	bc08      	pop	{r3}
  401af8:	469e      	mov	lr, r3
  401afa:	4770      	bx	lr

00401afc <__fini_array_start>:
  401afc:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <g_interrupt_enabled>:
2040000c:	0001 0000                                   ....

20400010 <SystemCoreClock>:
20400010:	0900 003d 0000 0000                         ..=.....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
2040004c:	1ad4 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
